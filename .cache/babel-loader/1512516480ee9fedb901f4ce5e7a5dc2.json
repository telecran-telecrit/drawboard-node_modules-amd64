{"ast":null,"code":"import _objectSpread from \"/home/pro/Solutions/drawboard-light/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { randomSeed } from \"roughjs/bin/math\";\nimport nanoid from \"nanoid\";\nimport { measureText } from \"../utils\";\nexport function newElement(type, x, y, strokeColor, backgroundColor, fillStyle, strokeWidth, roughness, opacity) {\n  var width = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : 0;\n  var height = arguments.length > 10 && arguments[10] !== undefined ? arguments[10] : 0;\n  var element = {\n    id: nanoid(),\n    type: type,\n    x: x,\n    y: y,\n    width: width,\n    height: height,\n    strokeColor: strokeColor,\n    backgroundColor: backgroundColor,\n    fillStyle: fillStyle,\n    strokeWidth: strokeWidth,\n    roughness: roughness,\n    opacity: opacity,\n    seed: randomSeed(),\n    points: []\n  };\n  return element;\n}\nexport function newTextElement(element, text, font) {\n  var metrics = measureText(text, font);\n\n  var textElement = _objectSpread({}, element, {\n    type: \"text\",\n    text: text,\n    font: font,\n    // Center the text\n    x: element.x - metrics.width / 2,\n    y: element.y - metrics.height / 2,\n    width: metrics.width,\n    height: metrics.height,\n    baseline: metrics.baseline\n  });\n\n  return textElement;\n} // Simplified deep clone for the purpose of cloning ExcalidrawElement only\n//  (doesn't clone Date, RegExp, Map, Set, Typed arrays etc.)\n//\n// Adapted from https://github.com/lukeed/klona\n\nfunction _duplicateElement(val) {\n  var depth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n  if (val == null || typeof val !== \"object\") {\n    return val;\n  }\n\n  if (Object.prototype.toString.call(val) === \"[object Object]\") {\n    var tmp = typeof val.constructor === \"function\" ? Object.create(Object.getPrototypeOf(val)) : {};\n\n    for (var key in val) {\n      if (val.hasOwnProperty(key)) {\n        // don't copy top-level shape property, which we want to regenerate\n        if (depth === 0 && (key === \"shape\" || key === \"canvas\")) {\n          continue;\n        }\n\n        tmp[key] = _duplicateElement(val[key], depth + 1);\n      }\n    }\n\n    return tmp;\n  }\n\n  if (Array.isArray(val)) {\n    var k = val.length;\n    var arr = new Array(k);\n\n    while (k--) {\n      arr[k] = _duplicateElement(val[k], depth + 1);\n    }\n\n    return arr;\n  }\n\n  return val;\n}\n\nexport function duplicateElement(element) {\n  var copy = _duplicateElement(element);\n\n  copy.id = nanoid();\n  copy.seed = randomSeed();\n  return copy;\n}","map":{"version":3,"sources":["/home/pro/Solutions/drawboard-light/src/element/newElement.ts"],"names":["randomSeed","nanoid","measureText","newElement","type","x","y","strokeColor","backgroundColor","fillStyle","strokeWidth","roughness","opacity","width","height","element","id","seed","points","newTextElement","text","font","metrics","textElement","baseline","_duplicateElement","val","depth","Object","prototype","toString","call","tmp","constructor","create","getPrototypeOf","key","hasOwnProperty","Array","isArray","k","length","arr","duplicateElement","copy"],"mappings":"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","sourcesContent":["import { randomSeed } from \"roughjs/bin/math\";\nimport nanoid from \"nanoid\";\nimport { Point } from \"roughjs/bin/geometry\";\n\nimport { ExcalidrawElement, ExcalidrawTextElement } from \"../element/types\";\nimport { measureText } from \"../utils\";\n\nexport function newElement(\n  type: string,\n  x: number,\n  y: number,\n  strokeColor: string,\n  backgroundColor: string,\n  fillStyle: string,\n  strokeWidth: number,\n  roughness: number,\n  opacity: number,\n  width = 0,\n  height = 0,\n) {\n  const element = {\n    id: nanoid(),\n    type,\n    x,\n    y,\n    width,\n    height,\n    strokeColor,\n    backgroundColor,\n    fillStyle,\n    strokeWidth,\n    roughness,\n    opacity,\n    seed: randomSeed(),\n    points: [] as Point[],\n  };\n  return element;\n}\n\nexport function newTextElement(\n  element: ExcalidrawElement,\n  text: string,\n  font: string,\n) {\n  const metrics = measureText(text, font);\n  const textElement: ExcalidrawTextElement = {\n    ...element,\n    type: \"text\",\n    text: text,\n    font: font,\n    // Center the text\n    x: element.x - metrics.width / 2,\n    y: element.y - metrics.height / 2,\n    width: metrics.width,\n    height: metrics.height,\n    baseline: metrics.baseline,\n  };\n\n  return textElement;\n}\n\n// Simplified deep clone for the purpose of cloning ExcalidrawElement only\n//  (doesn't clone Date, RegExp, Map, Set, Typed arrays etc.)\n//\n// Adapted from https://github.com/lukeed/klona\nfunction _duplicateElement(val: any, depth: number = 0) {\n  if (val == null || typeof val !== \"object\") {\n    return val;\n  }\n\n  if (Object.prototype.toString.call(val) === \"[object Object]\") {\n    const tmp =\n      typeof val.constructor === \"function\"\n        ? Object.create(Object.getPrototypeOf(val))\n        : {};\n    for (const key in val) {\n      if (val.hasOwnProperty(key)) {\n        // don't copy top-level shape property, which we want to regenerate\n        if (depth === 0 && (key === \"shape\" || key === \"canvas\")) {\n          continue;\n        }\n        tmp[key] = _duplicateElement(val[key], depth + 1);\n      }\n    }\n    return tmp;\n  }\n\n  if (Array.isArray(val)) {\n    let k = val.length;\n    const arr = new Array(k);\n    while (k--) {\n      arr[k] = _duplicateElement(val[k], depth + 1);\n    }\n    return arr;\n  }\n\n  return val;\n}\n\nexport function duplicateElement(element: ReturnType<typeof newElement>) {\n  const copy = _duplicateElement(element);\n  copy.id = nanoid();\n  copy.seed = randomSeed();\n  return copy;\n}\n"]},"metadata":{},"sourceType":"module"}