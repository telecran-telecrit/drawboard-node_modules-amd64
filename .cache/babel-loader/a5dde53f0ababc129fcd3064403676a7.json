{"ast":null,"code":"import { SVGNS } from './core';\nimport { RoughGenerator } from './generator';\nconst hasDocument = typeof document !== 'undefined';\nexport class RoughSVG {\n  constructor(svg, config) {\n    this.svg = svg;\n    this.gen = new RoughGenerator(config, this.svg);\n  }\n\n  get defs() {\n    const doc = this.svg.ownerDocument || hasDocument && document;\n\n    if (doc) {\n      if (!this._defs) {\n        const dnode = doc.createElementNS(SVGNS, 'defs');\n\n        if (this.svg.firstChild) {\n          this.svg.insertBefore(dnode, this.svg.firstChild);\n        } else {\n          this.svg.appendChild(dnode);\n        }\n\n        this._defs = dnode;\n      }\n    }\n\n    return this._defs || null;\n  }\n\n  draw(drawable) {\n    const sets = drawable.sets || [];\n    const o = drawable.options || this.getDefaultOptions();\n    const doc = this.svg.ownerDocument || window.document;\n    const g = doc.createElementNS(SVGNS, 'g');\n\n    for (const drawing of sets) {\n      let path = null;\n\n      switch (drawing.type) {\n        case 'path':\n          {\n            path = doc.createElementNS(SVGNS, 'path');\n            path.setAttribute('d', this.opsToPath(drawing));\n            path.style.stroke = o.stroke;\n            path.style.strokeWidth = o.strokeWidth + '';\n            path.style.fill = 'none';\n            break;\n          }\n\n        case 'fillPath':\n          {\n            path = doc.createElementNS(SVGNS, 'path');\n            path.setAttribute('d', this.opsToPath(drawing));\n            path.style.stroke = 'none';\n            path.style.strokeWidth = '0';\n            path.style.fill = o.fill || '';\n            break;\n          }\n\n        case 'fillSketch':\n          {\n            path = this.fillSketch(doc, drawing, o);\n            break;\n          }\n\n        case 'path2Dfill':\n          {\n            path = doc.createElementNS(SVGNS, 'path');\n            path.setAttribute('d', drawing.path || '');\n            path.style.stroke = 'none';\n            path.style.strokeWidth = '0';\n            path.style.fill = o.fill || '';\n            break;\n          }\n\n        case 'path2Dpattern':\n          {\n            if (!this.defs) {\n              console.error('Pattern fill fail: No defs');\n            } else {\n              const size = drawing.size;\n              const pattern = doc.createElementNS(SVGNS, 'pattern');\n              const id = `rough-${Math.floor(Math.random() * (Number.MAX_SAFE_INTEGER || 999999))}`;\n              pattern.setAttribute('id', id);\n              pattern.setAttribute('x', '0');\n              pattern.setAttribute('y', '0');\n              pattern.setAttribute('width', '1');\n              pattern.setAttribute('height', '1');\n              pattern.setAttribute('height', '1');\n              pattern.setAttribute('viewBox', `0 0 ${Math.round(size[0])} ${Math.round(size[1])}`);\n              pattern.setAttribute('patternUnits', 'objectBoundingBox');\n              const patternPath = this.fillSketch(doc, drawing, o);\n              pattern.appendChild(patternPath);\n              this.defs.appendChild(pattern);\n              path = doc.createElementNS(SVGNS, 'path');\n              path.setAttribute('d', drawing.path || '');\n              path.style.stroke = 'none';\n              path.style.strokeWidth = '0';\n              path.style.fill = `url(#${id})`;\n            }\n\n            break;\n          }\n      }\n\n      if (path) {\n        g.appendChild(path);\n      }\n    }\n\n    return g;\n  }\n\n  fillSketch(doc, drawing, o) {\n    let fweight = o.fillWeight;\n\n    if (fweight < 0) {\n      fweight = o.strokeWidth / 2;\n    }\n\n    const path = doc.createElementNS(SVGNS, 'path');\n    path.setAttribute('d', this.opsToPath(drawing));\n    path.style.stroke = o.fill || '';\n    path.style.strokeWidth = fweight + '';\n    path.style.fill = 'none';\n    return path;\n  }\n\n  get generator() {\n    return this.gen;\n  }\n\n  getDefaultOptions() {\n    return this.gen.defaultOptions;\n  }\n\n  opsToPath(drawing) {\n    return this.gen.opsToPath(drawing);\n  }\n\n  line(x1, y1, x2, y2, options) {\n    const d = this.gen.line(x1, y1, x2, y2, options);\n    return this.draw(d);\n  }\n\n  rectangle(x, y, width, height, options) {\n    const d = this.gen.rectangle(x, y, width, height, options);\n    return this.draw(d);\n  }\n\n  ellipse(x, y, width, height, options) {\n    const d = this.gen.ellipse(x, y, width, height, options);\n    return this.draw(d);\n  }\n\n  circle(x, y, diameter, options) {\n    const d = this.gen.circle(x, y, diameter, options);\n    return this.draw(d);\n  }\n\n  linearPath(points, options) {\n    const d = this.gen.linearPath(points, options);\n    return this.draw(d);\n  }\n\n  polygon(points, options) {\n    const d = this.gen.polygon(points, options);\n    return this.draw(d);\n  }\n\n  arc(x, y, width, height, start, stop, closed = false, options) {\n    const d = this.gen.arc(x, y, width, height, start, stop, closed, options);\n    return this.draw(d);\n  }\n\n  curve(points, options) {\n    const d = this.gen.curve(points, options);\n    return this.draw(d);\n  }\n\n  path(d, options) {\n    const drawing = this.gen.path(d, options);\n    return this.draw(drawing);\n  }\n\n}","map":{"version":3,"sources":["/home/pro/Solutions/drawboard-light/node_modules/roughjs/bin/svg.js"],"names":["SVGNS","RoughGenerator","hasDocument","document","RoughSVG","constructor","svg","config","gen","defs","doc","ownerDocument","_defs","dnode","createElementNS","firstChild","insertBefore","appendChild","draw","drawable","sets","o","options","getDefaultOptions","window","g","drawing","path","type","setAttribute","opsToPath","style","stroke","strokeWidth","fill","fillSketch","console","error","size","pattern","id","Math","floor","random","Number","MAX_SAFE_INTEGER","round","patternPath","fweight","fillWeight","generator","defaultOptions","line","x1","y1","x2","y2","d","rectangle","x","y","width","height","ellipse","circle","diameter","linearPath","points","polygon","arc","start","stop","closed","curve"],"mappings":"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","sourcesContent":["import { SVGNS } from './core';\nimport { RoughGenerator } from './generator';\nconst hasDocument = typeof document !== 'undefined';\nexport class RoughSVG {\n    constructor(svg, config) {\n        this.svg = svg;\n        this.gen = new RoughGenerator(config, this.svg);\n    }\n    get defs() {\n        const doc = this.svg.ownerDocument || (hasDocument && document);\n        if (doc) {\n            if (!this._defs) {\n                const dnode = doc.createElementNS(SVGNS, 'defs');\n                if (this.svg.firstChild) {\n                    this.svg.insertBefore(dnode, this.svg.firstChild);\n                }\n                else {\n                    this.svg.appendChild(dnode);\n                }\n                this._defs = dnode;\n            }\n        }\n        return this._defs || null;\n    }\n    draw(drawable) {\n        const sets = drawable.sets || [];\n        const o = drawable.options || this.getDefaultOptions();\n        const doc = this.svg.ownerDocument || window.document;\n        const g = doc.createElementNS(SVGNS, 'g');\n        for (const drawing of sets) {\n            let path = null;\n            switch (drawing.type) {\n                case 'path': {\n                    path = doc.createElementNS(SVGNS, 'path');\n                    path.setAttribute('d', this.opsToPath(drawing));\n                    path.style.stroke = o.stroke;\n                    path.style.strokeWidth = o.strokeWidth + '';\n                    path.style.fill = 'none';\n                    break;\n                }\n                case 'fillPath': {\n                    path = doc.createElementNS(SVGNS, 'path');\n                    path.setAttribute('d', this.opsToPath(drawing));\n                    path.style.stroke = 'none';\n                    path.style.strokeWidth = '0';\n                    path.style.fill = o.fill || '';\n                    break;\n                }\n                case 'fillSketch': {\n                    path = this.fillSketch(doc, drawing, o);\n                    break;\n                }\n                case 'path2Dfill': {\n                    path = doc.createElementNS(SVGNS, 'path');\n                    path.setAttribute('d', drawing.path || '');\n                    path.style.stroke = 'none';\n                    path.style.strokeWidth = '0';\n                    path.style.fill = o.fill || '';\n                    break;\n                }\n                case 'path2Dpattern': {\n                    if (!this.defs) {\n                        console.error('Pattern fill fail: No defs');\n                    }\n                    else {\n                        const size = drawing.size;\n                        const pattern = doc.createElementNS(SVGNS, 'pattern');\n                        const id = `rough-${Math.floor(Math.random() * (Number.MAX_SAFE_INTEGER || 999999))}`;\n                        pattern.setAttribute('id', id);\n                        pattern.setAttribute('x', '0');\n                        pattern.setAttribute('y', '0');\n                        pattern.setAttribute('width', '1');\n                        pattern.setAttribute('height', '1');\n                        pattern.setAttribute('height', '1');\n                        pattern.setAttribute('viewBox', `0 0 ${Math.round(size[0])} ${Math.round(size[1])}`);\n                        pattern.setAttribute('patternUnits', 'objectBoundingBox');\n                        const patternPath = this.fillSketch(doc, drawing, o);\n                        pattern.appendChild(patternPath);\n                        this.defs.appendChild(pattern);\n                        path = doc.createElementNS(SVGNS, 'path');\n                        path.setAttribute('d', drawing.path || '');\n                        path.style.stroke = 'none';\n                        path.style.strokeWidth = '0';\n                        path.style.fill = `url(#${id})`;\n                    }\n                    break;\n                }\n            }\n            if (path) {\n                g.appendChild(path);\n            }\n        }\n        return g;\n    }\n    fillSketch(doc, drawing, o) {\n        let fweight = o.fillWeight;\n        if (fweight < 0) {\n            fweight = o.strokeWidth / 2;\n        }\n        const path = doc.createElementNS(SVGNS, 'path');\n        path.setAttribute('d', this.opsToPath(drawing));\n        path.style.stroke = o.fill || '';\n        path.style.strokeWidth = fweight + '';\n        path.style.fill = 'none';\n        return path;\n    }\n    get generator() {\n        return this.gen;\n    }\n    getDefaultOptions() {\n        return this.gen.defaultOptions;\n    }\n    opsToPath(drawing) {\n        return this.gen.opsToPath(drawing);\n    }\n    line(x1, y1, x2, y2, options) {\n        const d = this.gen.line(x1, y1, x2, y2, options);\n        return this.draw(d);\n    }\n    rectangle(x, y, width, height, options) {\n        const d = this.gen.rectangle(x, y, width, height, options);\n        return this.draw(d);\n    }\n    ellipse(x, y, width, height, options) {\n        const d = this.gen.ellipse(x, y, width, height, options);\n        return this.draw(d);\n    }\n    circle(x, y, diameter, options) {\n        const d = this.gen.circle(x, y, diameter, options);\n        return this.draw(d);\n    }\n    linearPath(points, options) {\n        const d = this.gen.linearPath(points, options);\n        return this.draw(d);\n    }\n    polygon(points, options) {\n        const d = this.gen.polygon(points, options);\n        return this.draw(d);\n    }\n    arc(x, y, width, height, start, stop, closed = false, options) {\n        const d = this.gen.arc(x, y, width, height, start, stop, closed, options);\n        return this.draw(d);\n    }\n    curve(points, options) {\n        const d = this.gen.curve(points, options);\n        return this.draw(d);\n    }\n    path(d, options) {\n        const drawing = this.gen.path(d, options);\n        return this.draw(drawing);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}