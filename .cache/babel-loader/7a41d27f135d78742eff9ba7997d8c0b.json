{"ast":null,"code":"/* -*- Mode: js; js-indent-level: 2; -*- */\n\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\nvar util = require('./util');\n\nvar binarySearch = require('./binary-search');\n\nvar ArraySet = require('./array-set').ArraySet;\n\nvar base64VLQ = require('./base64-vlq');\n\nvar quickSort = require('./quick-sort').quickSort;\n\nfunction SourceMapConsumer(aSourceMap) {\n  var sourceMap = aSourceMap;\n\n  if (typeof aSourceMap === 'string') {\n    sourceMap = JSON.parse(aSourceMap.replace(/^\\)\\]\\}'/, ''));\n  }\n\n  return sourceMap.sections != null ? new IndexedSourceMapConsumer(sourceMap) : new BasicSourceMapConsumer(sourceMap);\n}\n\nSourceMapConsumer.fromSourceMap = function (aSourceMap) {\n  return BasicSourceMapConsumer.fromSourceMap(aSourceMap);\n};\n/**\n * The version of the source mapping spec that we are consuming.\n */\n\n\nSourceMapConsumer.prototype._version = 3; // `__generatedMappings` and `__originalMappings` are arrays that hold the\n// parsed mapping coordinates from the source map's \"mappings\" attribute. They\n// are lazily instantiated, accessed via the `_generatedMappings` and\n// `_originalMappings` getters respectively, and we only parse the mappings\n// and create these arrays once queried for a source location. We jump through\n// these hoops because there can be many thousands of mappings, and parsing\n// them is expensive, so we only want to do it if we must.\n//\n// Each object in the arrays is of the form:\n//\n//     {\n//       generatedLine: The line number in the generated code,\n//       generatedColumn: The column number in the generated code,\n//       source: The path to the original source file that generated this\n//               chunk of code,\n//       originalLine: The line number in the original source that\n//                     corresponds to this chunk of generated code,\n//       originalColumn: The column number in the original source that\n//                       corresponds to this chunk of generated code,\n//       name: The name of the original symbol which generated this chunk of\n//             code.\n//     }\n//\n// All properties except for `generatedLine` and `generatedColumn` can be\n// `null`.\n//\n// `_generatedMappings` is ordered by the generated positions.\n//\n// `_originalMappings` is ordered by the original positions.\n\nSourceMapConsumer.prototype.__generatedMappings = null;\nObject.defineProperty(SourceMapConsumer.prototype, '_generatedMappings', {\n  get: function get() {\n    if (!this.__generatedMappings) {\n      this._parseMappings(this._mappings, this.sourceRoot);\n    }\n\n    return this.__generatedMappings;\n  }\n});\nSourceMapConsumer.prototype.__originalMappings = null;\nObject.defineProperty(SourceMapConsumer.prototype, '_originalMappings', {\n  get: function get() {\n    if (!this.__originalMappings) {\n      this._parseMappings(this._mappings, this.sourceRoot);\n    }\n\n    return this.__originalMappings;\n  }\n});\n\nSourceMapConsumer.prototype._charIsMappingSeparator = function SourceMapConsumer_charIsMappingSeparator(aStr, index) {\n  var c = aStr.charAt(index);\n  return c === \";\" || c === \",\";\n};\n/**\n * Parse the mappings in a string in to a data structure which we can easily\n * query (the ordered arrays in the `this.__generatedMappings` and\n * `this.__originalMappings` properties).\n */\n\n\nSourceMapConsumer.prototype._parseMappings = function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n  throw new Error(\"Subclasses must implement _parseMappings\");\n};\n\nSourceMapConsumer.GENERATED_ORDER = 1;\nSourceMapConsumer.ORIGINAL_ORDER = 2;\nSourceMapConsumer.GREATEST_LOWER_BOUND = 1;\nSourceMapConsumer.LEAST_UPPER_BOUND = 2;\n/**\n * Iterate over each mapping between an original source/line/column and a\n * generated line/column in this source map.\n *\n * @param Function aCallback\n *        The function that is called with each mapping.\n * @param Object aContext\n *        Optional. If specified, this object will be the value of `this` every\n *        time that `aCallback` is called.\n * @param aOrder\n *        Either `SourceMapConsumer.GENERATED_ORDER` or\n *        `SourceMapConsumer.ORIGINAL_ORDER`. Specifies whether you want to\n *        iterate over the mappings sorted by the generated file's line/column\n *        order or the original's source/line/column order, respectively. Defaults to\n *        `SourceMapConsumer.GENERATED_ORDER`.\n */\n\nSourceMapConsumer.prototype.eachMapping = function SourceMapConsumer_eachMapping(aCallback, aContext, aOrder) {\n  var context = aContext || null;\n  var order = aOrder || SourceMapConsumer.GENERATED_ORDER;\n  var mappings;\n\n  switch (order) {\n    case SourceMapConsumer.GENERATED_ORDER:\n      mappings = this._generatedMappings;\n      break;\n\n    case SourceMapConsumer.ORIGINAL_ORDER:\n      mappings = this._originalMappings;\n      break;\n\n    default:\n      throw new Error(\"Unknown order of iteration.\");\n  }\n\n  var sourceRoot = this.sourceRoot;\n  mappings.map(function (mapping) {\n    var source = mapping.source === null ? null : this._sources.at(mapping.source);\n\n    if (source != null && sourceRoot != null) {\n      source = util.join(sourceRoot, source);\n    }\n\n    return {\n      source: source,\n      generatedLine: mapping.generatedLine,\n      generatedColumn: mapping.generatedColumn,\n      originalLine: mapping.originalLine,\n      originalColumn: mapping.originalColumn,\n      name: mapping.name === null ? null : this._names.at(mapping.name)\n    };\n  }, this).forEach(aCallback, context);\n};\n/**\n * Returns all generated line and column information for the original source,\n * line, and column provided. If no column is provided, returns all mappings\n * corresponding to a either the line we are searching for or the next\n * closest line that has any mappings. Otherwise, returns all mappings\n * corresponding to the given line and either the column we are searching for\n * or the next closest column that has any offsets.\n *\n * The only argument is an object with the following properties:\n *\n *   - source: The filename of the original source.\n *   - line: The line number in the original source.\n *   - column: Optional. the column number in the original source.\n *\n * and an array of objects is returned, each with the following properties:\n *\n *   - line: The line number in the generated source, or null.\n *   - column: The column number in the generated source, or null.\n */\n\n\nSourceMapConsumer.prototype.allGeneratedPositionsFor = function SourceMapConsumer_allGeneratedPositionsFor(aArgs) {\n  var line = util.getArg(aArgs, 'line'); // When there is no exact match, BasicSourceMapConsumer.prototype._findMapping\n  // returns the index of the closest mapping less than the needle. By\n  // setting needle.originalColumn to 0, we thus find the last mapping for\n  // the given line, provided such a mapping exists.\n\n  var needle = {\n    source: util.getArg(aArgs, 'source'),\n    originalLine: line,\n    originalColumn: util.getArg(aArgs, 'column', 0)\n  };\n\n  if (this.sourceRoot != null) {\n    needle.source = util.relative(this.sourceRoot, needle.source);\n  }\n\n  if (!this._sources.has(needle.source)) {\n    return [];\n  }\n\n  needle.source = this._sources.indexOf(needle.source);\n  var mappings = [];\n\n  var index = this._findMapping(needle, this._originalMappings, \"originalLine\", \"originalColumn\", util.compareByOriginalPositions, binarySearch.LEAST_UPPER_BOUND);\n\n  if (index >= 0) {\n    var mapping = this._originalMappings[index];\n\n    if (aArgs.column === undefined) {\n      var originalLine = mapping.originalLine; // Iterate until either we run out of mappings, or we run into\n      // a mapping for a different line than the one we found. Since\n      // mappings are sorted, this is guaranteed to find all mappings for\n      // the line we found.\n\n      while (mapping && mapping.originalLine === originalLine) {\n        mappings.push({\n          line: util.getArg(mapping, 'generatedLine', null),\n          column: util.getArg(mapping, 'generatedColumn', null),\n          lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)\n        });\n        mapping = this._originalMappings[++index];\n      }\n    } else {\n      var originalColumn = mapping.originalColumn; // Iterate until either we run out of mappings, or we run into\n      // a mapping for a different line than the one we were searching for.\n      // Since mappings are sorted, this is guaranteed to find all mappings for\n      // the line we are searching for.\n\n      while (mapping && mapping.originalLine === line && mapping.originalColumn == originalColumn) {\n        mappings.push({\n          line: util.getArg(mapping, 'generatedLine', null),\n          column: util.getArg(mapping, 'generatedColumn', null),\n          lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)\n        });\n        mapping = this._originalMappings[++index];\n      }\n    }\n  }\n\n  return mappings;\n};\n\nexports.SourceMapConsumer = SourceMapConsumer;\n/**\n * A BasicSourceMapConsumer instance represents a parsed source map which we can\n * query for information about the original file positions by giving it a file\n * position in the generated source.\n *\n * The only parameter is the raw source map (either as a JSON string, or\n * already parsed to an object). According to the spec, source maps have the\n * following attributes:\n *\n *   - version: Which version of the source map spec this map is following.\n *   - sources: An array of URLs to the original source files.\n *   - names: An array of identifiers which can be referrenced by individual mappings.\n *   - sourceRoot: Optional. The URL root from which all sources are relative.\n *   - sourcesContent: Optional. An array of contents of the original source files.\n *   - mappings: A string of base64 VLQs which contain the actual mappings.\n *   - file: Optional. The generated file this source map is associated with.\n *\n * Here is an example source map, taken from the source map spec[0]:\n *\n *     {\n *       version : 3,\n *       file: \"out.js\",\n *       sourceRoot : \"\",\n *       sources: [\"foo.js\", \"bar.js\"],\n *       names: [\"src\", \"maps\", \"are\", \"fun\"],\n *       mappings: \"AA,AB;;ABCDE;\"\n *     }\n *\n * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit?pli=1#\n */\n\nfunction BasicSourceMapConsumer(aSourceMap) {\n  var sourceMap = aSourceMap;\n\n  if (typeof aSourceMap === 'string') {\n    sourceMap = JSON.parse(aSourceMap.replace(/^\\)\\]\\}'/, ''));\n  }\n\n  var version = util.getArg(sourceMap, 'version');\n  var sources = util.getArg(sourceMap, 'sources'); // Sass 3.3 leaves out the 'names' array, so we deviate from the spec (which\n  // requires the array) to play nice here.\n\n  var names = util.getArg(sourceMap, 'names', []);\n  var sourceRoot = util.getArg(sourceMap, 'sourceRoot', null);\n  var sourcesContent = util.getArg(sourceMap, 'sourcesContent', null);\n  var mappings = util.getArg(sourceMap, 'mappings');\n  var file = util.getArg(sourceMap, 'file', null); // Once again, Sass deviates from the spec and supplies the version as a\n  // string rather than a number, so we use loose equality checking here.\n\n  if (version != this._version) {\n    throw new Error('Unsupported version: ' + version);\n  }\n\n  sources = sources.map(String) // Some source maps produce relative source paths like \"./foo.js\" instead of\n  // \"foo.js\".  Normalize these first so that future comparisons will succeed.\n  // See bugzil.la/1090768.\n  .map(util.normalize) // Always ensure that absolute sources are internally stored relative to\n  // the source root, if the source root is absolute. Not doing this would\n  // be particularly problematic when the source root is a prefix of the\n  // source (valid, but why??). See github issue #199 and bugzil.la/1188982.\n  .map(function (source) {\n    return sourceRoot && util.isAbsolute(sourceRoot) && util.isAbsolute(source) ? util.relative(sourceRoot, source) : source;\n  }); // Pass `true` below to allow duplicate names and sources. While source maps\n  // are intended to be compressed and deduplicated, the TypeScript compiler\n  // sometimes generates source maps with duplicates in them. See Github issue\n  // #72 and bugzil.la/889492.\n\n  this._names = ArraySet.fromArray(names.map(String), true);\n  this._sources = ArraySet.fromArray(sources, true);\n  this.sourceRoot = sourceRoot;\n  this.sourcesContent = sourcesContent;\n  this._mappings = mappings;\n  this.file = file;\n}\n\nBasicSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);\nBasicSourceMapConsumer.prototype.consumer = SourceMapConsumer;\n/**\n * Create a BasicSourceMapConsumer from a SourceMapGenerator.\n *\n * @param SourceMapGenerator aSourceMap\n *        The source map that will be consumed.\n * @returns BasicSourceMapConsumer\n */\n\nBasicSourceMapConsumer.fromSourceMap = function SourceMapConsumer_fromSourceMap(aSourceMap) {\n  var smc = Object.create(BasicSourceMapConsumer.prototype);\n  var names = smc._names = ArraySet.fromArray(aSourceMap._names.toArray(), true);\n  var sources = smc._sources = ArraySet.fromArray(aSourceMap._sources.toArray(), true);\n  smc.sourceRoot = aSourceMap._sourceRoot;\n  smc.sourcesContent = aSourceMap._generateSourcesContent(smc._sources.toArray(), smc.sourceRoot);\n  smc.file = aSourceMap._file; // Because we are modifying the entries (by converting string sources and\n  // names to indices into the sources and names ArraySets), we have to make\n  // a copy of the entry or else bad things happen. Shared mutable state\n  // strikes again! See github issue #191.\n\n  var generatedMappings = aSourceMap._mappings.toArray().slice();\n\n  var destGeneratedMappings = smc.__generatedMappings = [];\n  var destOriginalMappings = smc.__originalMappings = [];\n\n  for (var i = 0, length = generatedMappings.length; i < length; i++) {\n    var srcMapping = generatedMappings[i];\n    var destMapping = new Mapping();\n    destMapping.generatedLine = srcMapping.generatedLine;\n    destMapping.generatedColumn = srcMapping.generatedColumn;\n\n    if (srcMapping.source) {\n      destMapping.source = sources.indexOf(srcMapping.source);\n      destMapping.originalLine = srcMapping.originalLine;\n      destMapping.originalColumn = srcMapping.originalColumn;\n\n      if (srcMapping.name) {\n        destMapping.name = names.indexOf(srcMapping.name);\n      }\n\n      destOriginalMappings.push(destMapping);\n    }\n\n    destGeneratedMappings.push(destMapping);\n  }\n\n  quickSort(smc.__originalMappings, util.compareByOriginalPositions);\n  return smc;\n};\n/**\n * The version of the source mapping spec that we are consuming.\n */\n\n\nBasicSourceMapConsumer.prototype._version = 3;\n/**\n * The list of original sources.\n */\n\nObject.defineProperty(BasicSourceMapConsumer.prototype, 'sources', {\n  get: function get() {\n    return this._sources.toArray().map(function (s) {\n      return this.sourceRoot != null ? util.join(this.sourceRoot, s) : s;\n    }, this);\n  }\n});\n/**\n * Provide the JIT with a nice shape / hidden class.\n */\n\nfunction Mapping() {\n  this.generatedLine = 0;\n  this.generatedColumn = 0;\n  this.source = null;\n  this.originalLine = null;\n  this.originalColumn = null;\n  this.name = null;\n}\n/**\n * Parse the mappings in a string in to a data structure which we can easily\n * query (the ordered arrays in the `this.__generatedMappings` and\n * `this.__originalMappings` properties).\n */\n\n\nBasicSourceMapConsumer.prototype._parseMappings = function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n  var generatedLine = 1;\n  var previousGeneratedColumn = 0;\n  var previousOriginalLine = 0;\n  var previousOriginalColumn = 0;\n  var previousSource = 0;\n  var previousName = 0;\n  var length = aStr.length;\n  var index = 0;\n  var cachedSegments = {};\n  var temp = {};\n  var originalMappings = [];\n  var generatedMappings = [];\n  var mapping, str, segment, end, value;\n\n  while (index < length) {\n    if (aStr.charAt(index) === ';') {\n      generatedLine++;\n      index++;\n      previousGeneratedColumn = 0;\n    } else if (aStr.charAt(index) === ',') {\n      index++;\n    } else {\n      mapping = new Mapping();\n      mapping.generatedLine = generatedLine; // Because each offset is encoded relative to the previous one,\n      // many segments often have the same encoding. We can exploit this\n      // fact by caching the parsed variable length fields of each segment,\n      // allowing us to avoid a second parse if we encounter the same\n      // segment again.\n\n      for (end = index; end < length; end++) {\n        if (this._charIsMappingSeparator(aStr, end)) {\n          break;\n        }\n      }\n\n      str = aStr.slice(index, end);\n      segment = cachedSegments[str];\n\n      if (segment) {\n        index += str.length;\n      } else {\n        segment = [];\n\n        while (index < end) {\n          base64VLQ.decode(aStr, index, temp);\n          value = temp.value;\n          index = temp.rest;\n          segment.push(value);\n        }\n\n        if (segment.length === 2) {\n          throw new Error('Found a source, but no line and column');\n        }\n\n        if (segment.length === 3) {\n          throw new Error('Found a source and line, but no column');\n        }\n\n        cachedSegments[str] = segment;\n      } // Generated column.\n\n\n      mapping.generatedColumn = previousGeneratedColumn + segment[0];\n      previousGeneratedColumn = mapping.generatedColumn;\n\n      if (segment.length > 1) {\n        // Original source.\n        mapping.source = previousSource + segment[1];\n        previousSource += segment[1]; // Original line.\n\n        mapping.originalLine = previousOriginalLine + segment[2];\n        previousOriginalLine = mapping.originalLine; // Lines are stored 0-based\n\n        mapping.originalLine += 1; // Original column.\n\n        mapping.originalColumn = previousOriginalColumn + segment[3];\n        previousOriginalColumn = mapping.originalColumn;\n\n        if (segment.length > 4) {\n          // Original name.\n          mapping.name = previousName + segment[4];\n          previousName += segment[4];\n        }\n      }\n\n      generatedMappings.push(mapping);\n\n      if (typeof mapping.originalLine === 'number') {\n        originalMappings.push(mapping);\n      }\n    }\n  }\n\n  quickSort(generatedMappings, util.compareByGeneratedPositionsDeflated);\n  this.__generatedMappings = generatedMappings;\n  quickSort(originalMappings, util.compareByOriginalPositions);\n  this.__originalMappings = originalMappings;\n};\n/**\n * Find the mapping that best matches the hypothetical \"needle\" mapping that\n * we are searching for in the given \"haystack\" of mappings.\n */\n\n\nBasicSourceMapConsumer.prototype._findMapping = function SourceMapConsumer_findMapping(aNeedle, aMappings, aLineName, aColumnName, aComparator, aBias) {\n  // To return the position we are searching for, we must first find the\n  // mapping for the given position and then return the opposite position it\n  // points to. Because the mappings are sorted, we can use binary search to\n  // find the best mapping.\n  if (aNeedle[aLineName] <= 0) {\n    throw new TypeError('Line must be greater than or equal to 1, got ' + aNeedle[aLineName]);\n  }\n\n  if (aNeedle[aColumnName] < 0) {\n    throw new TypeError('Column must be greater than or equal to 0, got ' + aNeedle[aColumnName]);\n  }\n\n  return binarySearch.search(aNeedle, aMappings, aComparator, aBias);\n};\n/**\n * Compute the last column for each generated mapping. The last column is\n * inclusive.\n */\n\n\nBasicSourceMapConsumer.prototype.computeColumnSpans = function SourceMapConsumer_computeColumnSpans() {\n  for (var index = 0; index < this._generatedMappings.length; ++index) {\n    var mapping = this._generatedMappings[index]; // Mappings do not contain a field for the last generated columnt. We\n    // can come up with an optimistic estimate, however, by assuming that\n    // mappings are contiguous (i.e. given two consecutive mappings, the\n    // first mapping ends where the second one starts).\n\n    if (index + 1 < this._generatedMappings.length) {\n      var nextMapping = this._generatedMappings[index + 1];\n\n      if (mapping.generatedLine === nextMapping.generatedLine) {\n        mapping.lastGeneratedColumn = nextMapping.generatedColumn - 1;\n        continue;\n      }\n    } // The last mapping for each line spans the entire line.\n\n\n    mapping.lastGeneratedColumn = Infinity;\n  }\n};\n/**\n * Returns the original source, line, and column information for the generated\n * source's line and column positions provided. The only argument is an object\n * with the following properties:\n *\n *   - line: The line number in the generated source.\n *   - column: The column number in the generated source.\n *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or\n *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the\n *     closest element that is smaller than or greater than the one we are\n *     searching for, respectively, if the exact element cannot be found.\n *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.\n *\n * and an object is returned with the following properties:\n *\n *   - source: The original source file, or null.\n *   - line: The line number in the original source, or null.\n *   - column: The column number in the original source, or null.\n *   - name: The original identifier, or null.\n */\n\n\nBasicSourceMapConsumer.prototype.originalPositionFor = function SourceMapConsumer_originalPositionFor(aArgs) {\n  var needle = {\n    generatedLine: util.getArg(aArgs, 'line'),\n    generatedColumn: util.getArg(aArgs, 'column')\n  };\n\n  var index = this._findMapping(needle, this._generatedMappings, \"generatedLine\", \"generatedColumn\", util.compareByGeneratedPositionsDeflated, util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND));\n\n  if (index >= 0) {\n    var mapping = this._generatedMappings[index];\n\n    if (mapping.generatedLine === needle.generatedLine) {\n      var source = util.getArg(mapping, 'source', null);\n\n      if (source !== null) {\n        source = this._sources.at(source);\n\n        if (this.sourceRoot != null) {\n          source = util.join(this.sourceRoot, source);\n        }\n      }\n\n      var name = util.getArg(mapping, 'name', null);\n\n      if (name !== null) {\n        name = this._names.at(name);\n      }\n\n      return {\n        source: source,\n        line: util.getArg(mapping, 'originalLine', null),\n        column: util.getArg(mapping, 'originalColumn', null),\n        name: name\n      };\n    }\n  }\n\n  return {\n    source: null,\n    line: null,\n    column: null,\n    name: null\n  };\n};\n/**\n * Return true if we have the source content for every source in the source\n * map, false otherwise.\n */\n\n\nBasicSourceMapConsumer.prototype.hasContentsOfAllSources = function BasicSourceMapConsumer_hasContentsOfAllSources() {\n  if (!this.sourcesContent) {\n    return false;\n  }\n\n  return this.sourcesContent.length >= this._sources.size() && !this.sourcesContent.some(function (sc) {\n    return sc == null;\n  });\n};\n/**\n * Returns the original source content. The only argument is the url of the\n * original source file. Returns null if no original source content is\n * available.\n */\n\n\nBasicSourceMapConsumer.prototype.sourceContentFor = function SourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {\n  if (!this.sourcesContent) {\n    return null;\n  }\n\n  if (this.sourceRoot != null) {\n    aSource = util.relative(this.sourceRoot, aSource);\n  }\n\n  if (this._sources.has(aSource)) {\n    return this.sourcesContent[this._sources.indexOf(aSource)];\n  }\n\n  var url;\n\n  if (this.sourceRoot != null && (url = util.urlParse(this.sourceRoot))) {\n    // XXX: file:// URIs and absolute paths lead to unexpected behavior for\n    // many users. We can help them out when they expect file:// URIs to\n    // behave like it would if they were running a local HTTP server. See\n    // https://bugzilla.mozilla.org/show_bug.cgi?id=885597.\n    var fileUriAbsPath = aSource.replace(/^file:\\/\\//, \"\");\n\n    if (url.scheme == \"file\" && this._sources.has(fileUriAbsPath)) {\n      return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)];\n    }\n\n    if ((!url.path || url.path == \"/\") && this._sources.has(\"/\" + aSource)) {\n      return this.sourcesContent[this._sources.indexOf(\"/\" + aSource)];\n    }\n  } // This function is used recursively from\n  // IndexedSourceMapConsumer.prototype.sourceContentFor. In that case, we\n  // don't want to throw if we can't find the source - we just want to\n  // return null, so we provide a flag to exit gracefully.\n\n\n  if (nullOnMissing) {\n    return null;\n  } else {\n    throw new Error('\"' + aSource + '\" is not in the SourceMap.');\n  }\n};\n/**\n * Returns the generated line and column information for the original source,\n * line, and column positions provided. The only argument is an object with\n * the following properties:\n *\n *   - source: The filename of the original source.\n *   - line: The line number in the original source.\n *   - column: The column number in the original source.\n *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or\n *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the\n *     closest element that is smaller than or greater than the one we are\n *     searching for, respectively, if the exact element cannot be found.\n *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.\n *\n * and an object is returned with the following properties:\n *\n *   - line: The line number in the generated source, or null.\n *   - column: The column number in the generated source, or null.\n */\n\n\nBasicSourceMapConsumer.prototype.generatedPositionFor = function SourceMapConsumer_generatedPositionFor(aArgs) {\n  var source = util.getArg(aArgs, 'source');\n\n  if (this.sourceRoot != null) {\n    source = util.relative(this.sourceRoot, source);\n  }\n\n  if (!this._sources.has(source)) {\n    return {\n      line: null,\n      column: null,\n      lastColumn: null\n    };\n  }\n\n  source = this._sources.indexOf(source);\n  var needle = {\n    source: source,\n    originalLine: util.getArg(aArgs, 'line'),\n    originalColumn: util.getArg(aArgs, 'column')\n  };\n\n  var index = this._findMapping(needle, this._originalMappings, \"originalLine\", \"originalColumn\", util.compareByOriginalPositions, util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND));\n\n  if (index >= 0) {\n    var mapping = this._originalMappings[index];\n\n    if (mapping.source === needle.source) {\n      return {\n        line: util.getArg(mapping, 'generatedLine', null),\n        column: util.getArg(mapping, 'generatedColumn', null),\n        lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)\n      };\n    }\n  }\n\n  return {\n    line: null,\n    column: null,\n    lastColumn: null\n  };\n};\n\nexports.BasicSourceMapConsumer = BasicSourceMapConsumer;\n/**\n * An IndexedSourceMapConsumer instance represents a parsed source map which\n * we can query for information. It differs from BasicSourceMapConsumer in\n * that it takes \"indexed\" source maps (i.e. ones with a \"sections\" field) as\n * input.\n *\n * The only parameter is a raw source map (either as a JSON string, or already\n * parsed to an object). According to the spec for indexed source maps, they\n * have the following attributes:\n *\n *   - version: Which version of the source map spec this map is following.\n *   - file: Optional. The generated file this source map is associated with.\n *   - sections: A list of section definitions.\n *\n * Each value under the \"sections\" field has two fields:\n *   - offset: The offset into the original specified at which this section\n *       begins to apply, defined as an object with a \"line\" and \"column\"\n *       field.\n *   - map: A source map definition. This source map could also be indexed,\n *       but doesn't have to be.\n *\n * Instead of the \"map\" field, it's also possible to have a \"url\" field\n * specifying a URL to retrieve a source map from, but that's currently\n * unsupported.\n *\n * Here's an example source map, taken from the source map spec[0], but\n * modified to omit a section which uses the \"url\" field.\n *\n *  {\n *    version : 3,\n *    file: \"app.js\",\n *    sections: [{\n *      offset: {line:100, column:10},\n *      map: {\n *        version : 3,\n *        file: \"section.js\",\n *        sources: [\"foo.js\", \"bar.js\"],\n *        names: [\"src\", \"maps\", \"are\", \"fun\"],\n *        mappings: \"AAAA,E;;ABCDE;\"\n *      }\n *    }],\n *  }\n *\n * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit#heading=h.535es3xeprgt\n */\n\nfunction IndexedSourceMapConsumer(aSourceMap) {\n  var sourceMap = aSourceMap;\n\n  if (typeof aSourceMap === 'string') {\n    sourceMap = JSON.parse(aSourceMap.replace(/^\\)\\]\\}'/, ''));\n  }\n\n  var version = util.getArg(sourceMap, 'version');\n  var sections = util.getArg(sourceMap, 'sections');\n\n  if (version != this._version) {\n    throw new Error('Unsupported version: ' + version);\n  }\n\n  this._sources = new ArraySet();\n  this._names = new ArraySet();\n  var lastOffset = {\n    line: -1,\n    column: 0\n  };\n  this._sections = sections.map(function (s) {\n    if (s.url) {\n      // The url field will require support for asynchronicity.\n      // See https://github.com/mozilla/source-map/issues/16\n      throw new Error('Support for url field in sections not implemented.');\n    }\n\n    var offset = util.getArg(s, 'offset');\n    var offsetLine = util.getArg(offset, 'line');\n    var offsetColumn = util.getArg(offset, 'column');\n\n    if (offsetLine < lastOffset.line || offsetLine === lastOffset.line && offsetColumn < lastOffset.column) {\n      throw new Error('Section offsets must be ordered and non-overlapping.');\n    }\n\n    lastOffset = offset;\n    return {\n      generatedOffset: {\n        // The offset fields are 0-based, but we use 1-based indices when\n        // encoding/decoding from VLQ.\n        generatedLine: offsetLine + 1,\n        generatedColumn: offsetColumn + 1\n      },\n      consumer: new SourceMapConsumer(util.getArg(s, 'map'))\n    };\n  });\n}\n\nIndexedSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);\nIndexedSourceMapConsumer.prototype.constructor = SourceMapConsumer;\n/**\n * The version of the source mapping spec that we are consuming.\n */\n\nIndexedSourceMapConsumer.prototype._version = 3;\n/**\n * The list of original sources.\n */\n\nObject.defineProperty(IndexedSourceMapConsumer.prototype, 'sources', {\n  get: function get() {\n    var sources = [];\n\n    for (var i = 0; i < this._sections.length; i++) {\n      for (var j = 0; j < this._sections[i].consumer.sources.length; j++) {\n        sources.push(this._sections[i].consumer.sources[j]);\n      }\n    }\n\n    return sources;\n  }\n});\n/**\n * Returns the original source, line, and column information for the generated\n * source's line and column positions provided. The only argument is an object\n * with the following properties:\n *\n *   - line: The line number in the generated source.\n *   - column: The column number in the generated source.\n *\n * and an object is returned with the following properties:\n *\n *   - source: The original source file, or null.\n *   - line: The line number in the original source, or null.\n *   - column: The column number in the original source, or null.\n *   - name: The original identifier, or null.\n */\n\nIndexedSourceMapConsumer.prototype.originalPositionFor = function IndexedSourceMapConsumer_originalPositionFor(aArgs) {\n  var needle = {\n    generatedLine: util.getArg(aArgs, 'line'),\n    generatedColumn: util.getArg(aArgs, 'column')\n  }; // Find the section containing the generated position we're trying to map\n  // to an original position.\n\n  var sectionIndex = binarySearch.search(needle, this._sections, function (needle, section) {\n    var cmp = needle.generatedLine - section.generatedOffset.generatedLine;\n\n    if (cmp) {\n      return cmp;\n    }\n\n    return needle.generatedColumn - section.generatedOffset.generatedColumn;\n  });\n  var section = this._sections[sectionIndex];\n\n  if (!section) {\n    return {\n      source: null,\n      line: null,\n      column: null,\n      name: null\n    };\n  }\n\n  return section.consumer.originalPositionFor({\n    line: needle.generatedLine - (section.generatedOffset.generatedLine - 1),\n    column: needle.generatedColumn - (section.generatedOffset.generatedLine === needle.generatedLine ? section.generatedOffset.generatedColumn - 1 : 0),\n    bias: aArgs.bias\n  });\n};\n/**\n * Return true if we have the source content for every source in the source\n * map, false otherwise.\n */\n\n\nIndexedSourceMapConsumer.prototype.hasContentsOfAllSources = function IndexedSourceMapConsumer_hasContentsOfAllSources() {\n  return this._sections.every(function (s) {\n    return s.consumer.hasContentsOfAllSources();\n  });\n};\n/**\n * Returns the original source content. The only argument is the url of the\n * original source file. Returns null if no original source content is\n * available.\n */\n\n\nIndexedSourceMapConsumer.prototype.sourceContentFor = function IndexedSourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {\n  for (var i = 0; i < this._sections.length; i++) {\n    var section = this._sections[i];\n    var content = section.consumer.sourceContentFor(aSource, true);\n\n    if (content) {\n      return content;\n    }\n  }\n\n  if (nullOnMissing) {\n    return null;\n  } else {\n    throw new Error('\"' + aSource + '\" is not in the SourceMap.');\n  }\n};\n/**\n * Returns the generated line and column information for the original source,\n * line, and column positions provided. The only argument is an object with\n * the following properties:\n *\n *   - source: The filename of the original source.\n *   - line: The line number in the original source.\n *   - column: The column number in the original source.\n *\n * and an object is returned with the following properties:\n *\n *   - line: The line number in the generated source, or null.\n *   - column: The column number in the generated source, or null.\n */\n\n\nIndexedSourceMapConsumer.prototype.generatedPositionFor = function IndexedSourceMapConsumer_generatedPositionFor(aArgs) {\n  for (var i = 0; i < this._sections.length; i++) {\n    var section = this._sections[i]; // Only consider this section if the requested source is in the list of\n    // sources of the consumer.\n\n    if (section.consumer.sources.indexOf(util.getArg(aArgs, 'source')) === -1) {\n      continue;\n    }\n\n    var generatedPosition = section.consumer.generatedPositionFor(aArgs);\n\n    if (generatedPosition) {\n      var ret = {\n        line: generatedPosition.line + (section.generatedOffset.generatedLine - 1),\n        column: generatedPosition.column + (section.generatedOffset.generatedLine === generatedPosition.line ? section.generatedOffset.generatedColumn - 1 : 0)\n      };\n      return ret;\n    }\n  }\n\n  return {\n    line: null,\n    column: null\n  };\n};\n/**\n * Parse the mappings in a string in to a data structure which we can easily\n * query (the ordered arrays in the `this.__generatedMappings` and\n * `this.__originalMappings` properties).\n */\n\n\nIndexedSourceMapConsumer.prototype._parseMappings = function IndexedSourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n  this.__generatedMappings = [];\n  this.__originalMappings = [];\n\n  for (var i = 0; i < this._sections.length; i++) {\n    var section = this._sections[i];\n    var sectionMappings = section.consumer._generatedMappings;\n\n    for (var j = 0; j < sectionMappings.length; j++) {\n      var mapping = sectionMappings[j];\n\n      var source = section.consumer._sources.at(mapping.source);\n\n      if (section.consumer.sourceRoot !== null) {\n        source = util.join(section.consumer.sourceRoot, source);\n      }\n\n      this._sources.add(source);\n\n      source = this._sources.indexOf(source);\n\n      var name = section.consumer._names.at(mapping.name);\n\n      this._names.add(name);\n\n      name = this._names.indexOf(name); // The mappings coming from the consumer for the section have\n      // generated positions relative to the start of the section, so we\n      // need to offset them to be relative to the start of the concatenated\n      // generated file.\n\n      var adjustedMapping = {\n        source: source,\n        generatedLine: mapping.generatedLine + (section.generatedOffset.generatedLine - 1),\n        generatedColumn: mapping.generatedColumn + (section.generatedOffset.generatedLine === mapping.generatedLine ? section.generatedOffset.generatedColumn - 1 : 0),\n        originalLine: mapping.originalLine,\n        originalColumn: mapping.originalColumn,\n        name: name\n      };\n\n      this.__generatedMappings.push(adjustedMapping);\n\n      if (typeof adjustedMapping.originalLine === 'number') {\n        this.__originalMappings.push(adjustedMapping);\n      }\n    }\n  }\n\n  quickSort(this.__generatedMappings, util.compareByGeneratedPositionsDeflated);\n  quickSort(this.__originalMappings, util.compareByOriginalPositions);\n};\n\nexports.IndexedSourceMapConsumer = IndexedSourceMapConsumer;","map":{"version":3,"sources":["/home/pro/Solutions/drawboard-light/node_modules/stacktrace-gps/node_modules/source-map/lib/source-map-consumer.js"],"names":["util","require","binarySearch","ArraySet","base64VLQ","quickSort","SourceMapConsumer","aSourceMap","sourceMap","JSON","parse","replace","sections","IndexedSourceMapConsumer","BasicSourceMapConsumer","fromSourceMap","prototype","_version","__generatedMappings","Object","defineProperty","get","_parseMappings","_mappings","sourceRoot","__originalMappings","_charIsMappingSeparator","SourceMapConsumer_charIsMappingSeparator","aStr","index","c","charAt","SourceMapConsumer_parseMappings","aSourceRoot","Error","GENERATED_ORDER","ORIGINAL_ORDER","GREATEST_LOWER_BOUND","LEAST_UPPER_BOUND","eachMapping","SourceMapConsumer_eachMapping","aCallback","aContext","aOrder","context","order","mappings","_generatedMappings","_originalMappings","map","mapping","source","_sources","at","join","generatedLine","generatedColumn","originalLine","originalColumn","name","_names","forEach","allGeneratedPositionsFor","SourceMapConsumer_allGeneratedPositionsFor","aArgs","line","getArg","needle","relative","has","indexOf","_findMapping","compareByOriginalPositions","column","undefined","push","lastColumn","exports","version","sources","names","sourcesContent","file","String","normalize","isAbsolute","fromArray","create","consumer","SourceMapConsumer_fromSourceMap","smc","toArray","_sourceRoot","_generateSourcesContent","_file","generatedMappings","slice","destGeneratedMappings","destOriginalMappings","i","length","srcMapping","destMapping","Mapping","s","previousGeneratedColumn","previousOriginalLine","previousOriginalColumn","previousSource","previousName","cachedSegments","temp","originalMappings","str","segment","end","value","decode","rest","compareByGeneratedPositionsDeflated","SourceMapConsumer_findMapping","aNeedle","aMappings","aLineName","aColumnName","aComparator","aBias","TypeError","search","computeColumnSpans","SourceMapConsumer_computeColumnSpans","nextMapping","lastGeneratedColumn","Infinity","originalPositionFor","SourceMapConsumer_originalPositionFor","hasContentsOfAllSources","BasicSourceMapConsumer_hasContentsOfAllSources","size","some","sc","sourceContentFor","SourceMapConsumer_sourceContentFor","aSource","nullOnMissing","url","urlParse","fileUriAbsPath","scheme","path","generatedPositionFor","SourceMapConsumer_generatedPositionFor","lastOffset","_sections","offset","offsetLine","offsetColumn","generatedOffset","constructor","j","IndexedSourceMapConsumer_originalPositionFor","sectionIndex","section","cmp","bias","IndexedSourceMapConsumer_hasContentsOfAllSources","every","IndexedSourceMapConsumer_sourceContentFor","content","IndexedSourceMapConsumer_generatedPositionFor","generatedPosition","ret","IndexedSourceMapConsumer_parseMappings","sectionMappings","add","adjustedMapping"],"mappings":"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","sourcesContent":["/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\nvar util = require('./util');\nvar binarySearch = require('./binary-search');\nvar ArraySet = require('./array-set').ArraySet;\nvar base64VLQ = require('./base64-vlq');\nvar quickSort = require('./quick-sort').quickSort;\n\nfunction SourceMapConsumer(aSourceMap) {\n  var sourceMap = aSourceMap;\n  if (typeof aSourceMap === 'string') {\n    sourceMap = JSON.parse(aSourceMap.replace(/^\\)\\]\\}'/, ''));\n  }\n\n  return sourceMap.sections != null\n    ? new IndexedSourceMapConsumer(sourceMap)\n    : new BasicSourceMapConsumer(sourceMap);\n}\n\nSourceMapConsumer.fromSourceMap = function(aSourceMap) {\n  return BasicSourceMapConsumer.fromSourceMap(aSourceMap);\n}\n\n/**\n * The version of the source mapping spec that we are consuming.\n */\nSourceMapConsumer.prototype._version = 3;\n\n// `__generatedMappings` and `__originalMappings` are arrays that hold the\n// parsed mapping coordinates from the source map's \"mappings\" attribute. They\n// are lazily instantiated, accessed via the `_generatedMappings` and\n// `_originalMappings` getters respectively, and we only parse the mappings\n// and create these arrays once queried for a source location. We jump through\n// these hoops because there can be many thousands of mappings, and parsing\n// them is expensive, so we only want to do it if we must.\n//\n// Each object in the arrays is of the form:\n//\n//     {\n//       generatedLine: The line number in the generated code,\n//       generatedColumn: The column number in the generated code,\n//       source: The path to the original source file that generated this\n//               chunk of code,\n//       originalLine: The line number in the original source that\n//                     corresponds to this chunk of generated code,\n//       originalColumn: The column number in the original source that\n//                       corresponds to this chunk of generated code,\n//       name: The name of the original symbol which generated this chunk of\n//             code.\n//     }\n//\n// All properties except for `generatedLine` and `generatedColumn` can be\n// `null`.\n//\n// `_generatedMappings` is ordered by the generated positions.\n//\n// `_originalMappings` is ordered by the original positions.\n\nSourceMapConsumer.prototype.__generatedMappings = null;\nObject.defineProperty(SourceMapConsumer.prototype, '_generatedMappings', {\n  get: function () {\n    if (!this.__generatedMappings) {\n      this._parseMappings(this._mappings, this.sourceRoot);\n    }\n\n    return this.__generatedMappings;\n  }\n});\n\nSourceMapConsumer.prototype.__originalMappings = null;\nObject.defineProperty(SourceMapConsumer.prototype, '_originalMappings', {\n  get: function () {\n    if (!this.__originalMappings) {\n      this._parseMappings(this._mappings, this.sourceRoot);\n    }\n\n    return this.__originalMappings;\n  }\n});\n\nSourceMapConsumer.prototype._charIsMappingSeparator =\n  function SourceMapConsumer_charIsMappingSeparator(aStr, index) {\n    var c = aStr.charAt(index);\n    return c === \";\" || c === \",\";\n  };\n\n/**\n * Parse the mappings in a string in to a data structure which we can easily\n * query (the ordered arrays in the `this.__generatedMappings` and\n * `this.__originalMappings` properties).\n */\nSourceMapConsumer.prototype._parseMappings =\n  function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n    throw new Error(\"Subclasses must implement _parseMappings\");\n  };\n\nSourceMapConsumer.GENERATED_ORDER = 1;\nSourceMapConsumer.ORIGINAL_ORDER = 2;\n\nSourceMapConsumer.GREATEST_LOWER_BOUND = 1;\nSourceMapConsumer.LEAST_UPPER_BOUND = 2;\n\n/**\n * Iterate over each mapping between an original source/line/column and a\n * generated line/column in this source map.\n *\n * @param Function aCallback\n *        The function that is called with each mapping.\n * @param Object aContext\n *        Optional. If specified, this object will be the value of `this` every\n *        time that `aCallback` is called.\n * @param aOrder\n *        Either `SourceMapConsumer.GENERATED_ORDER` or\n *        `SourceMapConsumer.ORIGINAL_ORDER`. Specifies whether you want to\n *        iterate over the mappings sorted by the generated file's line/column\n *        order or the original's source/line/column order, respectively. Defaults to\n *        `SourceMapConsumer.GENERATED_ORDER`.\n */\nSourceMapConsumer.prototype.eachMapping =\n  function SourceMapConsumer_eachMapping(aCallback, aContext, aOrder) {\n    var context = aContext || null;\n    var order = aOrder || SourceMapConsumer.GENERATED_ORDER;\n\n    var mappings;\n    switch (order) {\n    case SourceMapConsumer.GENERATED_ORDER:\n      mappings = this._generatedMappings;\n      break;\n    case SourceMapConsumer.ORIGINAL_ORDER:\n      mappings = this._originalMappings;\n      break;\n    default:\n      throw new Error(\"Unknown order of iteration.\");\n    }\n\n    var sourceRoot = this.sourceRoot;\n    mappings.map(function (mapping) {\n      var source = mapping.source === null ? null : this._sources.at(mapping.source);\n      if (source != null && sourceRoot != null) {\n        source = util.join(sourceRoot, source);\n      }\n      return {\n        source: source,\n        generatedLine: mapping.generatedLine,\n        generatedColumn: mapping.generatedColumn,\n        originalLine: mapping.originalLine,\n        originalColumn: mapping.originalColumn,\n        name: mapping.name === null ? null : this._names.at(mapping.name)\n      };\n    }, this).forEach(aCallback, context);\n  };\n\n/**\n * Returns all generated line and column information for the original source,\n * line, and column provided. If no column is provided, returns all mappings\n * corresponding to a either the line we are searching for or the next\n * closest line that has any mappings. Otherwise, returns all mappings\n * corresponding to the given line and either the column we are searching for\n * or the next closest column that has any offsets.\n *\n * The only argument is an object with the following properties:\n *\n *   - source: The filename of the original source.\n *   - line: The line number in the original source.\n *   - column: Optional. the column number in the original source.\n *\n * and an array of objects is returned, each with the following properties:\n *\n *   - line: The line number in the generated source, or null.\n *   - column: The column number in the generated source, or null.\n */\nSourceMapConsumer.prototype.allGeneratedPositionsFor =\n  function SourceMapConsumer_allGeneratedPositionsFor(aArgs) {\n    var line = util.getArg(aArgs, 'line');\n\n    // When there is no exact match, BasicSourceMapConsumer.prototype._findMapping\n    // returns the index of the closest mapping less than the needle. By\n    // setting needle.originalColumn to 0, we thus find the last mapping for\n    // the given line, provided such a mapping exists.\n    var needle = {\n      source: util.getArg(aArgs, 'source'),\n      originalLine: line,\n      originalColumn: util.getArg(aArgs, 'column', 0)\n    };\n\n    if (this.sourceRoot != null) {\n      needle.source = util.relative(this.sourceRoot, needle.source);\n    }\n    if (!this._sources.has(needle.source)) {\n      return [];\n    }\n    needle.source = this._sources.indexOf(needle.source);\n\n    var mappings = [];\n\n    var index = this._findMapping(needle,\n                                  this._originalMappings,\n                                  \"originalLine\",\n                                  \"originalColumn\",\n                                  util.compareByOriginalPositions,\n                                  binarySearch.LEAST_UPPER_BOUND);\n    if (index >= 0) {\n      var mapping = this._originalMappings[index];\n\n      if (aArgs.column === undefined) {\n        var originalLine = mapping.originalLine;\n\n        // Iterate until either we run out of mappings, or we run into\n        // a mapping for a different line than the one we found. Since\n        // mappings are sorted, this is guaranteed to find all mappings for\n        // the line we found.\n        while (mapping && mapping.originalLine === originalLine) {\n          mappings.push({\n            line: util.getArg(mapping, 'generatedLine', null),\n            column: util.getArg(mapping, 'generatedColumn', null),\n            lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)\n          });\n\n          mapping = this._originalMappings[++index];\n        }\n      } else {\n        var originalColumn = mapping.originalColumn;\n\n        // Iterate until either we run out of mappings, or we run into\n        // a mapping for a different line than the one we were searching for.\n        // Since mappings are sorted, this is guaranteed to find all mappings for\n        // the line we are searching for.\n        while (mapping &&\n               mapping.originalLine === line &&\n               mapping.originalColumn == originalColumn) {\n          mappings.push({\n            line: util.getArg(mapping, 'generatedLine', null),\n            column: util.getArg(mapping, 'generatedColumn', null),\n            lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)\n          });\n\n          mapping = this._originalMappings[++index];\n        }\n      }\n    }\n\n    return mappings;\n  };\n\nexports.SourceMapConsumer = SourceMapConsumer;\n\n/**\n * A BasicSourceMapConsumer instance represents a parsed source map which we can\n * query for information about the original file positions by giving it a file\n * position in the generated source.\n *\n * The only parameter is the raw source map (either as a JSON string, or\n * already parsed to an object). According to the spec, source maps have the\n * following attributes:\n *\n *   - version: Which version of the source map spec this map is following.\n *   - sources: An array of URLs to the original source files.\n *   - names: An array of identifiers which can be referrenced by individual mappings.\n *   - sourceRoot: Optional. The URL root from which all sources are relative.\n *   - sourcesContent: Optional. An array of contents of the original source files.\n *   - mappings: A string of base64 VLQs which contain the actual mappings.\n *   - file: Optional. The generated file this source map is associated with.\n *\n * Here is an example source map, taken from the source map spec[0]:\n *\n *     {\n *       version : 3,\n *       file: \"out.js\",\n *       sourceRoot : \"\",\n *       sources: [\"foo.js\", \"bar.js\"],\n *       names: [\"src\", \"maps\", \"are\", \"fun\"],\n *       mappings: \"AA,AB;;ABCDE;\"\n *     }\n *\n * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit?pli=1#\n */\nfunction BasicSourceMapConsumer(aSourceMap) {\n  var sourceMap = aSourceMap;\n  if (typeof aSourceMap === 'string') {\n    sourceMap = JSON.parse(aSourceMap.replace(/^\\)\\]\\}'/, ''));\n  }\n\n  var version = util.getArg(sourceMap, 'version');\n  var sources = util.getArg(sourceMap, 'sources');\n  // Sass 3.3 leaves out the 'names' array, so we deviate from the spec (which\n  // requires the array) to play nice here.\n  var names = util.getArg(sourceMap, 'names', []);\n  var sourceRoot = util.getArg(sourceMap, 'sourceRoot', null);\n  var sourcesContent = util.getArg(sourceMap, 'sourcesContent', null);\n  var mappings = util.getArg(sourceMap, 'mappings');\n  var file = util.getArg(sourceMap, 'file', null);\n\n  // Once again, Sass deviates from the spec and supplies the version as a\n  // string rather than a number, so we use loose equality checking here.\n  if (version != this._version) {\n    throw new Error('Unsupported version: ' + version);\n  }\n\n  sources = sources\n    .map(String)\n    // Some source maps produce relative source paths like \"./foo.js\" instead of\n    // \"foo.js\".  Normalize these first so that future comparisons will succeed.\n    // See bugzil.la/1090768.\n    .map(util.normalize)\n    // Always ensure that absolute sources are internally stored relative to\n    // the source root, if the source root is absolute. Not doing this would\n    // be particularly problematic when the source root is a prefix of the\n    // source (valid, but why??). See github issue #199 and bugzil.la/1188982.\n    .map(function (source) {\n      return sourceRoot && util.isAbsolute(sourceRoot) && util.isAbsolute(source)\n        ? util.relative(sourceRoot, source)\n        : source;\n    });\n\n  // Pass `true` below to allow duplicate names and sources. While source maps\n  // are intended to be compressed and deduplicated, the TypeScript compiler\n  // sometimes generates source maps with duplicates in them. See Github issue\n  // #72 and bugzil.la/889492.\n  this._names = ArraySet.fromArray(names.map(String), true);\n  this._sources = ArraySet.fromArray(sources, true);\n\n  this.sourceRoot = sourceRoot;\n  this.sourcesContent = sourcesContent;\n  this._mappings = mappings;\n  this.file = file;\n}\n\nBasicSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);\nBasicSourceMapConsumer.prototype.consumer = SourceMapConsumer;\n\n/**\n * Create a BasicSourceMapConsumer from a SourceMapGenerator.\n *\n * @param SourceMapGenerator aSourceMap\n *        The source map that will be consumed.\n * @returns BasicSourceMapConsumer\n */\nBasicSourceMapConsumer.fromSourceMap =\n  function SourceMapConsumer_fromSourceMap(aSourceMap) {\n    var smc = Object.create(BasicSourceMapConsumer.prototype);\n\n    var names = smc._names = ArraySet.fromArray(aSourceMap._names.toArray(), true);\n    var sources = smc._sources = ArraySet.fromArray(aSourceMap._sources.toArray(), true);\n    smc.sourceRoot = aSourceMap._sourceRoot;\n    smc.sourcesContent = aSourceMap._generateSourcesContent(smc._sources.toArray(),\n                                                            smc.sourceRoot);\n    smc.file = aSourceMap._file;\n\n    // Because we are modifying the entries (by converting string sources and\n    // names to indices into the sources and names ArraySets), we have to make\n    // a copy of the entry or else bad things happen. Shared mutable state\n    // strikes again! See github issue #191.\n\n    var generatedMappings = aSourceMap._mappings.toArray().slice();\n    var destGeneratedMappings = smc.__generatedMappings = [];\n    var destOriginalMappings = smc.__originalMappings = [];\n\n    for (var i = 0, length = generatedMappings.length; i < length; i++) {\n      var srcMapping = generatedMappings[i];\n      var destMapping = new Mapping;\n      destMapping.generatedLine = srcMapping.generatedLine;\n      destMapping.generatedColumn = srcMapping.generatedColumn;\n\n      if (srcMapping.source) {\n        destMapping.source = sources.indexOf(srcMapping.source);\n        destMapping.originalLine = srcMapping.originalLine;\n        destMapping.originalColumn = srcMapping.originalColumn;\n\n        if (srcMapping.name) {\n          destMapping.name = names.indexOf(srcMapping.name);\n        }\n\n        destOriginalMappings.push(destMapping);\n      }\n\n      destGeneratedMappings.push(destMapping);\n    }\n\n    quickSort(smc.__originalMappings, util.compareByOriginalPositions);\n\n    return smc;\n  };\n\n/**\n * The version of the source mapping spec that we are consuming.\n */\nBasicSourceMapConsumer.prototype._version = 3;\n\n/**\n * The list of original sources.\n */\nObject.defineProperty(BasicSourceMapConsumer.prototype, 'sources', {\n  get: function () {\n    return this._sources.toArray().map(function (s) {\n      return this.sourceRoot != null ? util.join(this.sourceRoot, s) : s;\n    }, this);\n  }\n});\n\n/**\n * Provide the JIT with a nice shape / hidden class.\n */\nfunction Mapping() {\n  this.generatedLine = 0;\n  this.generatedColumn = 0;\n  this.source = null;\n  this.originalLine = null;\n  this.originalColumn = null;\n  this.name = null;\n}\n\n/**\n * Parse the mappings in a string in to a data structure which we can easily\n * query (the ordered arrays in the `this.__generatedMappings` and\n * `this.__originalMappings` properties).\n */\nBasicSourceMapConsumer.prototype._parseMappings =\n  function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n    var generatedLine = 1;\n    var previousGeneratedColumn = 0;\n    var previousOriginalLine = 0;\n    var previousOriginalColumn = 0;\n    var previousSource = 0;\n    var previousName = 0;\n    var length = aStr.length;\n    var index = 0;\n    var cachedSegments = {};\n    var temp = {};\n    var originalMappings = [];\n    var generatedMappings = [];\n    var mapping, str, segment, end, value;\n\n    while (index < length) {\n      if (aStr.charAt(index) === ';') {\n        generatedLine++;\n        index++;\n        previousGeneratedColumn = 0;\n      }\n      else if (aStr.charAt(index) === ',') {\n        index++;\n      }\n      else {\n        mapping = new Mapping();\n        mapping.generatedLine = generatedLine;\n\n        // Because each offset is encoded relative to the previous one,\n        // many segments often have the same encoding. We can exploit this\n        // fact by caching the parsed variable length fields of each segment,\n        // allowing us to avoid a second parse if we encounter the same\n        // segment again.\n        for (end = index; end < length; end++) {\n          if (this._charIsMappingSeparator(aStr, end)) {\n            break;\n          }\n        }\n        str = aStr.slice(index, end);\n\n        segment = cachedSegments[str];\n        if (segment) {\n          index += str.length;\n        } else {\n          segment = [];\n          while (index < end) {\n            base64VLQ.decode(aStr, index, temp);\n            value = temp.value;\n            index = temp.rest;\n            segment.push(value);\n          }\n\n          if (segment.length === 2) {\n            throw new Error('Found a source, but no line and column');\n          }\n\n          if (segment.length === 3) {\n            throw new Error('Found a source and line, but no column');\n          }\n\n          cachedSegments[str] = segment;\n        }\n\n        // Generated column.\n        mapping.generatedColumn = previousGeneratedColumn + segment[0];\n        previousGeneratedColumn = mapping.generatedColumn;\n\n        if (segment.length > 1) {\n          // Original source.\n          mapping.source = previousSource + segment[1];\n          previousSource += segment[1];\n\n          // Original line.\n          mapping.originalLine = previousOriginalLine + segment[2];\n          previousOriginalLine = mapping.originalLine;\n          // Lines are stored 0-based\n          mapping.originalLine += 1;\n\n          // Original column.\n          mapping.originalColumn = previousOriginalColumn + segment[3];\n          previousOriginalColumn = mapping.originalColumn;\n\n          if (segment.length > 4) {\n            // Original name.\n            mapping.name = previousName + segment[4];\n            previousName += segment[4];\n          }\n        }\n\n        generatedMappings.push(mapping);\n        if (typeof mapping.originalLine === 'number') {\n          originalMappings.push(mapping);\n        }\n      }\n    }\n\n    quickSort(generatedMappings, util.compareByGeneratedPositionsDeflated);\n    this.__generatedMappings = generatedMappings;\n\n    quickSort(originalMappings, util.compareByOriginalPositions);\n    this.__originalMappings = originalMappings;\n  };\n\n/**\n * Find the mapping that best matches the hypothetical \"needle\" mapping that\n * we are searching for in the given \"haystack\" of mappings.\n */\nBasicSourceMapConsumer.prototype._findMapping =\n  function SourceMapConsumer_findMapping(aNeedle, aMappings, aLineName,\n                                         aColumnName, aComparator, aBias) {\n    // To return the position we are searching for, we must first find the\n    // mapping for the given position and then return the opposite position it\n    // points to. Because the mappings are sorted, we can use binary search to\n    // find the best mapping.\n\n    if (aNeedle[aLineName] <= 0) {\n      throw new TypeError('Line must be greater than or equal to 1, got '\n                          + aNeedle[aLineName]);\n    }\n    if (aNeedle[aColumnName] < 0) {\n      throw new TypeError('Column must be greater than or equal to 0, got '\n                          + aNeedle[aColumnName]);\n    }\n\n    return binarySearch.search(aNeedle, aMappings, aComparator, aBias);\n  };\n\n/**\n * Compute the last column for each generated mapping. The last column is\n * inclusive.\n */\nBasicSourceMapConsumer.prototype.computeColumnSpans =\n  function SourceMapConsumer_computeColumnSpans() {\n    for (var index = 0; index < this._generatedMappings.length; ++index) {\n      var mapping = this._generatedMappings[index];\n\n      // Mappings do not contain a field for the last generated columnt. We\n      // can come up with an optimistic estimate, however, by assuming that\n      // mappings are contiguous (i.e. given two consecutive mappings, the\n      // first mapping ends where the second one starts).\n      if (index + 1 < this._generatedMappings.length) {\n        var nextMapping = this._generatedMappings[index + 1];\n\n        if (mapping.generatedLine === nextMapping.generatedLine) {\n          mapping.lastGeneratedColumn = nextMapping.generatedColumn - 1;\n          continue;\n        }\n      }\n\n      // The last mapping for each line spans the entire line.\n      mapping.lastGeneratedColumn = Infinity;\n    }\n  };\n\n/**\n * Returns the original source, line, and column information for the generated\n * source's line and column positions provided. The only argument is an object\n * with the following properties:\n *\n *   - line: The line number in the generated source.\n *   - column: The column number in the generated source.\n *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or\n *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the\n *     closest element that is smaller than or greater than the one we are\n *     searching for, respectively, if the exact element cannot be found.\n *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.\n *\n * and an object is returned with the following properties:\n *\n *   - source: The original source file, or null.\n *   - line: The line number in the original source, or null.\n *   - column: The column number in the original source, or null.\n *   - name: The original identifier, or null.\n */\nBasicSourceMapConsumer.prototype.originalPositionFor =\n  function SourceMapConsumer_originalPositionFor(aArgs) {\n    var needle = {\n      generatedLine: util.getArg(aArgs, 'line'),\n      generatedColumn: util.getArg(aArgs, 'column')\n    };\n\n    var index = this._findMapping(\n      needle,\n      this._generatedMappings,\n      \"generatedLine\",\n      \"generatedColumn\",\n      util.compareByGeneratedPositionsDeflated,\n      util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND)\n    );\n\n    if (index >= 0) {\n      var mapping = this._generatedMappings[index];\n\n      if (mapping.generatedLine === needle.generatedLine) {\n        var source = util.getArg(mapping, 'source', null);\n        if (source !== null) {\n          source = this._sources.at(source);\n          if (this.sourceRoot != null) {\n            source = util.join(this.sourceRoot, source);\n          }\n        }\n        var name = util.getArg(mapping, 'name', null);\n        if (name !== null) {\n          name = this._names.at(name);\n        }\n        return {\n          source: source,\n          line: util.getArg(mapping, 'originalLine', null),\n          column: util.getArg(mapping, 'originalColumn', null),\n          name: name\n        };\n      }\n    }\n\n    return {\n      source: null,\n      line: null,\n      column: null,\n      name: null\n    };\n  };\n\n/**\n * Return true if we have the source content for every source in the source\n * map, false otherwise.\n */\nBasicSourceMapConsumer.prototype.hasContentsOfAllSources =\n  function BasicSourceMapConsumer_hasContentsOfAllSources() {\n    if (!this.sourcesContent) {\n      return false;\n    }\n    return this.sourcesContent.length >= this._sources.size() &&\n      !this.sourcesContent.some(function (sc) { return sc == null; });\n  };\n\n/**\n * Returns the original source content. The only argument is the url of the\n * original source file. Returns null if no original source content is\n * available.\n */\nBasicSourceMapConsumer.prototype.sourceContentFor =\n  function SourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {\n    if (!this.sourcesContent) {\n      return null;\n    }\n\n    if (this.sourceRoot != null) {\n      aSource = util.relative(this.sourceRoot, aSource);\n    }\n\n    if (this._sources.has(aSource)) {\n      return this.sourcesContent[this._sources.indexOf(aSource)];\n    }\n\n    var url;\n    if (this.sourceRoot != null\n        && (url = util.urlParse(this.sourceRoot))) {\n      // XXX: file:// URIs and absolute paths lead to unexpected behavior for\n      // many users. We can help them out when they expect file:// URIs to\n      // behave like it would if they were running a local HTTP server. See\n      // https://bugzilla.mozilla.org/show_bug.cgi?id=885597.\n      var fileUriAbsPath = aSource.replace(/^file:\\/\\//, \"\");\n      if (url.scheme == \"file\"\n          && this._sources.has(fileUriAbsPath)) {\n        return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)]\n      }\n\n      if ((!url.path || url.path == \"/\")\n          && this._sources.has(\"/\" + aSource)) {\n        return this.sourcesContent[this._sources.indexOf(\"/\" + aSource)];\n      }\n    }\n\n    // This function is used recursively from\n    // IndexedSourceMapConsumer.prototype.sourceContentFor. In that case, we\n    // don't want to throw if we can't find the source - we just want to\n    // return null, so we provide a flag to exit gracefully.\n    if (nullOnMissing) {\n      return null;\n    }\n    else {\n      throw new Error('\"' + aSource + '\" is not in the SourceMap.');\n    }\n  };\n\n/**\n * Returns the generated line and column information for the original source,\n * line, and column positions provided. The only argument is an object with\n * the following properties:\n *\n *   - source: The filename of the original source.\n *   - line: The line number in the original source.\n *   - column: The column number in the original source.\n *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or\n *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the\n *     closest element that is smaller than or greater than the one we are\n *     searching for, respectively, if the exact element cannot be found.\n *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.\n *\n * and an object is returned with the following properties:\n *\n *   - line: The line number in the generated source, or null.\n *   - column: The column number in the generated source, or null.\n */\nBasicSourceMapConsumer.prototype.generatedPositionFor =\n  function SourceMapConsumer_generatedPositionFor(aArgs) {\n    var source = util.getArg(aArgs, 'source');\n    if (this.sourceRoot != null) {\n      source = util.relative(this.sourceRoot, source);\n    }\n    if (!this._sources.has(source)) {\n      return {\n        line: null,\n        column: null,\n        lastColumn: null\n      };\n    }\n    source = this._sources.indexOf(source);\n\n    var needle = {\n      source: source,\n      originalLine: util.getArg(aArgs, 'line'),\n      originalColumn: util.getArg(aArgs, 'column')\n    };\n\n    var index = this._findMapping(\n      needle,\n      this._originalMappings,\n      \"originalLine\",\n      \"originalColumn\",\n      util.compareByOriginalPositions,\n      util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND)\n    );\n\n    if (index >= 0) {\n      var mapping = this._originalMappings[index];\n\n      if (mapping.source === needle.source) {\n        return {\n          line: util.getArg(mapping, 'generatedLine', null),\n          column: util.getArg(mapping, 'generatedColumn', null),\n          lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)\n        };\n      }\n    }\n\n    return {\n      line: null,\n      column: null,\n      lastColumn: null\n    };\n  };\n\nexports.BasicSourceMapConsumer = BasicSourceMapConsumer;\n\n/**\n * An IndexedSourceMapConsumer instance represents a parsed source map which\n * we can query for information. It differs from BasicSourceMapConsumer in\n * that it takes \"indexed\" source maps (i.e. ones with a \"sections\" field) as\n * input.\n *\n * The only parameter is a raw source map (either as a JSON string, or already\n * parsed to an object). According to the spec for indexed source maps, they\n * have the following attributes:\n *\n *   - version: Which version of the source map spec this map is following.\n *   - file: Optional. The generated file this source map is associated with.\n *   - sections: A list of section definitions.\n *\n * Each value under the \"sections\" field has two fields:\n *   - offset: The offset into the original specified at which this section\n *       begins to apply, defined as an object with a \"line\" and \"column\"\n *       field.\n *   - map: A source map definition. This source map could also be indexed,\n *       but doesn't have to be.\n *\n * Instead of the \"map\" field, it's also possible to have a \"url\" field\n * specifying a URL to retrieve a source map from, but that's currently\n * unsupported.\n *\n * Here's an example source map, taken from the source map spec[0], but\n * modified to omit a section which uses the \"url\" field.\n *\n *  {\n *    version : 3,\n *    file: \"app.js\",\n *    sections: [{\n *      offset: {line:100, column:10},\n *      map: {\n *        version : 3,\n *        file: \"section.js\",\n *        sources: [\"foo.js\", \"bar.js\"],\n *        names: [\"src\", \"maps\", \"are\", \"fun\"],\n *        mappings: \"AAAA,E;;ABCDE;\"\n *      }\n *    }],\n *  }\n *\n * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit#heading=h.535es3xeprgt\n */\nfunction IndexedSourceMapConsumer(aSourceMap) {\n  var sourceMap = aSourceMap;\n  if (typeof aSourceMap === 'string') {\n    sourceMap = JSON.parse(aSourceMap.replace(/^\\)\\]\\}'/, ''));\n  }\n\n  var version = util.getArg(sourceMap, 'version');\n  var sections = util.getArg(sourceMap, 'sections');\n\n  if (version != this._version) {\n    throw new Error('Unsupported version: ' + version);\n  }\n\n  this._sources = new ArraySet();\n  this._names = new ArraySet();\n\n  var lastOffset = {\n    line: -1,\n    column: 0\n  };\n  this._sections = sections.map(function (s) {\n    if (s.url) {\n      // The url field will require support for asynchronicity.\n      // See https://github.com/mozilla/source-map/issues/16\n      throw new Error('Support for url field in sections not implemented.');\n    }\n    var offset = util.getArg(s, 'offset');\n    var offsetLine = util.getArg(offset, 'line');\n    var offsetColumn = util.getArg(offset, 'column');\n\n    if (offsetLine < lastOffset.line ||\n        (offsetLine === lastOffset.line && offsetColumn < lastOffset.column)) {\n      throw new Error('Section offsets must be ordered and non-overlapping.');\n    }\n    lastOffset = offset;\n\n    return {\n      generatedOffset: {\n        // The offset fields are 0-based, but we use 1-based indices when\n        // encoding/decoding from VLQ.\n        generatedLine: offsetLine + 1,\n        generatedColumn: offsetColumn + 1\n      },\n      consumer: new SourceMapConsumer(util.getArg(s, 'map'))\n    }\n  });\n}\n\nIndexedSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);\nIndexedSourceMapConsumer.prototype.constructor = SourceMapConsumer;\n\n/**\n * The version of the source mapping spec that we are consuming.\n */\nIndexedSourceMapConsumer.prototype._version = 3;\n\n/**\n * The list of original sources.\n */\nObject.defineProperty(IndexedSourceMapConsumer.prototype, 'sources', {\n  get: function () {\n    var sources = [];\n    for (var i = 0; i < this._sections.length; i++) {\n      for (var j = 0; j < this._sections[i].consumer.sources.length; j++) {\n        sources.push(this._sections[i].consumer.sources[j]);\n      }\n    }\n    return sources;\n  }\n});\n\n/**\n * Returns the original source, line, and column information for the generated\n * source's line and column positions provided. The only argument is an object\n * with the following properties:\n *\n *   - line: The line number in the generated source.\n *   - column: The column number in the generated source.\n *\n * and an object is returned with the following properties:\n *\n *   - source: The original source file, or null.\n *   - line: The line number in the original source, or null.\n *   - column: The column number in the original source, or null.\n *   - name: The original identifier, or null.\n */\nIndexedSourceMapConsumer.prototype.originalPositionFor =\n  function IndexedSourceMapConsumer_originalPositionFor(aArgs) {\n    var needle = {\n      generatedLine: util.getArg(aArgs, 'line'),\n      generatedColumn: util.getArg(aArgs, 'column')\n    };\n\n    // Find the section containing the generated position we're trying to map\n    // to an original position.\n    var sectionIndex = binarySearch.search(needle, this._sections,\n      function(needle, section) {\n        var cmp = needle.generatedLine - section.generatedOffset.generatedLine;\n        if (cmp) {\n          return cmp;\n        }\n\n        return (needle.generatedColumn -\n                section.generatedOffset.generatedColumn);\n      });\n    var section = this._sections[sectionIndex];\n\n    if (!section) {\n      return {\n        source: null,\n        line: null,\n        column: null,\n        name: null\n      };\n    }\n\n    return section.consumer.originalPositionFor({\n      line: needle.generatedLine -\n        (section.generatedOffset.generatedLine - 1),\n      column: needle.generatedColumn -\n        (section.generatedOffset.generatedLine === needle.generatedLine\n         ? section.generatedOffset.generatedColumn - 1\n         : 0),\n      bias: aArgs.bias\n    });\n  };\n\n/**\n * Return true if we have the source content for every source in the source\n * map, false otherwise.\n */\nIndexedSourceMapConsumer.prototype.hasContentsOfAllSources =\n  function IndexedSourceMapConsumer_hasContentsOfAllSources() {\n    return this._sections.every(function (s) {\n      return s.consumer.hasContentsOfAllSources();\n    });\n  };\n\n/**\n * Returns the original source content. The only argument is the url of the\n * original source file. Returns null if no original source content is\n * available.\n */\nIndexedSourceMapConsumer.prototype.sourceContentFor =\n  function IndexedSourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {\n    for (var i = 0; i < this._sections.length; i++) {\n      var section = this._sections[i];\n\n      var content = section.consumer.sourceContentFor(aSource, true);\n      if (content) {\n        return content;\n      }\n    }\n    if (nullOnMissing) {\n      return null;\n    }\n    else {\n      throw new Error('\"' + aSource + '\" is not in the SourceMap.');\n    }\n  };\n\n/**\n * Returns the generated line and column information for the original source,\n * line, and column positions provided. The only argument is an object with\n * the following properties:\n *\n *   - source: The filename of the original source.\n *   - line: The line number in the original source.\n *   - column: The column number in the original source.\n *\n * and an object is returned with the following properties:\n *\n *   - line: The line number in the generated source, or null.\n *   - column: The column number in the generated source, or null.\n */\nIndexedSourceMapConsumer.prototype.generatedPositionFor =\n  function IndexedSourceMapConsumer_generatedPositionFor(aArgs) {\n    for (var i = 0; i < this._sections.length; i++) {\n      var section = this._sections[i];\n\n      // Only consider this section if the requested source is in the list of\n      // sources of the consumer.\n      if (section.consumer.sources.indexOf(util.getArg(aArgs, 'source')) === -1) {\n        continue;\n      }\n      var generatedPosition = section.consumer.generatedPositionFor(aArgs);\n      if (generatedPosition) {\n        var ret = {\n          line: generatedPosition.line +\n            (section.generatedOffset.generatedLine - 1),\n          column: generatedPosition.column +\n            (section.generatedOffset.generatedLine === generatedPosition.line\n             ? section.generatedOffset.generatedColumn - 1\n             : 0)\n        };\n        return ret;\n      }\n    }\n\n    return {\n      line: null,\n      column: null\n    };\n  };\n\n/**\n * Parse the mappings in a string in to a data structure which we can easily\n * query (the ordered arrays in the `this.__generatedMappings` and\n * `this.__originalMappings` properties).\n */\nIndexedSourceMapConsumer.prototype._parseMappings =\n  function IndexedSourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n    this.__generatedMappings = [];\n    this.__originalMappings = [];\n    for (var i = 0; i < this._sections.length; i++) {\n      var section = this._sections[i];\n      var sectionMappings = section.consumer._generatedMappings;\n      for (var j = 0; j < sectionMappings.length; j++) {\n        var mapping = sectionMappings[j];\n\n        var source = section.consumer._sources.at(mapping.source);\n        if (section.consumer.sourceRoot !== null) {\n          source = util.join(section.consumer.sourceRoot, source);\n        }\n        this._sources.add(source);\n        source = this._sources.indexOf(source);\n\n        var name = section.consumer._names.at(mapping.name);\n        this._names.add(name);\n        name = this._names.indexOf(name);\n\n        // The mappings coming from the consumer for the section have\n        // generated positions relative to the start of the section, so we\n        // need to offset them to be relative to the start of the concatenated\n        // generated file.\n        var adjustedMapping = {\n          source: source,\n          generatedLine: mapping.generatedLine +\n            (section.generatedOffset.generatedLine - 1),\n          generatedColumn: mapping.generatedColumn +\n            (section.generatedOffset.generatedLine === mapping.generatedLine\n            ? section.generatedOffset.generatedColumn - 1\n            : 0),\n          originalLine: mapping.originalLine,\n          originalColumn: mapping.originalColumn,\n          name: name\n        };\n\n        this.__generatedMappings.push(adjustedMapping);\n        if (typeof adjustedMapping.originalLine === 'number') {\n          this.__originalMappings.push(adjustedMapping);\n        }\n      }\n    }\n\n    quickSort(this.__generatedMappings, util.compareByGeneratedPositionsDeflated);\n    quickSort(this.__originalMappings, util.compareByOriginalPositions);\n  };\n\nexports.IndexedSourceMapConsumer = IndexedSourceMapConsumer;\n"]},"metadata":{},"sourceType":"script"}