{"ast":null,"code":"import { getNonDeletedElements } from \"../element\";\n\nclass GlobalScene {\n  constructor(_elements = []) {\n    this._elements = _elements;\n    this.callbacks = new Set();\n  }\n\n  getElementsIncludingDeleted() {\n    return this._elements;\n  }\n\n  getElements() {\n    return getNonDeletedElements(this._elements);\n  }\n\n  replaceAllElements(nextElements) {\n    this._elements = nextElements;\n    this.informMutation();\n  }\n\n  informMutation() {\n    for (const callback of Array.from(this.callbacks)) {\n      callback();\n    }\n  }\n\n  addCallback(cb) {\n    if (this.callbacks.has(cb)) {\n      throw new Error();\n    }\n\n    this.callbacks.add(cb);\n    return () => {\n      if (!this.callbacks.has(cb)) {\n        throw new Error();\n      }\n\n      this.callbacks.delete(cb);\n    };\n  }\n\n}\n\nexport const globalSceneState = new GlobalScene();","map":{"version":3,"sources":["/home/pro/Solutions/drawboard-light/src/scene/globalScene.ts"],"names":["getNonDeletedElements","GlobalScene","constructor","_elements","callbacks","Set","getElementsIncludingDeleted","getElements","replaceAllElements","nextElements","informMutation","callback","Array","from","addCallback","cb","has","Error","add","delete","globalSceneState"],"mappings":"AAIA,SAASA,qBAAT,QAAsC,YAAtC;;AAUA,MAAMC,WAAN,CAAkB;AAGhBC,EAAAA,WAAW,CAASC,SAAuC,GAAG,EAAnD,EAAuD;AAAA,SAA9CA,SAA8C,GAA9CA,SAA8C;AAAA,SAF1DC,SAE0D,GAFrB,IAAIC,GAAJ,EAEqB;AAAE;;AAEpEC,EAAAA,2BAA2B,GAAG;AAC5B,WAAO,KAAKH,SAAZ;AACD;;AAEDI,EAAAA,WAAW,GAA2C;AACpD,WAAOP,qBAAqB,CAAC,KAAKG,SAAN,CAA5B;AACD;;AAEDK,EAAAA,kBAAkB,CAACC,YAAD,EAA6C;AAC7D,SAAKN,SAAL,GAAiBM,YAAjB;AACA,SAAKC,cAAL;AACD;;AAEDA,EAAAA,cAAc,GAAG;AACf,SAAK,MAAMC,QAAX,IAAuBC,KAAK,CAACC,IAAN,CAAW,KAAKT,SAAhB,CAAvB,EAAmD;AACjDO,MAAAA,QAAQ;AACT;AACF;;AAEDG,EAAAA,WAAW,CAACC,EAAD,EAAoD;AAC7D,QAAI,KAAKX,SAAL,CAAeY,GAAf,CAAmBD,EAAnB,CAAJ,EAA4B;AAC1B,YAAM,IAAIE,KAAJ,EAAN;AACD;;AAED,SAAKb,SAAL,CAAec,GAAf,CAAmBH,EAAnB;AAEA,WAAO,MAAM;AACX,UAAI,CAAC,KAAKX,SAAL,CAAeY,GAAf,CAAmBD,EAAnB,CAAL,EAA6B;AAC3B,cAAM,IAAIE,KAAJ,EAAN;AACD;;AACD,WAAKb,SAAL,CAAee,MAAf,CAAsBJ,EAAtB;AACD,KALD;AAMD;;AArCe;;AAwClB,OAAO,MAAMK,gBAAgB,GAAG,IAAInB,WAAJ,EAAzB","sourcesContent":["import {\n  ExcalidrawElement,\n  NonDeletedExcalidrawElement,\n} from \"../element/types\";\nimport { getNonDeletedElements } from \"../element\";\n\nexport interface SceneStateCallback {\n  (): void;\n}\n\nexport interface SceneStateCallbackRemover {\n  (): void;\n}\n\nclass GlobalScene {\n  private callbacks: Set<SceneStateCallback> = new Set();\n\n  constructor(private _elements: readonly ExcalidrawElement[] = []) {}\n\n  getElementsIncludingDeleted() {\n    return this._elements;\n  }\n\n  getElements(): readonly NonDeletedExcalidrawElement[] {\n    return getNonDeletedElements(this._elements);\n  }\n\n  replaceAllElements(nextElements: readonly ExcalidrawElement[]) {\n    this._elements = nextElements;\n    this.informMutation();\n  }\n\n  informMutation() {\n    for (const callback of Array.from(this.callbacks)) {\n      callback();\n    }\n  }\n\n  addCallback(cb: SceneStateCallback): SceneStateCallbackRemover {\n    if (this.callbacks.has(cb)) {\n      throw new Error();\n    }\n\n    this.callbacks.add(cb);\n\n    return () => {\n      if (!this.callbacks.has(cb)) {\n        throw new Error();\n      }\n      this.callbacks.delete(cb);\n    };\n  }\n}\n\nexport const globalSceneState = new GlobalScene();\n"]},"metadata":{},"sourceType":"module"}