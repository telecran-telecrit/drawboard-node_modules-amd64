{"ast":null,"code":"import { getElementAbsoluteCoords, getElementBounds } from \"../element\";\nimport { newElementWith } from \"../element/mutateElement\";\nexport function getElementsWithinSelection(elements, selection) {\n  const [selectionX1, selectionY1, selectionX2, selectionY2] = getElementAbsoluteCoords(selection);\n  return elements.filter(element => {\n    const [elementX1, elementY1, elementX2, elementY2] = getElementBounds(element);\n    return element.type !== \"selection\" && selectionX1 <= elementX1 && selectionY1 <= elementY1 && selectionX2 >= elementX2 && selectionY2 >= elementY2;\n  });\n}\nexport function deleteSelectedElements(elements, appState) {\n  return {\n    elements: elements.map(el => {\n      if (appState.selectedElementIds[el.id]) {\n        return newElementWith(el, {\n          isDeleted: true\n        });\n      }\n\n      return el;\n    }),\n    appState: { ...appState,\n      selectedElementIds: {}\n    }\n  };\n}\nexport function isSomeElementSelected(elements, appState) {\n  return elements.some(element => appState.selectedElementIds[element.id]);\n}\n/**\n * Returns common attribute (picked by `getAttribute` callback) of selected\n *  elements. If elements don't share the same value, returns `null`.\n */\n\nexport function getCommonAttributeOfSelectedElements(elements, appState, getAttribute) {\n  const attributes = Array.from(new Set(getSelectedElements(elements, appState).map(element => getAttribute(element))));\n  return attributes.length === 1 ? attributes[0] : null;\n}\nexport function getSelectedElements(elements, appState) {\n  return elements.filter(element => appState.selectedElementIds[element.id]);\n}\nexport function getTargetElement(elements, appState) {\n  return appState.editingElement ? [appState.editingElement] : getSelectedElements(elements, appState);\n}","map":{"version":3,"sources":["/home/pro/Solutions/drawboard-light/src/scene/selection.ts"],"names":["getElementAbsoluteCoords","getElementBounds","newElementWith","getElementsWithinSelection","elements","selection","selectionX1","selectionY1","selectionX2","selectionY2","filter","element","elementX1","elementY1","elementX2","elementY2","type","deleteSelectedElements","appState","map","el","selectedElementIds","id","isDeleted","isSomeElementSelected","some","getCommonAttributeOfSelectedElements","getAttribute","attributes","Array","from","Set","getSelectedElements","length","getTargetElement","editingElement"],"mappings":"AAIA,SAASA,wBAAT,EAAmCC,gBAAnC,QAA2D,YAA3D;AAEA,SAASC,cAAT,QAA+B,0BAA/B;AAEA,OAAO,SAASC,0BAAT,CACLC,QADK,EAELC,SAFK,EAGL;AACA,QAAM,CACJC,WADI,EAEJC,WAFI,EAGJC,WAHI,EAIJC,WAJI,IAKFT,wBAAwB,CAACK,SAAD,CAL5B;AAMA,SAAOD,QAAQ,CAACM,MAAT,CAAiBC,OAAD,IAAa;AAClC,UAAM,CAACC,SAAD,EAAYC,SAAZ,EAAuBC,SAAvB,EAAkCC,SAAlC,IAA+Cd,gBAAgB,CACnEU,OADmE,CAArE;AAIA,WACEA,OAAO,CAACK,IAAR,KAAiB,WAAjB,IACAV,WAAW,IAAIM,SADf,IAEAL,WAAW,IAAIM,SAFf,IAGAL,WAAW,IAAIM,SAHf,IAIAL,WAAW,IAAIM,SALjB;AAOD,GAZM,CAAP;AAaD;AAED,OAAO,SAASE,sBAAT,CACLb,QADK,EAELc,QAFK,EAGL;AACA,SAAO;AACLd,IAAAA,QAAQ,EAAEA,QAAQ,CAACe,GAAT,CAAcC,EAAD,IAAQ;AAC7B,UAAIF,QAAQ,CAACG,kBAAT,CAA4BD,EAAE,CAACE,EAA/B,CAAJ,EAAwC;AACtC,eAAOpB,cAAc,CAACkB,EAAD,EAAK;AAAEG,UAAAA,SAAS,EAAE;AAAb,SAAL,CAArB;AACD;;AACD,aAAOH,EAAP;AACD,KALS,CADL;AAOLF,IAAAA,QAAQ,EAAE,EACR,GAAGA,QADK;AAERG,MAAAA,kBAAkB,EAAE;AAFZ;AAPL,GAAP;AAYD;AAED,OAAO,SAASG,qBAAT,CACLpB,QADK,EAELc,QAFK,EAGI;AACT,SAAOd,QAAQ,CAACqB,IAAT,CAAed,OAAD,IAAaO,QAAQ,CAACG,kBAAT,CAA4BV,OAAO,CAACW,EAApC,CAA3B,CAAP;AACD;AAED;;;;;AAIA,OAAO,SAASI,oCAAT,CACLtB,QADK,EAELc,QAFK,EAGLS,YAHK,EAIK;AACV,QAAMC,UAAU,GAAGC,KAAK,CAACC,IAAN,CACjB,IAAIC,GAAJ,CACEC,mBAAmB,CAAC5B,QAAD,EAAWc,QAAX,CAAnB,CAAwCC,GAAxC,CAA6CR,OAAD,IAC1CgB,YAAY,CAAChB,OAAD,CADd,CADF,CADiB,CAAnB;AAOA,SAAOiB,UAAU,CAACK,MAAX,KAAsB,CAAtB,GAA0BL,UAAU,CAAC,CAAD,CAApC,GAA0C,IAAjD;AACD;AAED,OAAO,SAASI,mBAAT,CACL5B,QADK,EAELc,QAFK,EAGL;AACA,SAAOd,QAAQ,CAACM,MAAT,CAAiBC,OAAD,IAAaO,QAAQ,CAACG,kBAAT,CAA4BV,OAAO,CAACW,EAApC,CAA7B,CAAP;AACD;AAED,OAAO,SAASY,gBAAT,CACL9B,QADK,EAELc,QAFK,EAGL;AACA,SAAOA,QAAQ,CAACiB,cAAT,GACH,CAACjB,QAAQ,CAACiB,cAAV,CADG,GAEHH,mBAAmB,CAAC5B,QAAD,EAAWc,QAAX,CAFvB;AAGD","sourcesContent":["import {\n  ExcalidrawElement,\n  NonDeletedExcalidrawElement,\n} from \"../element/types\";\nimport { getElementAbsoluteCoords, getElementBounds } from \"../element\";\nimport { AppState } from \"../types\";\nimport { newElementWith } from \"../element/mutateElement\";\n\nexport function getElementsWithinSelection(\n  elements: readonly NonDeletedExcalidrawElement[],\n  selection: NonDeletedExcalidrawElement,\n) {\n  const [\n    selectionX1,\n    selectionY1,\n    selectionX2,\n    selectionY2,\n  ] = getElementAbsoluteCoords(selection);\n  return elements.filter((element) => {\n    const [elementX1, elementY1, elementX2, elementY2] = getElementBounds(\n      element,\n    );\n\n    return (\n      element.type !== \"selection\" &&\n      selectionX1 <= elementX1 &&\n      selectionY1 <= elementY1 &&\n      selectionX2 >= elementX2 &&\n      selectionY2 >= elementY2\n    );\n  });\n}\n\nexport function deleteSelectedElements(\n  elements: readonly ExcalidrawElement[],\n  appState: AppState,\n) {\n  return {\n    elements: elements.map((el) => {\n      if (appState.selectedElementIds[el.id]) {\n        return newElementWith(el, { isDeleted: true });\n      }\n      return el;\n    }),\n    appState: {\n      ...appState,\n      selectedElementIds: {},\n    },\n  };\n}\n\nexport function isSomeElementSelected(\n  elements: readonly NonDeletedExcalidrawElement[],\n  appState: AppState,\n): boolean {\n  return elements.some((element) => appState.selectedElementIds[element.id]);\n}\n\n/**\n * Returns common attribute (picked by `getAttribute` callback) of selected\n *  elements. If elements don't share the same value, returns `null`.\n */\nexport function getCommonAttributeOfSelectedElements<T>(\n  elements: readonly NonDeletedExcalidrawElement[],\n  appState: AppState,\n  getAttribute: (element: ExcalidrawElement) => T,\n): T | null {\n  const attributes = Array.from(\n    new Set(\n      getSelectedElements(elements, appState).map((element) =>\n        getAttribute(element),\n      ),\n    ),\n  );\n  return attributes.length === 1 ? attributes[0] : null;\n}\n\nexport function getSelectedElements(\n  elements: readonly NonDeletedExcalidrawElement[],\n  appState: AppState,\n) {\n  return elements.filter((element) => appState.selectedElementIds[element.id]);\n}\n\nexport function getTargetElement(\n  elements: readonly NonDeletedExcalidrawElement[],\n  appState: AppState,\n) {\n  return appState.editingElement\n    ? [appState.editingElement]\n    : getSelectedElements(elements, appState);\n}\n"]},"metadata":{},"sourceType":"module"}