{"ast":null,"code":"import { Severity } from '@sentry/types';\nimport { fill, getGlobalObject, safeJoin } from '@sentry/utils';\nvar global = getGlobalObject();\n/** Send Console API calls as Sentry Events */\n\nvar CaptureConsole =\n/** @class */\nfunction () {\n  /**\n   * @inheritDoc\n   */\n  function CaptureConsole(options) {\n    if (options === void 0) {\n      options = {};\n    }\n    /**\n     * @inheritDoc\n     */\n\n\n    this.name = CaptureConsole.id;\n    /**\n     * @inheritDoc\n     */\n\n    this._levels = ['log', 'info', 'warn', 'error', 'debug', 'assert'];\n\n    if (options.levels) {\n      this._levels = options.levels;\n    }\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  CaptureConsole.prototype.setupOnce = function (_, getCurrentHub) {\n    if (!('console' in global)) {\n      return;\n    }\n\n    this._levels.forEach(function (level) {\n      if (!(level in global.console)) {\n        return;\n      }\n\n      fill(global.console, level, function (originalConsoleLevel) {\n        return function () {\n          var args = [];\n\n          for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n          }\n\n          var hub = getCurrentHub();\n\n          if (hub.getIntegration(CaptureConsole)) {\n            hub.withScope(function (scope) {\n              scope.setLevel(Severity.fromString(level));\n              scope.setExtra('arguments', args);\n              scope.addEventProcessor(function (event) {\n                event.logger = 'console';\n                return event;\n              });\n              var message = safeJoin(args, ' ');\n\n              if (level === 'assert') {\n                if (args[0] === false) {\n                  message = \"Assertion failed: \" + (safeJoin(args.slice(1), ' ') || 'console.assert');\n                  scope.setExtra('arguments', args.slice(1));\n                  hub.captureMessage(message);\n                }\n              } else {\n                hub.captureMessage(message);\n              }\n            });\n          } // this fails for some browsers. :(\n\n\n          if (originalConsoleLevel) {\n            Function.prototype.apply.call(originalConsoleLevel, global.console, args);\n          }\n        };\n      });\n    });\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  CaptureConsole.id = 'CaptureConsole';\n  return CaptureConsole;\n}();\n\nexport { CaptureConsole };","map":{"version":3,"sources":["../src/captureconsole.ts"],"names":[],"mappings":"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","sourcesContent":["import { EventProcessor, Hub, Integration, Severity } from '@sentry/types';\nimport { fill, getGlobalObject, safeJoin } from '@sentry/utils';\n\nconst global = getGlobalObject<Window | NodeJS.Global>();\n\n/** Send Console API calls as Sentry Events */\nexport class CaptureConsole implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public name: string = CaptureConsole.id;\n\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'CaptureConsole';\n\n  /**\n   * @inheritDoc\n   */\n  private readonly _levels: string[] = ['log', 'info', 'warn', 'error', 'debug', 'assert'];\n\n  /**\n   * @inheritDoc\n   */\n  public constructor(options: { levels?: string[] } = {}) {\n    if (options.levels) {\n      this._levels = options.levels;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(_: (callback: EventProcessor) => void, getCurrentHub: () => Hub): void {\n    if (!('console' in global)) {\n      return;\n    }\n\n    this._levels.forEach((level: string) => {\n      if (!(level in global.console)) {\n        return;\n      }\n\n      fill(global.console, level, (originalConsoleLevel: () => any) => (...args: any[]) => {\n        const hub = getCurrentHub();\n\n        if (hub.getIntegration(CaptureConsole)) {\n          hub.withScope(scope => {\n            scope.setLevel(Severity.fromString(level));\n            scope.setExtra('arguments', args);\n            scope.addEventProcessor(event => {\n              event.logger = 'console';\n              return event;\n            });\n\n            let message = safeJoin(args, ' ');\n            if (level === 'assert') {\n              if (args[0] === false) {\n                message = `Assertion failed: ${safeJoin(args.slice(1), ' ') || 'console.assert'}`;\n                scope.setExtra('arguments', args.slice(1));\n                hub.captureMessage(message);\n              }\n            } else {\n              hub.captureMessage(message);\n            }\n          });\n        }\n\n        // this fails for some browsers. :(\n        if (originalConsoleLevel) {\n          Function.prototype.apply.call(originalConsoleLevel, global.console, args);\n        }\n      });\n    });\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}