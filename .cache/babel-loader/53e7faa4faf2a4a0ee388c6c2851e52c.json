{"ast":null,"code":"var _jsxFileName = \"/home/pro/Solutions/drawboard-light/src/actions/actionProperties.tsx\";\nimport React from \"react\";\nimport { getCommonAttributeOfSelectedElements, isSomeElementSelected } from \"../scene\";\nimport { ButtonSelect } from \"../components/ButtonSelect\";\nimport { isTextElement, redrawTextBoundingBox, getNonDeletedElements } from \"../element\";\nimport { ColorPicker } from \"../components/ColorPicker\";\nimport { t } from \"../i18n\";\nimport { DEFAULT_FONT } from \"../appState\";\nimport { register } from \"./register\";\nimport { newElementWith } from \"../element/mutateElement\";\n\nconst changeProperty = (elements, appState, callback) => {\n  return elements.map(element => {\n    var _appState$editingElem;\n\n    if (appState.selectedElementIds[element.id] || element.id === ((_appState$editingElem = appState.editingElement) === null || _appState$editingElem === void 0 ? void 0 : _appState$editingElem.id)) {\n      return callback(element);\n    }\n\n    return element;\n  });\n};\n\nconst getFormValue = function (elements, appState, getAttribute, defaultValue) {\n  var _ref, _ref2;\n\n  const editingElement = appState.editingElement;\n  const nonDeletedElements = getNonDeletedElements(elements);\n  return (_ref = (_ref2 = editingElement && getAttribute(editingElement)) !== null && _ref2 !== void 0 ? _ref2 : isSomeElementSelected(nonDeletedElements, appState) ? getCommonAttributeOfSelectedElements(nonDeletedElements, appState, getAttribute) : defaultValue) !== null && _ref !== void 0 ? _ref : null;\n};\n\nexport const actionChangeStrokeColor = register({\n  name: \"changeStrokeColor\",\n  perform: (elements, appState, value) => {\n    return {\n      elements: changeProperty(elements, appState, el => newElementWith(el, {\n        strokeColor: value\n      })),\n      appState: { ...appState,\n        currentItemStrokeColor: value\n      },\n      commitToHistory: true\n    };\n  },\n  PanelComponent: ({\n    elements,\n    appState,\n    updateData\n  }) => /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h3\", {\n    \"aria-hidden\": \"true\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }\n  }, t(\"labels.stroke\")), /*#__PURE__*/React.createElement(ColorPicker, {\n    type: \"elementStroke\",\n    label: t(\"labels.stroke\"),\n    color: getFormValue(elements, appState, element => element.strokeColor, appState.currentItemStrokeColor),\n    onChange: updateData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }\n  }))\n});\nexport const actionChangeBackgroundColor = register({\n  name: \"changeBackgroundColor\",\n  perform: (elements, appState, value) => {\n    return {\n      elements: changeProperty(elements, appState, el => newElementWith(el, {\n        backgroundColor: value\n      })),\n      appState: { ...appState,\n        currentItemBackgroundColor: value\n      },\n      commitToHistory: true\n    };\n  },\n  PanelComponent: ({\n    elements,\n    appState,\n    updateData\n  }) => /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h3\", {\n    \"aria-hidden\": \"true\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }\n  }, t(\"labels.background\")), /*#__PURE__*/React.createElement(ColorPicker, {\n    type: \"elementBackground\",\n    label: t(\"labels.background\"),\n    color: getFormValue(elements, appState, element => element.backgroundColor, appState.currentItemBackgroundColor),\n    onChange: updateData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }\n  }))\n});\nexport const actionChangeFillStyle = register({\n  name: \"changeFillStyle\",\n  perform: (elements, appState, value) => {\n    return {\n      elements: changeProperty(elements, appState, el => newElementWith(el, {\n        fillStyle: value\n      })),\n      appState: { ...appState,\n        currentItemFillStyle: value\n      },\n      commitToHistory: true\n    };\n  },\n  PanelComponent: ({\n    elements,\n    appState,\n    updateData\n  }) => /*#__PURE__*/React.createElement(\"fieldset\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"legend\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }\n  }, t(\"labels.fill\")), /*#__PURE__*/React.createElement(ButtonSelect, {\n    options: [{\n      value: \"hachure\",\n      text: t(\"labels.hachure\")\n    }, {\n      value: \"cross-hatch\",\n      text: t(\"labels.crossHatch\")\n    }, {\n      value: \"solid\",\n      text: t(\"labels.solid\")\n    }],\n    group: \"fill\",\n    value: getFormValue(elements, appState, element => element.fillStyle, appState.currentItemFillStyle),\n    onChange: value => {\n      updateData(value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }\n  }))\n});\nexport const actionChangeStrokeWidth = register({\n  name: \"changeStrokeWidth\",\n  perform: (elements, appState, value) => {\n    return {\n      elements: changeProperty(elements, appState, el => newElementWith(el, {\n        strokeWidth: value\n      })),\n      appState: { ...appState,\n        currentItemStrokeWidth: value\n      },\n      commitToHistory: true\n    };\n  },\n  PanelComponent: ({\n    elements,\n    appState,\n    updateData\n  }) => /*#__PURE__*/React.createElement(\"fieldset\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"legend\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 7\n    }\n  }, t(\"labels.strokeWidth\")), /*#__PURE__*/React.createElement(ButtonSelect, {\n    group: \"stroke-width\",\n    options: [{\n      value: 1,\n      text: t(\"labels.thin\")\n    }, {\n      value: 2,\n      text: t(\"labels.bold\")\n    }, {\n      value: 4,\n      text: t(\"labels.extraBold\")\n    }],\n    value: getFormValue(elements, appState, element => element.strokeWidth, appState.currentItemStrokeWidth),\n    onChange: value => updateData(value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 7\n    }\n  }))\n});\nexport const actionChangeSloppiness = register({\n  name: \"changeSloppiness\",\n  perform: (elements, appState, value) => {\n    return {\n      elements: changeProperty(elements, appState, el => newElementWith(el, {\n        roughness: value\n      })),\n      appState: { ...appState,\n        currentItemRoughness: value\n      },\n      commitToHistory: true\n    };\n  },\n  PanelComponent: ({\n    elements,\n    appState,\n    updateData\n  }) => /*#__PURE__*/React.createElement(\"fieldset\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"legend\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 7\n    }\n  }, t(\"labels.sloppiness\")), /*#__PURE__*/React.createElement(ButtonSelect, {\n    group: \"sloppiness\",\n    options: [{\n      value: 0,\n      text: t(\"labels.architect\")\n    }, {\n      value: 1,\n      text: t(\"labels.artist\")\n    }, {\n      value: 2,\n      text: t(\"labels.cartoonist\")\n    }],\n    value: getFormValue(elements, appState, element => element.roughness, appState.currentItemRoughness),\n    onChange: value => updateData(value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 7\n    }\n  }))\n});\nexport const actionChangeOpacity = register({\n  name: \"changeOpacity\",\n  perform: (elements, appState, value) => {\n    return {\n      elements: changeProperty(elements, appState, el => newElementWith(el, {\n        opacity: value\n      })),\n      appState: { ...appState,\n        currentItemOpacity: value\n      },\n      commitToHistory: true\n    };\n  },\n  PanelComponent: ({\n    elements,\n    appState,\n    updateData\n  }) => {\n    var _getFormValue;\n\n    return /*#__PURE__*/React.createElement(\"label\", {\n      className: \"control-label\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 5\n      }\n    }, t(\"labels.opacity\"), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"range\",\n      min: \"0\",\n      max: \"100\",\n      step: \"10\",\n      onChange: event => updateData(+event.target.value),\n      onWheel: event => {\n        event.stopPropagation();\n        const target = event.target;\n        const STEP = 10;\n        const MAX = 100;\n        const MIN = 0;\n        const value = +target.value;\n\n        if (event.deltaY < 0 && value < MAX) {\n          updateData(value + STEP);\n        } else if (event.deltaY > 0 && value > MIN) {\n          updateData(value - STEP);\n        }\n      },\n      value: (_getFormValue = getFormValue(elements, appState, element => element.opacity, appState.currentItemOpacity)) !== null && _getFormValue !== void 0 ? _getFormValue : undefined,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 7\n      }\n    }));\n  }\n});\nexport const actionChangeFontSize = register({\n  name: \"changeFontSize\",\n  perform: (elements, appState, value) => {\n    return {\n      elements: changeProperty(elements, appState, el => {\n        if (isTextElement(el)) {\n          const element = newElementWith(el, {\n            font: `${value}px ${el.font.split(\"px \")[1]}`\n          });\n          redrawTextBoundingBox(element);\n          return element;\n        }\n\n        return el;\n      }),\n      appState: { ...appState,\n        currentItemFont: `${value}px ${appState.currentItemFont.split(\"px \")[1]}`\n      },\n      commitToHistory: true\n    };\n  },\n  PanelComponent: ({\n    elements,\n    appState,\n    updateData\n  }) => /*#__PURE__*/React.createElement(\"fieldset\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 304,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"legend\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 305,\n      columnNumber: 7\n    }\n  }, t(\"labels.fontSize\")), /*#__PURE__*/React.createElement(ButtonSelect, {\n    group: \"font-size\",\n    options: [{\n      value: 16,\n      text: t(\"labels.small\")\n    }, {\n      value: 20,\n      text: t(\"labels.medium\")\n    }, {\n      value: 28,\n      text: t(\"labels.large\")\n    }, {\n      value: 36,\n      text: t(\"labels.veryLarge\")\n    }],\n    value: getFormValue(elements, appState, element => isTextElement(element) && +element.font.split(\"px \")[0], +(appState.currentItemFont || DEFAULT_FONT).split(\"px \")[0]),\n    onChange: value => updateData(value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 306,\n      columnNumber: 7\n    }\n  }))\n});\nexport const actionChangeFontFamily = register({\n  name: \"changeFontFamily\",\n  perform: (elements, appState, value) => {\n    return {\n      elements: changeProperty(elements, appState, el => {\n        if (isTextElement(el)) {\n          const element = newElementWith(el, {\n            font: `${el.font.split(\"px \")[0]}px ${value}`\n          });\n          redrawTextBoundingBox(element);\n          return element;\n        }\n\n        return el;\n      }),\n      appState: { ...appState,\n        currentItemFont: `${appState.currentItemFont.split(\"px \")[0]}px ${value}`\n      },\n      commitToHistory: true\n    };\n  },\n  PanelComponent: ({\n    elements,\n    appState,\n    updateData\n  }) => /*#__PURE__*/React.createElement(\"fieldset\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 351,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"legend\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 352,\n      columnNumber: 7\n    }\n  }, t(\"labels.fontFamily\")), /*#__PURE__*/React.createElement(ButtonSelect, {\n    group: \"font-family\",\n    options: [{\n      value: \"Virgil\",\n      text: t(\"labels.handDrawn\")\n    }, {\n      value: \"Helvetica\",\n      text: t(\"labels.normal\")\n    }, {\n      value: \"Cascadia\",\n      text: t(\"labels.code\")\n    }],\n    value: getFormValue(elements, appState, element => isTextElement(element) && element.font.split(\"px \")[1], (appState.currentItemFont || DEFAULT_FONT).split(\"px \")[1]),\n    onChange: value => updateData(value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 353,\n      columnNumber: 7\n    }\n  }))\n});\nexport const actionChangeTextAlign = register({\n  name: \"changeTextAlign\",\n  perform: (elements, appState, value) => {\n    return {\n      elements: changeProperty(elements, appState, el => {\n        if (isTextElement(el)) {\n          const element = newElementWith(el, {\n            textAlign: value\n          });\n          redrawTextBoundingBox(element);\n          return element;\n        }\n\n        return el;\n      }),\n      appState: { ...appState,\n        currentItemTextAlign: value\n      },\n      commitToHistory: true\n    };\n  },\n  PanelComponent: ({\n    elements,\n    appState,\n    updateData\n  }) => /*#__PURE__*/React.createElement(\"fieldset\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 395,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"legend\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 396,\n      columnNumber: 7\n    }\n  }, t(\"labels.textAlign\")), /*#__PURE__*/React.createElement(ButtonSelect, {\n    group: \"text-align\",\n    options: [{\n      value: \"left\",\n      text: t(\"labels.left\")\n    }, {\n      value: \"center\",\n      text: t(\"labels.center\")\n    }, {\n      value: \"right\",\n      text: t(\"labels.right\")\n    }],\n    value: getFormValue(elements, appState, element => isTextElement(element) && element.textAlign, appState.currentItemTextAlign),\n    onChange: value => updateData(value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 397,\n      columnNumber: 7\n    }\n  }))\n});","map":{"version":3,"sources":["/home/pro/Solutions/drawboard-light/src/actions/actionProperties.tsx"],"names":["React","getCommonAttributeOfSelectedElements","isSomeElementSelected","ButtonSelect","isTextElement","redrawTextBoundingBox","getNonDeletedElements","ColorPicker","t","DEFAULT_FONT","register","newElementWith","changeProperty","elements","appState","callback","map","element","selectedElementIds","id","editingElement","getFormValue","getAttribute","defaultValue","nonDeletedElements","actionChangeStrokeColor","name","perform","value","el","strokeColor","currentItemStrokeColor","commitToHistory","PanelComponent","updateData","actionChangeBackgroundColor","backgroundColor","currentItemBackgroundColor","actionChangeFillStyle","fillStyle","currentItemFillStyle","text","actionChangeStrokeWidth","strokeWidth","currentItemStrokeWidth","actionChangeSloppiness","roughness","currentItemRoughness","actionChangeOpacity","opacity","currentItemOpacity","event","target","stopPropagation","STEP","MAX","MIN","deltaY","undefined","actionChangeFontSize","font","split","currentItemFont","actionChangeFontFamily","actionChangeTextAlign","textAlign","currentItemTextAlign"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {\n  ExcalidrawElement,\n  ExcalidrawTextElement,\n  TextAlign,\n} from \"../element/types\";\nimport {\n  getCommonAttributeOfSelectedElements,\n  isSomeElementSelected,\n} from \"../scene\";\nimport { ButtonSelect } from \"../components/ButtonSelect\";\nimport {\n  isTextElement,\n  redrawTextBoundingBox,\n  getNonDeletedElements,\n} from \"../element\";\nimport { ColorPicker } from \"../components/ColorPicker\";\nimport { AppState } from \"../../src/types\";\nimport { t } from \"../i18n\";\nimport { DEFAULT_FONT } from \"../appState\";\nimport { register } from \"./register\";\nimport { newElementWith } from \"../element/mutateElement\";\n\nconst changeProperty = (\n  elements: readonly ExcalidrawElement[],\n  appState: AppState,\n  callback: (element: ExcalidrawElement) => ExcalidrawElement,\n) => {\n  return elements.map((element) => {\n    if (\n      appState.selectedElementIds[element.id] ||\n      element.id === appState.editingElement?.id\n    ) {\n      return callback(element);\n    }\n    return element;\n  });\n};\n\nconst getFormValue = function <T>(\n  elements: readonly ExcalidrawElement[],\n  appState: AppState,\n  getAttribute: (element: ExcalidrawElement) => T,\n  defaultValue?: T,\n): T | null {\n  const editingElement = appState.editingElement;\n  const nonDeletedElements = getNonDeletedElements(elements);\n  return (\n    (editingElement && getAttribute(editingElement)) ??\n    (isSomeElementSelected(nonDeletedElements, appState)\n      ? getCommonAttributeOfSelectedElements(\n          nonDeletedElements,\n          appState,\n          getAttribute,\n        )\n      : defaultValue) ??\n    null\n  );\n};\n\nexport const actionChangeStrokeColor = register({\n  name: \"changeStrokeColor\",\n  perform: (elements, appState, value) => {\n    return {\n      elements: changeProperty(elements, appState, (el) =>\n        newElementWith(el, {\n          strokeColor: value,\n        }),\n      ),\n      appState: { ...appState, currentItemStrokeColor: value },\n      commitToHistory: true,\n    };\n  },\n  PanelComponent: ({ elements, appState, updateData }) => (\n    <>\n      <h3 aria-hidden=\"true\">{t(\"labels.stroke\")}</h3>\n      <ColorPicker\n        type=\"elementStroke\"\n        label={t(\"labels.stroke\")}\n        color={getFormValue(\n          elements,\n          appState,\n          (element) => element.strokeColor,\n          appState.currentItemStrokeColor,\n        )}\n        onChange={updateData}\n      />\n    </>\n  ),\n});\n\nexport const actionChangeBackgroundColor = register({\n  name: \"changeBackgroundColor\",\n  perform: (elements, appState, value) => {\n    return {\n      elements: changeProperty(elements, appState, (el) =>\n        newElementWith(el, {\n          backgroundColor: value,\n        }),\n      ),\n      appState: { ...appState, currentItemBackgroundColor: value },\n      commitToHistory: true,\n    };\n  },\n  PanelComponent: ({ elements, appState, updateData }) => (\n    <>\n      <h3 aria-hidden=\"true\">{t(\"labels.background\")}</h3>\n      <ColorPicker\n        type=\"elementBackground\"\n        label={t(\"labels.background\")}\n        color={getFormValue(\n          elements,\n          appState,\n          (element) => element.backgroundColor,\n          appState.currentItemBackgroundColor,\n        )}\n        onChange={updateData}\n      />\n    </>\n  ),\n});\n\nexport const actionChangeFillStyle = register({\n  name: \"changeFillStyle\",\n  perform: (elements, appState, value) => {\n    return {\n      elements: changeProperty(elements, appState, (el) =>\n        newElementWith(el, {\n          fillStyle: value,\n        }),\n      ),\n      appState: { ...appState, currentItemFillStyle: value },\n      commitToHistory: true,\n    };\n  },\n  PanelComponent: ({ elements, appState, updateData }) => (\n    <fieldset>\n      <legend>{t(\"labels.fill\")}</legend>\n      <ButtonSelect\n        options={[\n          { value: \"hachure\", text: t(\"labels.hachure\") },\n          { value: \"cross-hatch\", text: t(\"labels.crossHatch\") },\n          { value: \"solid\", text: t(\"labels.solid\") },\n        ]}\n        group=\"fill\"\n        value={getFormValue(\n          elements,\n          appState,\n          (element) => element.fillStyle,\n          appState.currentItemFillStyle,\n        )}\n        onChange={(value) => {\n          updateData(value);\n        }}\n      />\n    </fieldset>\n  ),\n});\n\nexport const actionChangeStrokeWidth = register({\n  name: \"changeStrokeWidth\",\n  perform: (elements, appState, value) => {\n    return {\n      elements: changeProperty(elements, appState, (el) =>\n        newElementWith(el, {\n          strokeWidth: value,\n        }),\n      ),\n      appState: { ...appState, currentItemStrokeWidth: value },\n      commitToHistory: true,\n    };\n  },\n  PanelComponent: ({ elements, appState, updateData }) => (\n    <fieldset>\n      <legend>{t(\"labels.strokeWidth\")}</legend>\n      <ButtonSelect\n        group=\"stroke-width\"\n        options={[\n          { value: 1, text: t(\"labels.thin\") },\n          { value: 2, text: t(\"labels.bold\") },\n          { value: 4, text: t(\"labels.extraBold\") },\n        ]}\n        value={getFormValue(\n          elements,\n          appState,\n          (element) => element.strokeWidth,\n          appState.currentItemStrokeWidth,\n        )}\n        onChange={(value) => updateData(value)}\n      />\n    </fieldset>\n  ),\n});\n\nexport const actionChangeSloppiness = register({\n  name: \"changeSloppiness\",\n  perform: (elements, appState, value) => {\n    return {\n      elements: changeProperty(elements, appState, (el) =>\n        newElementWith(el, {\n          roughness: value,\n        }),\n      ),\n      appState: { ...appState, currentItemRoughness: value },\n      commitToHistory: true,\n    };\n  },\n  PanelComponent: ({ elements, appState, updateData }) => (\n    <fieldset>\n      <legend>{t(\"labels.sloppiness\")}</legend>\n      <ButtonSelect\n        group=\"sloppiness\"\n        options={[\n          { value: 0, text: t(\"labels.architect\") },\n          { value: 1, text: t(\"labels.artist\") },\n          { value: 2, text: t(\"labels.cartoonist\") },\n        ]}\n        value={getFormValue(\n          elements,\n          appState,\n          (element) => element.roughness,\n          appState.currentItemRoughness,\n        )}\n        onChange={(value) => updateData(value)}\n      />\n    </fieldset>\n  ),\n});\n\nexport const actionChangeOpacity = register({\n  name: \"changeOpacity\",\n  perform: (elements, appState, value) => {\n    return {\n      elements: changeProperty(elements, appState, (el) =>\n        newElementWith(el, {\n          opacity: value,\n        }),\n      ),\n      appState: { ...appState, currentItemOpacity: value },\n      commitToHistory: true,\n    };\n  },\n  PanelComponent: ({ elements, appState, updateData }) => (\n    <label className=\"control-label\">\n      {t(\"labels.opacity\")}\n      <input\n        type=\"range\"\n        min=\"0\"\n        max=\"100\"\n        step=\"10\"\n        onChange={(event) => updateData(+event.target.value)}\n        onWheel={(event) => {\n          event.stopPropagation();\n          const target = event.target as HTMLInputElement;\n          const STEP = 10;\n          const MAX = 100;\n          const MIN = 0;\n          const value = +target.value;\n\n          if (event.deltaY < 0 && value < MAX) {\n            updateData(value + STEP);\n          } else if (event.deltaY > 0 && value > MIN) {\n            updateData(value - STEP);\n          }\n        }}\n        value={\n          getFormValue(\n            elements,\n            appState,\n            (element) => element.opacity,\n            appState.currentItemOpacity,\n          ) ?? undefined\n        }\n      />\n    </label>\n  ),\n});\n\nexport const actionChangeFontSize = register({\n  name: \"changeFontSize\",\n  perform: (elements, appState, value) => {\n    return {\n      elements: changeProperty(elements, appState, (el) => {\n        if (isTextElement(el)) {\n          const element: ExcalidrawTextElement = newElementWith(el, {\n            font: `${value}px ${el.font.split(\"px \")[1]}`,\n          });\n          redrawTextBoundingBox(element);\n          return element;\n        }\n\n        return el;\n      }),\n      appState: {\n        ...appState,\n        currentItemFont: `${value}px ${\n          appState.currentItemFont.split(\"px \")[1]\n        }`,\n      },\n      commitToHistory: true,\n    };\n  },\n  PanelComponent: ({ elements, appState, updateData }) => (\n    <fieldset>\n      <legend>{t(\"labels.fontSize\")}</legend>\n      <ButtonSelect\n        group=\"font-size\"\n        options={[\n          { value: 16, text: t(\"labels.small\") },\n          { value: 20, text: t(\"labels.medium\") },\n          { value: 28, text: t(\"labels.large\") },\n          { value: 36, text: t(\"labels.veryLarge\") },\n        ]}\n        value={getFormValue(\n          elements,\n          appState,\n          (element) => isTextElement(element) && +element.font.split(\"px \")[0],\n          +(appState.currentItemFont || DEFAULT_FONT).split(\"px \")[0],\n        )}\n        onChange={(value) => updateData(value)}\n      />\n    </fieldset>\n  ),\n});\n\nexport const actionChangeFontFamily = register({\n  name: \"changeFontFamily\",\n  perform: (elements, appState, value) => {\n    return {\n      elements: changeProperty(elements, appState, (el) => {\n        if (isTextElement(el)) {\n          const element: ExcalidrawTextElement = newElementWith(el, {\n            font: `${el.font.split(\"px \")[0]}px ${value}`,\n          });\n          redrawTextBoundingBox(element);\n          return element;\n        }\n\n        return el;\n      }),\n      appState: {\n        ...appState,\n        currentItemFont: `${\n          appState.currentItemFont.split(\"px \")[0]\n        }px ${value}`,\n      },\n      commitToHistory: true,\n    };\n  },\n  PanelComponent: ({ elements, appState, updateData }) => (\n    <fieldset>\n      <legend>{t(\"labels.fontFamily\")}</legend>\n      <ButtonSelect\n        group=\"font-family\"\n        options={[\n          { value: \"Virgil\", text: t(\"labels.handDrawn\") },\n          { value: \"Helvetica\", text: t(\"labels.normal\") },\n          { value: \"Cascadia\", text: t(\"labels.code\") },\n        ]}\n        value={getFormValue(\n          elements,\n          appState,\n          (element) => isTextElement(element) && element.font.split(\"px \")[1],\n          (appState.currentItemFont || DEFAULT_FONT).split(\"px \")[1],\n        )}\n        onChange={(value) => updateData(value)}\n      />\n    </fieldset>\n  ),\n});\n\nexport const actionChangeTextAlign = register({\n  name: \"changeTextAlign\",\n  perform: (elements, appState, value) => {\n    return {\n      elements: changeProperty(elements, appState, (el) => {\n        if (isTextElement(el)) {\n          const element: ExcalidrawTextElement = newElementWith(el, {\n            textAlign: value,\n          });\n          redrawTextBoundingBox(element);\n          return element;\n        }\n\n        return el;\n      }),\n      appState: {\n        ...appState,\n        currentItemTextAlign: value,\n      },\n      commitToHistory: true,\n    };\n  },\n  PanelComponent: ({ elements, appState, updateData }) => (\n    <fieldset>\n      <legend>{t(\"labels.textAlign\")}</legend>\n      <ButtonSelect<TextAlign | false>\n        group=\"text-align\"\n        options={[\n          { value: \"left\", text: t(\"labels.left\") },\n          { value: \"center\", text: t(\"labels.center\") },\n          { value: \"right\", text: t(\"labels.right\") },\n        ]}\n        value={getFormValue(\n          elements,\n          appState,\n          (element) => isTextElement(element) && element.textAlign,\n          appState.currentItemTextAlign,\n        )}\n        onChange={(value) => updateData(value)}\n      />\n    </fieldset>\n  ),\n});\n"]},"metadata":{},"sourceType":"module"}