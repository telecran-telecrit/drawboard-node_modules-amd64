{"ast":null,"code":"import _objectSpread from \"/home/pro/Solutions/drawboard-light/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/home/pro/Solutions/drawboard-light/src/actions/actionProperties.tsx\";\nimport React from \"react\";\nimport { getCommonAttributeOfSelectedElements, isSomeElementSelected } from \"../scene\";\nimport { ButtonSelect } from \"../components/ButtonSelect\";\nimport { isTextElement, redrawTextBoundingBox } from \"../element\";\nimport { ColorPicker } from \"../components/ColorPicker\";\nimport { t } from \"../i18n\";\nimport { DEFAULT_FONT } from \"../appState\";\nimport { register } from \"./register\";\n\nvar changeProperty = function changeProperty(elements, appState, callback) {\n  return elements.map(function (element) {\n    if (appState.selectedElementIds[element.id]) {\n      return callback(element);\n    }\n\n    return element;\n  });\n};\n\nvar getFormValue = function getFormValue(elements, appState, getAttribute, defaultValue) {\n  var _ref, _ref2;\n\n  var editingElement = appState.editingElement;\n  return (_ref = (_ref2 = editingElement && getAttribute(editingElement)) !== null && _ref2 !== void 0 ? _ref2 : isSomeElementSelected(elements, appState) ? getCommonAttributeOfSelectedElements(elements, appState, getAttribute) : defaultValue) !== null && _ref !== void 0 ? _ref : null;\n};\n\nexport var actionChangeStrokeColor = register({\n  name: \"changeStrokeColor\",\n  perform: function perform(elements, appState, value) {\n    return {\n      elements: changeProperty(elements, appState, function (el) {\n        return _objectSpread({}, el, {\n          strokeColor: value\n        });\n      }),\n      appState: _objectSpread({}, appState, {\n        currentItemStrokeColor: value\n      })\n    };\n  },\n  commitToHistory: function commitToHistory() {\n    return true;\n  },\n  PanelComponent: function PanelComponent(_ref3) {\n    var elements = _ref3.elements,\n        appState = _ref3.appState,\n        updateData = _ref3.updateData;\n    return React.createElement(React.Fragment, null, React.createElement(\"h3\", {\n      \"aria-hidden\": \"true\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, t(\"labels.stroke\")), React.createElement(ColorPicker, {\n      type: \"elementStroke\",\n      label: t(\"labels.stroke\"),\n      color: getFormValue(elements, appState, function (element) {\n        return element.strokeColor;\n      }, appState.currentItemStrokeColor),\n      onChange: updateData,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }));\n  }\n});\nexport var actionChangeBackgroundColor = register({\n  name: \"changeBackgroundColor\",\n  perform: function perform(elements, appState, value) {\n    return {\n      elements: changeProperty(elements, appState, function (el) {\n        return _objectSpread({}, el, {\n          backgroundColor: value\n        });\n      }),\n      appState: _objectSpread({}, appState, {\n        currentItemBackgroundColor: value\n      })\n    };\n  },\n  commitToHistory: function commitToHistory() {\n    return true;\n  },\n  PanelComponent: function PanelComponent(_ref4) {\n    var elements = _ref4.elements,\n        appState = _ref4.appState,\n        updateData = _ref4.updateData;\n    return React.createElement(React.Fragment, null, React.createElement(\"h3\", {\n      \"aria-hidden\": \"true\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, t(\"labels.background\")), React.createElement(ColorPicker, {\n      type: \"elementBackground\",\n      label: t(\"labels.background\"),\n      color: getFormValue(elements, appState, function (element) {\n        return element.backgroundColor;\n      }, appState.currentItemBackgroundColor),\n      onChange: updateData,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }));\n  }\n});\nexport var actionChangeFillStyle = register({\n  name: \"changeFillStyle\",\n  perform: function perform(elements, appState, value) {\n    return {\n      elements: changeProperty(elements, appState, function (el) {\n        return _objectSpread({}, el, {\n          fillStyle: value\n        });\n      }),\n      appState: _objectSpread({}, appState, {\n        currentItemFillStyle: value\n      })\n    };\n  },\n  commitToHistory: function commitToHistory() {\n    return true;\n  },\n  PanelComponent: function PanelComponent(_ref5) {\n    var elements = _ref5.elements,\n        appState = _ref5.appState,\n        updateData = _ref5.updateData;\n    return React.createElement(\"fieldset\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, React.createElement(\"legend\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, t(\"labels.fill\")), React.createElement(ButtonSelect, {\n      options: [{\n        value: \"solid\",\n        text: t(\"labels.solid\")\n      }, {\n        value: \"hachure\",\n        text: t(\"labels.hachure\")\n      }, {\n        value: \"cross-hatch\",\n        text: t(\"labels.crossHatch\")\n      }],\n      group: \"fill\",\n      value: getFormValue(elements, appState, function (element) {\n        return element.fillStyle;\n      }, appState.currentItemFillStyle),\n      onChange: function onChange(value) {\n        updateData(value);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }));\n  }\n});\nexport var actionChangeStrokeWidth = register({\n  name: \"changeStrokeWidth\",\n  perform: function perform(elements, appState, value) {\n    return {\n      elements: changeProperty(elements, appState, function (el) {\n        return _objectSpread({}, el, {\n          strokeWidth: value\n        });\n      }),\n      appState: _objectSpread({}, appState, {\n        currentItemStrokeWidth: value\n      })\n    };\n  },\n  commitToHistory: function commitToHistory() {\n    return true;\n  },\n  PanelComponent: function PanelComponent(_ref6) {\n    var elements = _ref6.elements,\n        appState = _ref6.appState,\n        updateData = _ref6.updateData;\n    return React.createElement(\"fieldset\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }, React.createElement(\"legend\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }, t(\"labels.strokeWidth\")), React.createElement(ButtonSelect, {\n      group: \"stroke-width\",\n      options: [{\n        value: 1,\n        text: t(\"labels.thin\")\n      }, {\n        value: 2,\n        text: t(\"labels.bold\")\n      }, {\n        value: 4,\n        text: t(\"labels.extraBold\")\n      }],\n      value: getFormValue(elements, appState, function (element) {\n        return element.strokeWidth;\n      }, appState.currentItemStrokeWidth),\n      onChange: function onChange(value) {\n        return updateData(value);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }));\n  }\n});\nexport var actionChangeSloppiness = register({\n  name: \"changeSloppiness\",\n  perform: function perform(elements, appState, value) {\n    return {\n      elements: changeProperty(elements, appState, function (el) {\n        return _objectSpread({}, el, {\n          roughness: value\n        });\n      }),\n      appState: _objectSpread({}, appState, {\n        currentItemRoughness: value\n      })\n    };\n  },\n  commitToHistory: function commitToHistory() {\n    return true;\n  },\n  PanelComponent: function PanelComponent(_ref7) {\n    var elements = _ref7.elements,\n        appState = _ref7.appState,\n        updateData = _ref7.updateData;\n    return React.createElement(\"fieldset\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    }, React.createElement(\"legend\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }, t(\"labels.sloppiness\")), React.createElement(ButtonSelect, {\n      group: \"sloppiness\",\n      options: [{\n        value: 0,\n        text: t(\"labels.architect\")\n      }, {\n        value: 1,\n        text: t(\"labels.artist\")\n      }, {\n        value: 2,\n        text: t(\"labels.cartoonist\")\n      }],\n      value: getFormValue(elements, appState, function (element) {\n        return element.roughness;\n      }, appState.currentItemRoughness),\n      onChange: function onChange(value) {\n        return updateData(value);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    }));\n  }\n});\nexport var actionChangeOpacity = register({\n  name: \"changeOpacity\",\n  perform: function perform(elements, appState, value) {\n    return {\n      elements: changeProperty(elements, appState, function (el) {\n        return _objectSpread({}, el, {\n          opacity: value\n        });\n      }),\n      appState: _objectSpread({}, appState, {\n        currentItemOpacity: value\n      })\n    };\n  },\n  commitToHistory: function commitToHistory() {\n    return true;\n  },\n  PanelComponent: function PanelComponent(_ref8) {\n    var _getFormValue;\n\n    var elements = _ref8.elements,\n        appState = _ref8.appState,\n        updateData = _ref8.updateData;\n    return React.createElement(\"label\", {\n      className: \"control-label\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221\n      },\n      __self: this\n    }, t(\"labels.opacity\"), React.createElement(\"input\", {\n      type: \"range\",\n      min: \"0\",\n      max: \"100\",\n      step: \"10\",\n      onChange: function onChange(event) {\n        return updateData(+event.target.value);\n      },\n      onWheel: function onWheel(event) {\n        event.stopPropagation();\n        var target = event.target;\n        var STEP = 10;\n        var MAX = 100;\n        var MIN = 0;\n        var value = +target.value;\n\n        if (event.deltaY < 0 && value < MAX) {\n          updateData(value + STEP);\n        } else if (event.deltaY > 0 && value > MIN) {\n          updateData(value - STEP);\n        }\n      },\n      value: (_getFormValue = getFormValue(elements, appState, function (element) {\n        return element.opacity;\n      }, appState.currentItemOpacity)) !== null && _getFormValue !== void 0 ? _getFormValue : undefined,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223\n      },\n      __self: this\n    }));\n  }\n});\nexport var actionChangeFontSize = register({\n  name: \"changeFontSize\",\n  perform: function perform(elements, appState, value) {\n    return {\n      elements: changeProperty(elements, appState, function (el) {\n        if (isTextElement(el)) {\n          var _element = _objectSpread({}, el, {\n            font: \"\".concat(value, \"px \").concat(el.font.split(\"px \")[1])\n          });\n\n          redrawTextBoundingBox(_element);\n          return _element;\n        }\n\n        return el;\n      }),\n      appState: _objectSpread({}, appState, {\n        currentItemFont: \"\".concat(value, \"px \").concat(appState.currentItemFont.split(\"px \")[1])\n      })\n    };\n  },\n  commitToHistory: function commitToHistory() {\n    return true;\n  },\n  PanelComponent: function PanelComponent(_ref9) {\n    var elements = _ref9.elements,\n        appState = _ref9.appState,\n        updateData = _ref9.updateData;\n    return React.createElement(\"fieldset\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 282\n      },\n      __self: this\n    }, React.createElement(\"legend\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 283\n      },\n      __self: this\n    }, t(\"labels.fontSize\")), React.createElement(ButtonSelect, {\n      group: \"font-size\",\n      options: [{\n        value: 16,\n        text: t(\"labels.small\")\n      }, {\n        value: 20,\n        text: t(\"labels.medium\")\n      }, {\n        value: 28,\n        text: t(\"labels.large\")\n      }, {\n        value: 36,\n        text: t(\"labels.veryLarge\")\n      }],\n      value: getFormValue(elements, appState, function (element) {\n        return isTextElement(element) && +element.font.split(\"px \")[0];\n      }, +(appState.currentItemFont || DEFAULT_FONT).split(\"px \")[0]),\n      onChange: function onChange(value) {\n        return updateData(value);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284\n      },\n      __self: this\n    }));\n  }\n});\nexport var actionChangeFontFamily = register({\n  name: \"changeFontFamily\",\n  perform: function perform(elements, appState, value) {\n    return {\n      elements: changeProperty(elements, appState, function (el) {\n        if (isTextElement(el)) {\n          var _element2 = _objectSpread({}, el, {\n            font: \"\".concat(el.font.split(\"px \")[0], \"px \").concat(value)\n          });\n\n          redrawTextBoundingBox(_element2);\n          return _element2;\n        }\n\n        return el;\n      }),\n      appState: _objectSpread({}, appState, {\n        currentItemFont: \"\".concat(appState.currentItemFont.split(\"px \")[0], \"px \").concat(value)\n      })\n    };\n  },\n  commitToHistory: function commitToHistory() {\n    return true;\n  },\n  PanelComponent: function PanelComponent(_ref10) {\n    var elements = _ref10.elements,\n        appState = _ref10.appState,\n        updateData = _ref10.updateData;\n    return React.createElement(\"fieldset\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 330\n      },\n      __self: this\n    }, React.createElement(\"legend\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 331\n      },\n      __self: this\n    }, t(\"labels.fontFamily\")), React.createElement(ButtonSelect, {\n      group: \"font-family\",\n      options: [{\n        value: \"Virgil\",\n        text: t(\"labels.handDrawn\")\n      }, {\n        value: \"Helvetica\",\n        text: t(\"labels.normal\")\n      }, {\n        value: \"Cascadia\",\n        text: t(\"labels.code\")\n      }],\n      value: getFormValue(elements, appState, function (element) {\n        return isTextElement(element) && element.font.split(\"px \")[1];\n      }, (appState.currentItemFont || DEFAULT_FONT).split(\"px \")[1]),\n      onChange: function onChange(value) {\n        return updateData(value);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 332\n      },\n      __self: this\n    }));\n  }\n});","map":{"version":3,"sources":["/home/pro/Solutions/drawboard-light/src/actions/actionProperties.tsx"],"names":["React","getCommonAttributeOfSelectedElements","isSomeElementSelected","ButtonSelect","isTextElement","redrawTextBoundingBox","ColorPicker","t","DEFAULT_FONT","register","changeProperty","elements","appState","callback","map","element","selectedElementIds","id","getFormValue","getAttribute","defaultValue","editingElement","actionChangeStrokeColor","name","perform","value","el","strokeColor","currentItemStrokeColor","commitToHistory","PanelComponent","updateData","actionChangeBackgroundColor","backgroundColor","currentItemBackgroundColor","actionChangeFillStyle","fillStyle","currentItemFillStyle","text","actionChangeStrokeWidth","strokeWidth","currentItemStrokeWidth","actionChangeSloppiness","roughness","currentItemRoughness","actionChangeOpacity","opacity","currentItemOpacity","event","target","stopPropagation","STEP","MAX","MIN","deltaY","undefined","actionChangeFontSize","font","split","currentItemFont","actionChangeFontFamily"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { ExcalidrawElement, ExcalidrawTextElement } from \"../element/types\";\nimport {\n  getCommonAttributeOfSelectedElements,\n  isSomeElementSelected,\n} from \"../scene\";\nimport { ButtonSelect } from \"../components/ButtonSelect\";\nimport { isTextElement, redrawTextBoundingBox } from \"../element\";\nimport { ColorPicker } from \"../components/ColorPicker\";\nimport { AppState } from \"../../src/types\";\nimport { t } from \"../i18n\";\nimport { DEFAULT_FONT } from \"../appState\";\nimport { register } from \"./register\";\n\nconst changeProperty = (\n  elements: readonly ExcalidrawElement[],\n  appState: AppState,\n  callback: (element: ExcalidrawElement) => ExcalidrawElement,\n) => {\n  return elements.map(element => {\n    if (appState.selectedElementIds[element.id]) {\n      return callback(element);\n    }\n    return element;\n  });\n};\n\nconst getFormValue = function<T>(\n  elements: readonly ExcalidrawElement[],\n  appState: AppState,\n  getAttribute: (element: ExcalidrawElement) => T,\n  defaultValue?: T,\n): T | null {\n  const editingElement = appState.editingElement;\n  return (\n    (editingElement && getAttribute(editingElement)) ??\n    (isSomeElementSelected(elements, appState)\n      ? getCommonAttributeOfSelectedElements(elements, appState, getAttribute)\n      : defaultValue) ??\n    null\n  );\n};\n\nexport const actionChangeStrokeColor = register({\n  name: \"changeStrokeColor\",\n  perform: (elements, appState, value) => {\n    return {\n      elements: changeProperty(elements, appState, el => ({\n        ...el,\n        strokeColor: value,\n      })),\n      appState: { ...appState, currentItemStrokeColor: value },\n    };\n  },\n  commitToHistory: () => true,\n  PanelComponent: ({ elements, appState, updateData }) => (\n    <>\n      <h3 aria-hidden=\"true\">{t(\"labels.stroke\")}</h3>\n      <ColorPicker\n        type=\"elementStroke\"\n        label={t(\"labels.stroke\")}\n        color={getFormValue(\n          elements,\n          appState,\n          element => element.strokeColor,\n          appState.currentItemStrokeColor,\n        )}\n        onChange={updateData}\n      />\n    </>\n  ),\n});\n\nexport const actionChangeBackgroundColor = register({\n  name: \"changeBackgroundColor\",\n  perform: (elements, appState, value) => {\n    return {\n      elements: changeProperty(elements, appState, el => ({\n        ...el,\n        backgroundColor: value,\n      })),\n      appState: { ...appState, currentItemBackgroundColor: value },\n    };\n  },\n  commitToHistory: () => true,\n  PanelComponent: ({ elements, appState, updateData }) => (\n    <>\n      <h3 aria-hidden=\"true\">{t(\"labels.background\")}</h3>\n      <ColorPicker\n        type=\"elementBackground\"\n        label={t(\"labels.background\")}\n        color={getFormValue(\n          elements,\n          appState,\n          element => element.backgroundColor,\n          appState.currentItemBackgroundColor,\n        )}\n        onChange={updateData}\n      />\n    </>\n  ),\n});\n\nexport const actionChangeFillStyle = register({\n  name: \"changeFillStyle\",\n  perform: (elements, appState, value) => {\n    return {\n      elements: changeProperty(elements, appState, el => ({\n        ...el,\n        fillStyle: value,\n      })),\n      appState: { ...appState, currentItemFillStyle: value },\n    };\n  },\n  commitToHistory: () => true,\n  PanelComponent: ({ elements, appState, updateData }) => (\n    <fieldset>\n      <legend>{t(\"labels.fill\")}</legend>\n      <ButtonSelect\n        options={[\n          { value: \"solid\", text: t(\"labels.solid\") },\n          { value: \"hachure\", text: t(\"labels.hachure\") },\n          { value: \"cross-hatch\", text: t(\"labels.crossHatch\") },\n        ]}\n        group=\"fill\"\n        value={getFormValue(\n          elements,\n          appState,\n          element => element.fillStyle,\n          appState.currentItemFillStyle,\n        )}\n        onChange={value => {\n          updateData(value);\n        }}\n      />\n    </fieldset>\n  ),\n});\n\nexport const actionChangeStrokeWidth = register({\n  name: \"changeStrokeWidth\",\n  perform: (elements, appState, value) => {\n    return {\n      elements: changeProperty(elements, appState, el => ({\n        ...el,\n        strokeWidth: value,\n      })),\n      appState: { ...appState, currentItemStrokeWidth: value },\n    };\n  },\n  commitToHistory: () => true,\n  PanelComponent: ({ elements, appState, updateData }) => (\n    <fieldset>\n      <legend>{t(\"labels.strokeWidth\")}</legend>\n      <ButtonSelect\n        group=\"stroke-width\"\n        options={[\n          { value: 1, text: t(\"labels.thin\") },\n          { value: 2, text: t(\"labels.bold\") },\n          { value: 4, text: t(\"labels.extraBold\") },\n        ]}\n        value={getFormValue(\n          elements,\n          appState,\n          element => element.strokeWidth,\n          appState.currentItemStrokeWidth,\n        )}\n        onChange={value => updateData(value)}\n      />\n    </fieldset>\n  ),\n});\n\nexport const actionChangeSloppiness = register({\n  name: \"changeSloppiness\",\n  perform: (elements, appState, value) => {\n    return {\n      elements: changeProperty(elements, appState, el => ({\n        ...el,\n        roughness: value,\n      })),\n      appState: { ...appState, currentItemRoughness: value },\n    };\n  },\n  commitToHistory: () => true,\n  PanelComponent: ({ elements, appState, updateData }) => (\n    <fieldset>\n      <legend>{t(\"labels.sloppiness\")}</legend>\n      <ButtonSelect\n        group=\"sloppiness\"\n        options={[\n          { value: 0, text: t(\"labels.architect\") },\n          { value: 1, text: t(\"labels.artist\") },\n          { value: 2, text: t(\"labels.cartoonist\") },\n        ]}\n        value={getFormValue(\n          elements,\n          appState,\n          element => element.roughness,\n          appState.currentItemRoughness,\n        )}\n        onChange={value => updateData(value)}\n      />\n    </fieldset>\n  ),\n});\n\nexport const actionChangeOpacity = register({\n  name: \"changeOpacity\",\n  perform: (elements, appState, value) => {\n    return {\n      elements: changeProperty(elements, appState, el => ({\n        ...el,\n        opacity: value,\n      })),\n      appState: { ...appState, currentItemOpacity: value },\n    };\n  },\n  commitToHistory: () => true,\n  PanelComponent: ({ elements, appState, updateData }) => (\n    <label className=\"control-label\">\n      {t(\"labels.opacity\")}\n      <input\n        type=\"range\"\n        min=\"0\"\n        max=\"100\"\n        step=\"10\"\n        onChange={event => updateData(+event.target.value)}\n        onWheel={event => {\n          event.stopPropagation();\n          const target = event.target as HTMLInputElement;\n          const STEP = 10;\n          const MAX = 100;\n          const MIN = 0;\n          const value = +target.value;\n\n          if (event.deltaY < 0 && value < MAX) {\n            updateData(value + STEP);\n          } else if (event.deltaY > 0 && value > MIN) {\n            updateData(value - STEP);\n          }\n        }}\n        value={\n          getFormValue(\n            elements,\n            appState,\n            element => element.opacity,\n            appState.currentItemOpacity,\n          ) ?? undefined\n        }\n      />\n    </label>\n  ),\n});\n\nexport const actionChangeFontSize = register({\n  name: \"changeFontSize\",\n  perform: (elements, appState, value) => {\n    return {\n      elements: changeProperty(elements, appState, el => {\n        if (isTextElement(el)) {\n          const element: ExcalidrawTextElement = {\n            ...el,\n            font: `${value}px ${el.font.split(\"px \")[1]}`,\n          };\n          redrawTextBoundingBox(element);\n          return element;\n        }\n\n        return el;\n      }),\n      appState: {\n        ...appState,\n        currentItemFont: `${value}px ${\n          appState.currentItemFont.split(\"px \")[1]\n        }`,\n      },\n    };\n  },\n  commitToHistory: () => true,\n  PanelComponent: ({ elements, appState, updateData }) => (\n    <fieldset>\n      <legend>{t(\"labels.fontSize\")}</legend>\n      <ButtonSelect\n        group=\"font-size\"\n        options={[\n          { value: 16, text: t(\"labels.small\") },\n          { value: 20, text: t(\"labels.medium\") },\n          { value: 28, text: t(\"labels.large\") },\n          { value: 36, text: t(\"labels.veryLarge\") },\n        ]}\n        value={getFormValue(\n          elements,\n          appState,\n          element => isTextElement(element) && +element.font.split(\"px \")[0],\n          +(appState.currentItemFont || DEFAULT_FONT).split(\"px \")[0],\n        )}\n        onChange={value => updateData(value)}\n      />\n    </fieldset>\n  ),\n});\n\nexport const actionChangeFontFamily = register({\n  name: \"changeFontFamily\",\n  perform: (elements, appState, value) => {\n    return {\n      elements: changeProperty(elements, appState, el => {\n        if (isTextElement(el)) {\n          const element: ExcalidrawTextElement = {\n            ...el,\n            font: `${el.font.split(\"px \")[0]}px ${value}`,\n          };\n          redrawTextBoundingBox(element);\n          return element;\n        }\n\n        return el;\n      }),\n      appState: {\n        ...appState,\n        currentItemFont: `${\n          appState.currentItemFont.split(\"px \")[0]\n        }px ${value}`,\n      },\n    };\n  },\n  commitToHistory: () => true,\n  PanelComponent: ({ elements, appState, updateData }) => (\n    <fieldset>\n      <legend>{t(\"labels.fontFamily\")}</legend>\n      <ButtonSelect\n        group=\"font-family\"\n        options={[\n          { value: \"Virgil\", text: t(\"labels.handDrawn\") },\n          { value: \"Helvetica\", text: t(\"labels.normal\") },\n          { value: \"Cascadia\", text: t(\"labels.code\") },\n        ]}\n        value={getFormValue(\n          elements,\n          appState,\n          element => isTextElement(element) && element.font.split(\"px \")[1],\n          (appState.currentItemFont || DEFAULT_FONT).split(\"px \")[1],\n        )}\n        onChange={value => updateData(value)}\n      />\n    </fieldset>\n  ),\n});\n"]},"metadata":{},"sourceType":"module"}