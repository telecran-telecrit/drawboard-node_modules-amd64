{"ast":null,"code":"import _regeneratorRuntime from \"/home/pro/Solutions/drawboard-light/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _objectSpread from \"/home/pro/Solutions/drawboard-light/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _asyncToGenerator from \"/home/pro/Solutions/drawboard-light/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { getDefaultAppState } from \"../appState\";\nimport { restore } from \"./restore\";\nexport function loadFromBlob(_x) {\n  return _loadFromBlob.apply(this, arguments);\n}\n\nfunction _loadFromBlob() {\n  _loadFromBlob = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(blob) {\n    var updateAppState, contents, _updateAppState, elements, appState;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            updateAppState = function updateAppState(contents) {\n              var defaultAppState = getDefaultAppState();\n              var elements = [];\n              var appState = defaultAppState;\n\n              try {\n                var data = JSON.parse(contents);\n\n                if (data.type !== \"excalidraw\") {\n                  throw new Error(\"Cannot load invalid json\");\n                }\n\n                elements = data.elements || [];\n                appState = _objectSpread({}, defaultAppState, {}, data.appState);\n              } catch (_unused) {// Do nothing because elements array is already empty\n              }\n\n              return {\n                elements: elements,\n                appState: appState\n              };\n            };\n\n            if (blob.handle) {\n              window.handle = blob.handle;\n            }\n\n            if (!(\"text\" in Blob)) {\n              _context.next = 8;\n              break;\n            }\n\n            _context.next = 5;\n            return blob.text();\n\n          case 5:\n            contents = _context.sent;\n            _context.next = 11;\n            break;\n\n          case 8:\n            _context.next = 10;\n            return new Promise(function (resolve) {\n              var reader = new FileReader();\n              reader.readAsText(blob, \"utf8\");\n\n              reader.onloadend = function () {\n                if (reader.readyState === FileReader.DONE) {\n                  resolve(reader.result);\n                }\n              };\n            });\n\n          case 10:\n            contents = _context.sent;\n\n          case 11:\n            _updateAppState = updateAppState(contents), elements = _updateAppState.elements, appState = _updateAppState.appState;\n\n            if (elements.length) {\n              _context.next = 14;\n              break;\n            }\n\n            return _context.abrupt(\"return\", Promise.reject(\"Cannot load invalid json\"));\n\n          case 14:\n            return _context.abrupt(\"return\", new Promise(function (resolve) {\n              resolve(restore(elements, appState, {\n                scrollToContent: true\n              }));\n            }));\n\n          case 15:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _loadFromBlob.apply(this, arguments);\n}","map":{"version":3,"sources":["/home/pro/Solutions/drawboard-light/src/data/blob.ts"],"names":["getDefaultAppState","restore","loadFromBlob","blob","updateAppState","contents","defaultAppState","elements","appState","data","JSON","parse","type","Error","handle","window","Blob","text","Promise","resolve","reader","FileReader","readAsText","onloadend","readyState","DONE","result","length","reject","scrollToContent"],"mappings":";;;AAAA,SAASA,kBAAT,QAAmC,aAAnC;AAEA,SAASC,OAAT,QAAwB,WAAxB;AAEA,gBAAsBC,YAAtB;AAAA;AAAA;;;;;2BAAO,iBAA4BC,IAA5B;AAAA;;AAAA;AAAA;AAAA;AAAA;AACCC,YAAAA,cADD,GACkB,SAAjBA,cAAiB,CAACC,QAAD,EAAsB;AAC3C,kBAAMC,eAAe,GAAGN,kBAAkB,EAA1C;AACA,kBAAIO,QAAQ,GAAG,EAAf;AACA,kBAAIC,QAAQ,GAAGF,eAAf;;AACA,kBAAI;AACF,oBAAMG,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWN,QAAX,CAAb;;AACA,oBAAII,IAAI,CAACG,IAAL,KAAc,YAAlB,EAAgC;AAC9B,wBAAM,IAAIC,KAAJ,CAAU,0BAAV,CAAN;AACD;;AACDN,gBAAAA,QAAQ,GAAGE,IAAI,CAACF,QAAL,IAAiB,EAA5B;AACAC,gBAAAA,QAAQ,qBAAQF,eAAR,MAA4BG,IAAI,CAACD,QAAjC,CAAR;AACD,eAPD,CAOE,gBAAM,CACN;AACD;;AACD,qBAAO;AAAED,gBAAAA,QAAQ,EAARA,QAAF;AAAYC,gBAAAA,QAAQ,EAARA;AAAZ,eAAP;AACD,aAhBI;;AAkBL,gBAAIL,IAAI,CAACW,MAAT,EAAiB;AACdC,cAAAA,MAAD,CAAgBD,MAAhB,GAAyBX,IAAI,CAACW,MAA9B;AACD;;AApBI,kBAsBD,UAAUE,IAtBT;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAuBcb,IAAI,CAACc,IAAL,EAvBd;;AAAA;AAuBHZ,YAAAA,QAvBG;AAAA;AAAA;;AAAA;AAAA;AAAA,mBAyBc,IAAIa,OAAJ,CAAY,UAAAC,OAAO,EAAI;AACtC,kBAAMC,MAAM,GAAG,IAAIC,UAAJ,EAAf;AACAD,cAAAA,MAAM,CAACE,UAAP,CAAkBnB,IAAlB,EAAwB,MAAxB;;AACAiB,cAAAA,MAAM,CAACG,SAAP,GAAmB,YAAM;AACvB,oBAAIH,MAAM,CAACI,UAAP,KAAsBH,UAAU,CAACI,IAArC,EAA2C;AACzCN,kBAAAA,OAAO,CAACC,MAAM,CAACM,MAAR,CAAP;AACD;AACF,eAJD;AAKD,aARgB,CAzBd;;AAAA;AAyBHrB,YAAAA,QAzBG;;AAAA;AAAA,8BAmC0BD,cAAc,CAACC,QAAD,CAnCxC,EAmCGE,QAnCH,mBAmCGA,QAnCH,EAmCaC,QAnCb,mBAmCaA,QAnCb;;AAAA,gBAoCAD,QAAQ,CAACoB,MApCT;AAAA;AAAA;AAAA;;AAAA,6CAqCIT,OAAO,CAACU,MAAR,CAAe,0BAAf,CArCJ;;AAAA;AAAA,6CAuCE,IAAIV,OAAJ,CAAuB,UAAAC,OAAO,EAAI;AACvCA,cAAAA,OAAO,CAAClB,OAAO,CAACM,QAAD,EAAWC,QAAX,EAAqB;AAAEqB,gBAAAA,eAAe,EAAE;AAAnB,eAArB,CAAR,CAAP;AACD,aAFM,CAvCF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import { getDefaultAppState } from \"../appState\";\nimport { DataState } from \"./types\";\nimport { restore } from \"./restore\";\n\nexport async function loadFromBlob(blob: any) {\n  const updateAppState = (contents: string) => {\n    const defaultAppState = getDefaultAppState();\n    let elements = [];\n    let appState = defaultAppState;\n    try {\n      const data = JSON.parse(contents);\n      if (data.type !== \"excalidraw\") {\n        throw new Error(\"Cannot load invalid json\");\n      }\n      elements = data.elements || [];\n      appState = { ...defaultAppState, ...data.appState };\n    } catch {\n      // Do nothing because elements array is already empty\n    }\n    return { elements, appState };\n  };\n\n  if (blob.handle) {\n    (window as any).handle = blob.handle;\n  }\n  let contents;\n  if (\"text\" in Blob) {\n    contents = await blob.text();\n  } else {\n    contents = await new Promise(resolve => {\n      const reader = new FileReader();\n      reader.readAsText(blob, \"utf8\");\n      reader.onloadend = () => {\n        if (reader.readyState === FileReader.DONE) {\n          resolve(reader.result as string);\n        }\n      };\n    });\n  }\n  const { elements, appState } = updateAppState(contents);\n  if (!elements.length) {\n    return Promise.reject(\"Cannot load invalid json\");\n  }\n  return new Promise<DataState>(resolve => {\n    resolve(restore(elements, appState, { scrollToContent: true }));\n  });\n}\n"]},"metadata":{},"sourceType":"module"}