{"ast":null,"code":"import { isInvisiblySmallElement } from \"./sizeHelpers\";\nexport { newElement, newTextElement, newLinearElement, duplicateElement } from \"./newElement\";\nexport { getElementAbsoluteCoords, getElementBounds, getCommonBounds, getDiamondPoints, getArrowPoints, getLinearElementAbsoluteBounds } from \"./bounds\";\nexport { OMIT_SIDES_FOR_MULTIPLE_ELEMENTS, handlerRectanglesFromCoords, handlerRectangles } from \"./handlerRectangles\";\nexport { hitTest } from \"./collision\";\nexport { resizeTest, getCursorForResizingElement, normalizeResizeHandle, getElementWithResizeHandler, getResizeHandlerFromCoords } from \"./resizeTest\";\nexport { resizeElements, canResizeMutlipleElements } from \"./resizeElements\";\nexport { isTextElement, isExcalidrawElement } from \"./typeChecks\";\nexport { textWysiwyg } from \"./textWysiwyg\";\nexport { redrawTextBoundingBox } from \"./textElement\";\nexport { getPerfectElementSize, isInvisiblySmallElement, resizePerfectLineForNWHandler, normalizeDimensions } from \"./sizeHelpers\";\nexport { showSelectedShapeActions } from \"./showSelectedShapeActions\";\nexport function getSyncableElements(elements) {\n  // There are places in Excalidraw where synthetic invisibly small elements are added and removed.\n  // It's probably best to keep those local otherwise there might be a race condition that\n  // gets the app into an invalid state. I've never seen it happen but I'm worried about it :)\n  return elements.filter(el => el.isDeleted || !isInvisiblySmallElement(el));\n}\nexport function getElementMap(elements) {\n  return elements.reduce((acc, element) => {\n    acc[element.id] = element;\n    return acc;\n  }, {});\n}\nexport function getDrawingVersion(elements) {\n  return elements.reduce((acc, el) => acc + el.version, 0);\n}\nexport function getNonDeletedElements(elements) {\n  return elements.filter(element => !element.isDeleted);\n}\nexport function isNonDeletedElement(element) {\n  return !element.isDeleted;\n}","map":{"version":3,"sources":["/home/pro/Solutions/drawboard-light/src/element/index.ts"],"names":["isInvisiblySmallElement","newElement","newTextElement","newLinearElement","duplicateElement","getElementAbsoluteCoords","getElementBounds","getCommonBounds","getDiamondPoints","getArrowPoints","getLinearElementAbsoluteBounds","OMIT_SIDES_FOR_MULTIPLE_ELEMENTS","handlerRectanglesFromCoords","handlerRectangles","hitTest","resizeTest","getCursorForResizingElement","normalizeResizeHandle","getElementWithResizeHandler","getResizeHandlerFromCoords","resizeElements","canResizeMutlipleElements","isTextElement","isExcalidrawElement","textWysiwyg","redrawTextBoundingBox","getPerfectElementSize","resizePerfectLineForNWHandler","normalizeDimensions","showSelectedShapeActions","getSyncableElements","elements","filter","el","isDeleted","getElementMap","reduce","acc","element","id","getDrawingVersion","version","getNonDeletedElements","isNonDeletedElement"],"mappings":"AAKA,SAASA,uBAAT,QAAwC,eAAxC;AAEA,SACEC,UADF,EAEEC,cAFF,EAGEC,gBAHF,EAIEC,gBAJF,QAKO,cALP;AAMA,SACEC,wBADF,EAEEC,gBAFF,EAGEC,eAHF,EAIEC,gBAJF,EAKEC,cALF,EAMEC,8BANF,QAOO,UAPP;AASA,SACEC,gCADF,EAEEC,2BAFF,EAGEC,iBAHF,QAIO,qBAJP;AAKA,SAASC,OAAT,QAAwB,aAAxB;AACA,SACEC,UADF,EAEEC,2BAFF,EAGEC,qBAHF,EAIEC,2BAJF,EAKEC,0BALF,QAMO,cANP;AAOA,SAASC,cAAT,EAAyBC,yBAAzB,QAA0D,kBAA1D;AACA,SAASC,aAAT,EAAwBC,mBAAxB,QAAmD,cAAnD;AACA,SAASC,WAAT,QAA4B,eAA5B;AACA,SAASC,qBAAT,QAAsC,eAAtC;AACA,SACEC,qBADF,EAEE1B,uBAFF,EAGE2B,6BAHF,EAIEC,mBAJF,QAKO,eALP;AAMA,SAASC,wBAAT,QAAyC,4BAAzC;AAEA,OAAO,SAASC,mBAAT,CAA6BC,QAA7B,EAAqE;AAC1E;AACA;AACA;AACA,SAAOA,QAAQ,CAACC,MAAT,CAAiBC,EAAD,IAAQA,EAAE,CAACC,SAAH,IAAgB,CAAClC,uBAAuB,CAACiC,EAAD,CAAhE,CAAP;AACD;AAED,OAAO,SAASE,aAAT,CAAuBJ,QAAvB,EAA+D;AACpE,SAAOA,QAAQ,CAACK,MAAT,CACL,CAACC,GAAD,EAA4CC,OAA5C,KAA2E;AACzED,IAAAA,GAAG,CAACC,OAAO,CAACC,EAAT,CAAH,GAAkBD,OAAlB;AACA,WAAOD,GAAP;AACD,GAJI,EAKL,EALK,CAAP;AAOD;AAED,OAAO,SAASG,iBAAT,CAA2BT,QAA3B,EAAmE;AACxE,SAAOA,QAAQ,CAACK,MAAT,CAAgB,CAACC,GAAD,EAAMJ,EAAN,KAAaI,GAAG,GAAGJ,EAAE,CAACQ,OAAtC,EAA+C,CAA/C,CAAP;AACD;AAED,OAAO,SAASC,qBAAT,CAA+BX,QAA/B,EAAuE;AAC5E,SACEA,QAAQ,CAACC,MAAT,CAAiBM,OAAD,IAAa,CAACA,OAAO,CAACJ,SAAtC,CADF;AAID;AAED,OAAO,SAASS,mBAAT,CACLL,OADK,EAEqB;AAC1B,SAAO,CAACA,OAAO,CAACJ,SAAhB;AACD","sourcesContent":["import {\n  ExcalidrawElement,\n  NonDeletedExcalidrawElement,\n  NonDeleted,\n} from \"./types\";\nimport { isInvisiblySmallElement } from \"./sizeHelpers\";\n\nexport {\n  newElement,\n  newTextElement,\n  newLinearElement,\n  duplicateElement,\n} from \"./newElement\";\nexport {\n  getElementAbsoluteCoords,\n  getElementBounds,\n  getCommonBounds,\n  getDiamondPoints,\n  getArrowPoints,\n  getLinearElementAbsoluteBounds,\n} from \"./bounds\";\n\nexport {\n  OMIT_SIDES_FOR_MULTIPLE_ELEMENTS,\n  handlerRectanglesFromCoords,\n  handlerRectangles,\n} from \"./handlerRectangles\";\nexport { hitTest } from \"./collision\";\nexport {\n  resizeTest,\n  getCursorForResizingElement,\n  normalizeResizeHandle,\n  getElementWithResizeHandler,\n  getResizeHandlerFromCoords,\n} from \"./resizeTest\";\nexport { resizeElements, canResizeMutlipleElements } from \"./resizeElements\";\nexport { isTextElement, isExcalidrawElement } from \"./typeChecks\";\nexport { textWysiwyg } from \"./textWysiwyg\";\nexport { redrawTextBoundingBox } from \"./textElement\";\nexport {\n  getPerfectElementSize,\n  isInvisiblySmallElement,\n  resizePerfectLineForNWHandler,\n  normalizeDimensions,\n} from \"./sizeHelpers\";\nexport { showSelectedShapeActions } from \"./showSelectedShapeActions\";\n\nexport function getSyncableElements(elements: readonly ExcalidrawElement[]) {\n  // There are places in Excalidraw where synthetic invisibly small elements are added and removed.\n  // It's probably best to keep those local otherwise there might be a race condition that\n  // gets the app into an invalid state. I've never seen it happen but I'm worried about it :)\n  return elements.filter((el) => el.isDeleted || !isInvisiblySmallElement(el));\n}\n\nexport function getElementMap(elements: readonly ExcalidrawElement[]) {\n  return elements.reduce(\n    (acc: { [key: string]: ExcalidrawElement }, element: ExcalidrawElement) => {\n      acc[element.id] = element;\n      return acc;\n    },\n    {},\n  );\n}\n\nexport function getDrawingVersion(elements: readonly ExcalidrawElement[]) {\n  return elements.reduce((acc, el) => acc + el.version, 0);\n}\n\nexport function getNonDeletedElements(elements: readonly ExcalidrawElement[]) {\n  return (\n    elements.filter((element) => !element.isDeleted) as\n    readonly NonDeletedExcalidrawElement[]\n  );\n}\n\nexport function isNonDeletedElement<T extends ExcalidrawElement>(\n  element: T,\n): element is NonDeleted<T> {\n  return !element.isDeleted;\n}\n"]},"metadata":{},"sourceType":"module"}