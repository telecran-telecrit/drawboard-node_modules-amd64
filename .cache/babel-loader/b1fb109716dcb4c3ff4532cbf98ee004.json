{"ast":null,"code":"export function getZoomOrigin(canvas, scale) {\n  if (canvas === null) {\n    return {\n      x: 0,\n      y: 0\n    };\n  }\n\n  const context = canvas.getContext(\"2d\");\n\n  if (context === null) {\n    return {\n      x: 0,\n      y: 0\n    };\n  }\n\n  const normalizedCanvasWidth = canvas.width / scale;\n  const normalizedCanvasHeight = canvas.height / scale;\n  return {\n    x: normalizedCanvasWidth / 2,\n    y: normalizedCanvasHeight / 2\n  };\n}\nexport function getNormalizedZoom(zoom) {\n  const normalizedZoom = parseFloat(zoom.toFixed(2));\n  const clampedZoom = Math.max(0.1, Math.min(normalizedZoom, 2));\n  return clampedZoom;\n}","map":{"version":3,"sources":["/home/pro/Solutions/drawboard-light/src/scene/zoom.ts"],"names":["getZoomOrigin","canvas","scale","x","y","context","getContext","normalizedCanvasWidth","width","normalizedCanvasHeight","height","getNormalizedZoom","zoom","normalizedZoom","parseFloat","toFixed","clampedZoom","Math","max","min"],"mappings":"AAAA,OAAO,SAASA,aAAT,CAAuBC,MAAvB,EAAyDC,KAAzD,EAAwE;AAC7E,MAAID,MAAM,KAAK,IAAf,EAAqB;AACnB,WAAO;AAAEE,MAAAA,CAAC,EAAE,CAAL;AAAQC,MAAAA,CAAC,EAAE;AAAX,KAAP;AACD;;AACD,QAAMC,OAAO,GAAGJ,MAAM,CAACK,UAAP,CAAkB,IAAlB,CAAhB;;AACA,MAAID,OAAO,KAAK,IAAhB,EAAsB;AACpB,WAAO;AAAEF,MAAAA,CAAC,EAAE,CAAL;AAAQC,MAAAA,CAAC,EAAE;AAAX,KAAP;AACD;;AAED,QAAMG,qBAAqB,GAAGN,MAAM,CAACO,KAAP,GAAeN,KAA7C;AACA,QAAMO,sBAAsB,GAAGR,MAAM,CAACS,MAAP,GAAgBR,KAA/C;AAEA,SAAO;AACLC,IAAAA,CAAC,EAAEI,qBAAqB,GAAG,CADtB;AAELH,IAAAA,CAAC,EAAEK,sBAAsB,GAAG;AAFvB,GAAP;AAID;AAED,OAAO,SAASE,iBAAT,CAA2BC,IAA3B,EAAiD;AACtD,QAAMC,cAAc,GAAGC,UAAU,CAACF,IAAI,CAACG,OAAL,CAAa,CAAb,CAAD,CAAjC;AACA,QAAMC,WAAW,GAAGC,IAAI,CAACC,GAAL,CAAS,GAAT,EAAcD,IAAI,CAACE,GAAL,CAASN,cAAT,EAAyB,CAAzB,CAAd,CAApB;AACA,SAAOG,WAAP;AACD","sourcesContent":["export function getZoomOrigin(canvas: HTMLCanvasElement | null, scale: number) {\n  if (canvas === null) {\n    return { x: 0, y: 0 };\n  }\n  const context = canvas.getContext(\"2d\");\n  if (context === null) {\n    return { x: 0, y: 0 };\n  }\n\n  const normalizedCanvasWidth = canvas.width / scale;\n  const normalizedCanvasHeight = canvas.height / scale;\n\n  return {\n    x: normalizedCanvasWidth / 2,\n    y: normalizedCanvasHeight / 2,\n  };\n}\n\nexport function getNormalizedZoom(zoom: number): number {\n  const normalizedZoom = parseFloat(zoom.toFixed(2));\n  const clampedZoom = Math.max(0.1, Math.min(normalizedZoom, 2));\n  return clampedZoom;\n}\n"]},"metadata":{},"sourceType":"module"}