{"ast":null,"code":"import LanguageDetector from \"i18next-browser-languagedetector\";\nexport const languages = [{\n  lng: \"en\",\n  label: \"English\",\n  data: require(\"./locales/en.json\")\n}, {\n  lng: \"de-DE\",\n  label: \"Deutsch\",\n  data: require(\"./locales/de-DE.json\")\n}, {\n  lng: \"es-ES\",\n  label: \"Español\",\n  data: require(\"./locales/es-ES.json\")\n}, {\n  lng: \"el-GR\",\n  label: \"Ελληνικά\",\n  data: require(\"./locales/el-GR.json\")\n}, {\n  lng: \"fr-FR\",\n  label: \"Français\",\n  data: require(\"./locales/fr-FR.json\")\n}, {\n  lng: \"id-ID\",\n  label: \"Bahasa Indonesia\",\n  data: require(\"./locales/id-ID.json\")\n}, {\n  lng: \"it-IT\",\n  label: \"Italiano\",\n  data: require(\"./locales/it-IT.json\")\n}, {\n  lng: \"hu-HU\",\n  label: \"Magyar\",\n  data: require(\"./locales/hu-HU.json\")\n}, {\n  lng: \"nl-NL\",\n  label: \"Nederlands\",\n  data: require(\"./locales/nl-NL.json\")\n}, {\n  lng: \"no-No\",\n  label: \"Norsk\",\n  data: require(\"./locales/no-NO.json\")\n}, {\n  lng: \"pl-PL\",\n  label: \"Polski\",\n  data: require(\"./locales/pl-PL.json\")\n}, {\n  lng: \"pt-PT\",\n  label: \"Português\",\n  data: require(\"./locales/pt-PT.json\")\n}, {\n  lng: \"ru-RU\",\n  label: \"Русский\",\n  data: require(\"./locales/ru-RU.json\")\n}, {\n  lng: \"tr-TR\",\n  label: \"Türkçe\",\n  data: require(\"./locales/tr-TR.json\")\n}, {\n  lng: \"ko-KR\",\n  label: \"한국어\",\n  data: require(\"./locales/ko-KR.json\")\n}, {\n  lng: \"zh-TW\",\n  label: \"繁體中文\",\n  data: require(\"./locales/zh-TW.json\")\n}, {\n  lng: \"zh-CN\",\n  label: \"简体中文\",\n  data: require(\"./locales/zh-CN.json\")\n}, {\n  lng: \"ar-SA\",\n  label: \"العربية\",\n  data: require(\"./locales/ar-SA.json\"),\n  rtl: true\n}];\nlet currentLanguage = languages[0];\nconst fallbackLanguage = languages[0];\nexport function setLanguage(newLng) {\n  currentLanguage = languages.find(language => language.lng === newLng) || fallbackLanguage;\n  document.documentElement.dir = currentLanguage.rtl ? \"rtl\" : \"ltr\";\n  languageDetector.cacheUserLanguage(currentLanguage.lng);\n}\nexport function getLanguage() {\n  return currentLanguage;\n}\n\nfunction findPartsForData(data, parts) {\n  for (var i = 0; i < parts.length; ++i) {\n    const part = parts[i];\n\n    if (data[part] === undefined) {\n      return undefined;\n    }\n\n    data = data[part];\n  }\n\n  if (typeof data !== \"string\") {\n    return undefined;\n  }\n\n  return data;\n}\n\nexport function t(path, replacement) {\n  const parts = path.split(\".\");\n  let translation = findPartsForData(currentLanguage.data, parts) || findPartsForData(fallbackLanguage.data, parts);\n\n  if (translation === undefined) {\n    throw new Error(`Can't find translation for ${path}`);\n  }\n\n  if (replacement) {\n    for (var key in replacement) {\n      translation = translation.replace(`{{${key}}}`, replacement[key]);\n    }\n  }\n\n  return translation;\n}\nconst languageDetector = new LanguageDetector();\nlanguageDetector.init({\n  languageUtils: {\n    formatLanguageCode: function (lng) {\n      return lng;\n    },\n    isWhitelisted: () => true\n  },\n  checkWhitelist: false\n});\nsetLanguage(languageDetector.detect());","map":{"version":3,"sources":["/home/pro/Solutions/drawboard-light/src/i18n.ts"],"names":["LanguageDetector","languages","lng","label","data","require","rtl","currentLanguage","fallbackLanguage","setLanguage","newLng","find","language","document","documentElement","dir","languageDetector","cacheUserLanguage","getLanguage","findPartsForData","parts","i","length","part","undefined","t","path","replacement","split","translation","Error","key","replace","init","languageUtils","formatLanguageCode","isWhitelisted","checkWhitelist","detect"],"mappings":"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","sourcesContent":["import LanguageDetector from \"i18next-browser-languagedetector\";\n\nexport const languages = [\n  { lng: \"en\", label: \"English\", data: require(\"./locales/en.json\") },\n  { lng: \"de-DE\", label: \"Deutsch\", data: require(\"./locales/de-DE.json\") },\n  { lng: \"es-ES\", label: \"Español\", data: require(\"./locales/es-ES.json\") },\n  { lng: \"el-GR\", label: \"Ελληνικά\", data: require(\"./locales/el-GR.json\") },\n  { lng: \"fr-FR\", label: \"Français\", data: require(\"./locales/fr-FR.json\") },\n  {\n    lng: \"id-ID\",\n    label: \"Bahasa Indonesia\",\n    data: require(\"./locales/id-ID.json\"),\n  },\n  { lng: \"it-IT\", label: \"Italiano\", data: require(\"./locales/it-IT.json\") },\n  { lng: \"hu-HU\", label: \"Magyar\", data: require(\"./locales/hu-HU.json\") },\n  { lng: \"nl-NL\", label: \"Nederlands\", data: require(\"./locales/nl-NL.json\") },\n  { lng: \"no-No\", label: \"Norsk\", data: require(\"./locales/no-NO.json\") },\n  { lng: \"pl-PL\", label: \"Polski\", data: require(\"./locales/pl-PL.json\") },\n  { lng: \"pt-PT\", label: \"Português\", data: require(\"./locales/pt-PT.json\") },\n  { lng: \"ru-RU\", label: \"Русский\", data: require(\"./locales/ru-RU.json\") },\n  { lng: \"tr-TR\", label: \"Türkçe\", data: require(\"./locales/tr-TR.json\") },\n  { lng: \"ko-KR\", label: \"한국어\", data: require(\"./locales/ko-KR.json\") },\n  { lng: \"zh-TW\", label: \"繁體中文\", data: require(\"./locales/zh-TW.json\") },\n  { lng: \"zh-CN\", label: \"简体中文\", data: require(\"./locales/zh-CN.json\") },\n  {\n    lng: \"ar-SA\",\n    label: \"العربية\",\n    data: require(\"./locales/ar-SA.json\"),\n    rtl: true,\n  },\n];\n\nlet currentLanguage = languages[0];\nconst fallbackLanguage = languages[0];\n\nexport function setLanguage(newLng: string | undefined) {\n  currentLanguage =\n    languages.find((language) => language.lng === newLng) || fallbackLanguage;\n\n  document.documentElement.dir = currentLanguage.rtl ? \"rtl\" : \"ltr\";\n\n  languageDetector.cacheUserLanguage(currentLanguage.lng);\n}\n\nexport function getLanguage() {\n  return currentLanguage;\n}\n\nfunction findPartsForData(data: any, parts: string[]) {\n  for (var i = 0; i < parts.length; ++i) {\n    const part = parts[i];\n    if (data[part] === undefined) {\n      return undefined;\n    }\n    data = data[part];\n  }\n  if (typeof data !== \"string\") {\n    return undefined;\n  }\n  return data;\n}\n\nexport function t(path: string, replacement?: { [key: string]: string }) {\n  const parts = path.split(\".\");\n  let translation =\n    findPartsForData(currentLanguage.data, parts) ||\n    findPartsForData(fallbackLanguage.data, parts);\n  if (translation === undefined) {\n    throw new Error(`Can't find translation for ${path}`);\n  }\n\n  if (replacement) {\n    for (var key in replacement) {\n      translation = translation.replace(`{{${key}}}`, replacement[key]);\n    }\n  }\n  return translation;\n}\n\nconst languageDetector = new LanguageDetector();\nlanguageDetector.init({\n  languageUtils: {\n    formatLanguageCode: function (lng: string) {\n      return lng;\n    },\n    isWhitelisted: () => true,\n  },\n  checkWhitelist: false,\n});\n\nsetLanguage(languageDetector.detect());\n"]},"metadata":{},"sourceType":"module"}