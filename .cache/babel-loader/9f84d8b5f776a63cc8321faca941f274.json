{"ast":null,"code":"import _objectSpread from \"/home/pro/Solutions/drawboard-light/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"/home/pro/Solutions/drawboard-light/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/pro/Solutions/drawboard-light/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { clearAppStatePropertiesForHistory } from \"./appState\";\nexport var SceneHistory =\n/*#__PURE__*/\nfunction () {\n  function SceneHistory() {\n    _classCallCheck(this, SceneHistory);\n\n    this.recording = true;\n    this.stateHistory = [];\n    this.redoStack = [];\n  }\n\n  _createClass(SceneHistory, [{\n    key: \"generateEntry\",\n    value: function generateEntry(appState, elements) {\n      return JSON.stringify({\n        appState: clearAppStatePropertiesForHistory(appState),\n        elements: elements.map(function (element) {\n          return _objectSpread({}, element, {\n            points: appState.multiElement && appState.multiElement.id === element.id ? element.points.slice(0, -1) : element.points\n          });\n        })\n      });\n    }\n  }, {\n    key: \"pushEntry\",\n    value: function pushEntry(appState, elements) {\n      var newEntry = this.generateEntry(appState, elements);\n\n      if (this.stateHistory.length > 0 && this.stateHistory[this.stateHistory.length - 1] === newEntry) {\n        // If the last entry is the same as this one, ignore it\n        return;\n      }\n\n      this.stateHistory.push(newEntry); // As a new entry was pushed, we invalidate the redo stack\n\n      this.clearRedoStack();\n    }\n  }, {\n    key: \"restoreEntry\",\n    value: function restoreEntry(entry) {\n      try {\n        return JSON.parse(entry);\n      } catch (_unused) {\n        return null;\n      }\n    }\n  }, {\n    key: \"clearRedoStack\",\n    value: function clearRedoStack() {\n      this.redoStack.splice(0, this.redoStack.length);\n    }\n  }, {\n    key: \"redoOnce\",\n    value: function redoOnce() {\n      if (this.redoStack.length === 0) {\n        return null;\n      }\n\n      var entryToRestore = this.redoStack.pop();\n\n      if (entryToRestore !== undefined) {\n        this.stateHistory.push(entryToRestore);\n        return this.restoreEntry(entryToRestore);\n      }\n\n      return null;\n    }\n  }, {\n    key: \"undoOnce\",\n    value: function undoOnce() {\n      if (this.stateHistory.length === 0) {\n        return null;\n      }\n\n      var currentEntry = this.stateHistory.pop();\n      var entryToRestore = this.stateHistory[this.stateHistory.length - 1];\n\n      if (currentEntry !== undefined) {\n        this.redoStack.push(currentEntry);\n        return this.restoreEntry(entryToRestore);\n      }\n\n      return null;\n    }\n  }, {\n    key: \"isRecording\",\n    value: function isRecording() {\n      return this.recording;\n    }\n  }, {\n    key: \"skipRecording\",\n    value: function skipRecording() {\n      this.recording = false;\n    }\n  }, {\n    key: \"resumeRecording\",\n    value: function resumeRecording() {\n      this.recording = true;\n    }\n  }]);\n\n  return SceneHistory;\n}();\nexport var createHistory = function createHistory() {\n  var history = new SceneHistory();\n  return {\n    history: history\n  };\n};","map":{"version":3,"sources":["/home/pro/Solutions/drawboard-light/src/history.ts"],"names":["clearAppStatePropertiesForHistory","SceneHistory","recording","stateHistory","redoStack","appState","elements","JSON","stringify","map","element","points","multiElement","id","slice","newEntry","generateEntry","length","push","clearRedoStack","entry","parse","splice","entryToRestore","pop","undefined","restoreEntry","currentEntry","createHistory","history"],"mappings":"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","sourcesContent":["import { AppState } from \"./types\";\nimport { ExcalidrawElement } from \"./element/types\";\nimport { clearAppStatePropertiesForHistory } from \"./appState\";\n\ntype Result = {\n  appState: AppState;\n  elements: ExcalidrawElement[];\n};\n\nexport class SceneHistory {\n  private recording: boolean = true;\n  private stateHistory: string[] = [];\n  private redoStack: string[] = [];\n\n  private generateEntry(\n    appState: AppState,\n    elements: readonly ExcalidrawElement[],\n  ) {\n    return JSON.stringify({\n      appState: clearAppStatePropertiesForHistory(appState),\n      elements: elements.map(element => ({\n        ...element,\n        points:\n          appState.multiElement && appState.multiElement.id === element.id\n            ? element.points.slice(0, -1)\n            : element.points,\n      })),\n    });\n  }\n\n  pushEntry(appState: AppState, elements: readonly ExcalidrawElement[]) {\n    const newEntry = this.generateEntry(appState, elements);\n    if (\n      this.stateHistory.length > 0 &&\n      this.stateHistory[this.stateHistory.length - 1] === newEntry\n    ) {\n      // If the last entry is the same as this one, ignore it\n      return;\n    }\n\n    this.stateHistory.push(newEntry);\n\n    // As a new entry was pushed, we invalidate the redo stack\n    this.clearRedoStack();\n  }\n\n  restoreEntry(entry: string) {\n    try {\n      return JSON.parse(entry);\n    } catch {\n      return null;\n    }\n  }\n\n  clearRedoStack() {\n    this.redoStack.splice(0, this.redoStack.length);\n  }\n\n  redoOnce(): Result | null {\n    if (this.redoStack.length === 0) {\n      return null;\n    }\n\n    const entryToRestore = this.redoStack.pop();\n\n    if (entryToRestore !== undefined) {\n      this.stateHistory.push(entryToRestore);\n      return this.restoreEntry(entryToRestore);\n    }\n\n    return null;\n  }\n\n  undoOnce(): Result | null {\n    if (this.stateHistory.length === 0) {\n      return null;\n    }\n\n    const currentEntry = this.stateHistory.pop();\n\n    const entryToRestore = this.stateHistory[this.stateHistory.length - 1];\n\n    if (currentEntry !== undefined) {\n      this.redoStack.push(currentEntry);\n      return this.restoreEntry(entryToRestore);\n    }\n\n    return null;\n  }\n\n  isRecording() {\n    return this.recording;\n  }\n\n  skipRecording() {\n    this.recording = false;\n  }\n\n  resumeRecording() {\n    this.recording = true;\n  }\n}\n\nexport const createHistory: () => { history: SceneHistory } = () => {\n  const history = new SceneHistory();\n  return { history };\n};\n"]},"metadata":{},"sourceType":"module"}