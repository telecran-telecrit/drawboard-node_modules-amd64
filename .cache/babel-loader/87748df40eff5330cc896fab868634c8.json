{"ast":null,"code":"import _slicedToArray from \"/home/pro/Solutions/drawboard-light/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { getElementAbsoluteCoords, hitTest } from \"../element\";\nexport var hasBackground = function hasBackground(type) {\n  return type === \"rectangle\" || type === \"ellipse\" || type === \"diamond\";\n};\nexport var hasStroke = function hasStroke(type) {\n  return type === \"rectangle\" || type === \"ellipse\" || type === \"diamond\" || type === \"arrow\" || type === \"line\";\n};\nexport var hasText = function hasText(type) {\n  return type === \"text\";\n};\nexport function getElementAtPosition(elements, appState, x, y, zoom) {\n  var hitElement = null; // We need to to hit testing from front (end of the array) to back (beginning of the array)\n\n  for (var i = elements.length - 1; i >= 0; --i) {\n    if (hitTest(elements[i], appState, x, y, zoom)) {\n      hitElement = elements[i];\n      break;\n    }\n  }\n\n  return hitElement;\n}\nexport function getElementContainingPosition(elements, x, y) {\n  var hitElement = null; // We need to to hit testing from front (end of the array) to back (beginning of the array)\n\n  for (var i = elements.length - 1; i >= 0; --i) {\n    var _getElementAbsoluteCo = getElementAbsoluteCoords(elements[i]),\n        _getElementAbsoluteCo2 = _slicedToArray(_getElementAbsoluteCo, 4),\n        x1 = _getElementAbsoluteCo2[0],\n        y1 = _getElementAbsoluteCo2[1],\n        x2 = _getElementAbsoluteCo2[2],\n        y2 = _getElementAbsoluteCo2[3];\n\n    if (x1 < x && x < x2 && y1 < y && y < y2) {\n      hitElement = elements[i];\n      break;\n    }\n  }\n\n  return hitElement;\n}","map":{"version":3,"sources":["/home/pro/Solutions/drawboard-light/src/scene/comparisons.ts"],"names":["getElementAbsoluteCoords","hitTest","hasBackground","type","hasStroke","hasText","getElementAtPosition","elements","appState","x","y","zoom","hitElement","i","length","getElementContainingPosition","x1","y1","x2","y2"],"mappings":";AAEA,SAASA,wBAAT,EAAmCC,OAAnC,QAAkD,YAAlD;AAGA,OAAO,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACC,IAAD;AAAA,SAC3BA,IAAI,KAAK,WAAT,IAAwBA,IAAI,KAAK,SAAjC,IAA8CA,IAAI,KAAK,SAD5B;AAAA,CAAtB;AAGP,OAAO,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAACD,IAAD;AAAA,SACvBA,IAAI,KAAK,WAAT,IACAA,IAAI,KAAK,SADT,IAEAA,IAAI,KAAK,SAFT,IAGAA,IAAI,KAAK,OAHT,IAIAA,IAAI,KAAK,MALc;AAAA,CAAlB;AAOP,OAAO,IAAME,OAAO,GAAG,SAAVA,OAAU,CAACF,IAAD;AAAA,SAAkBA,IAAI,KAAK,MAA3B;AAAA,CAAhB;AAEP,OAAO,SAASG,oBAAT,CACLC,QADK,EAELC,QAFK,EAGLC,CAHK,EAILC,CAJK,EAKLC,IALK,EAML;AACA,MAAIC,UAAU,GAAG,IAAjB,CADA,CAEA;;AACA,OAAK,IAAIC,CAAC,GAAGN,QAAQ,CAACO,MAAT,GAAkB,CAA/B,EAAkCD,CAAC,IAAI,CAAvC,EAA0C,EAAEA,CAA5C,EAA+C;AAC7C,QAAIZ,OAAO,CAACM,QAAQ,CAACM,CAAD,CAAT,EAAcL,QAAd,EAAwBC,CAAxB,EAA2BC,CAA3B,EAA8BC,IAA9B,CAAX,EAAgD;AAC9CC,MAAAA,UAAU,GAAGL,QAAQ,CAACM,CAAD,CAArB;AACA;AACD;AACF;;AAED,SAAOD,UAAP;AACD;AAED,OAAO,SAASG,4BAAT,CACLR,QADK,EAELE,CAFK,EAGLC,CAHK,EAIL;AACA,MAAIE,UAAU,GAAG,IAAjB,CADA,CAEA;;AACA,OAAK,IAAIC,CAAC,GAAGN,QAAQ,CAACO,MAAT,GAAkB,CAA/B,EAAkCD,CAAC,IAAI,CAAvC,EAA0C,EAAEA,CAA5C,EAA+C;AAAA,gCACpBb,wBAAwB,CAACO,QAAQ,CAACM,CAAD,CAAT,CADJ;AAAA;AAAA,QACtCG,EADsC;AAAA,QAClCC,EADkC;AAAA,QAC9BC,EAD8B;AAAA,QAC1BC,EAD0B;;AAE7C,QAAIH,EAAE,GAAGP,CAAL,IAAUA,CAAC,GAAGS,EAAd,IAAoBD,EAAE,GAAGP,CAAzB,IAA8BA,CAAC,GAAGS,EAAtC,EAA0C;AACxCP,MAAAA,UAAU,GAAGL,QAAQ,CAACM,CAAD,CAArB;AACA;AACD;AACF;;AACD,SAAOD,UAAP;AACD","sourcesContent":["import { ExcalidrawElement } from \"../element/types\";\n\nimport { getElementAbsoluteCoords, hitTest } from \"../element\";\nimport { AppState } from \"../types\";\n\nexport const hasBackground = (type: string) =>\n  type === \"rectangle\" || type === \"ellipse\" || type === \"diamond\";\n\nexport const hasStroke = (type: string) =>\n  type === \"rectangle\" ||\n  type === \"ellipse\" ||\n  type === \"diamond\" ||\n  type === \"arrow\" ||\n  type === \"line\";\n\nexport const hasText = (type: string) => type === \"text\";\n\nexport function getElementAtPosition(\n  elements: readonly ExcalidrawElement[],\n  appState: AppState,\n  x: number,\n  y: number,\n  zoom: number,\n) {\n  let hitElement = null;\n  // We need to to hit testing from front (end of the array) to back (beginning of the array)\n  for (let i = elements.length - 1; i >= 0; --i) {\n    if (hitTest(elements[i], appState, x, y, zoom)) {\n      hitElement = elements[i];\n      break;\n    }\n  }\n\n  return hitElement;\n}\n\nexport function getElementContainingPosition(\n  elements: readonly ExcalidrawElement[],\n  x: number,\n  y: number,\n) {\n  let hitElement = null;\n  // We need to to hit testing from front (end of the array) to back (beginning of the array)\n  for (let i = elements.length - 1; i >= 0; --i) {\n    const [x1, y1, x2, y2] = getElementAbsoluteCoords(elements[i]);\n    if (x1 < x && x < x2 && y1 < y && y < y2) {\n      hitElement = elements[i];\n      break;\n    }\n  }\n  return hitElement;\n}\n"]},"metadata":{},"sourceType":"module"}