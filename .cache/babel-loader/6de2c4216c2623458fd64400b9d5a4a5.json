{"ast":null,"code":"import _objectSpread from \"/home/pro/Solutions/drawboard-light/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/home/pro/Solutions/drawboard-light/src/actions/actionHistory.tsx\";\nimport React from \"react\";\nimport { undo, redo } from \"../components/icons\";\nimport { ToolButton } from \"../components/ToolButton\";\nimport { t } from \"../i18n\";\nimport { KEYS } from \"../keys\";\n\nvar writeData = function writeData(appState, updater) {\n  if (!appState.multiElement && !appState.resizingElement && !appState.editingElement && !appState.draggingElement) {\n    var data = updater();\n    return data === null ? {} : {\n      elements: data.elements,\n      appState: _objectSpread({}, appState, {}, data.appState)\n    };\n  }\n\n  return {};\n};\n\nvar testUndo = function testUndo(shift) {\n  return function (event) {\n    return event[KEYS.CTRL_OR_CMD] && /z/i.test(event.key) && event.shiftKey === shift;\n  };\n};\n\nexport var createUndoAction = function createUndoAction(history) {\n  return {\n    name: \"undo\",\n    perform: function perform(_, appState) {\n      return writeData(appState, function () {\n        return history.undoOnce();\n      });\n    },\n    keyTest: testUndo(false),\n    PanelComponent: function PanelComponent(_ref) {\n      var updateData = _ref.updateData;\n      return React.createElement(ToolButton, {\n        type: \"button\",\n        icon: undo,\n        \"aria-label\": t(\"buttons.undo\"),\n        onClick: updateData,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      });\n    },\n    commitToHistory: function commitToHistory() {\n      return false;\n    }\n  };\n};\nexport var createRedoAction = function createRedoAction(history) {\n  return {\n    name: \"redo\",\n    perform: function perform(_, appState) {\n      return writeData(appState, function () {\n        return history.redoOnce();\n      });\n    },\n    keyTest: testUndo(true),\n    PanelComponent: function PanelComponent(_ref2) {\n      var updateData = _ref2.updateData;\n      return React.createElement(ToolButton, {\n        type: \"button\",\n        icon: redo,\n        \"aria-label\": t(\"buttons.redo\"),\n        onClick: updateData,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      });\n    },\n    commitToHistory: function commitToHistory() {\n      return false;\n    }\n  };\n};","map":{"version":3,"sources":["/home/pro/Solutions/drawboard-light/src/actions/actionHistory.tsx"],"names":["React","undo","redo","ToolButton","t","KEYS","writeData","appState","updater","multiElement","resizingElement","editingElement","draggingElement","data","elements","testUndo","shift","event","CTRL_OR_CMD","test","key","shiftKey","createUndoAction","history","name","perform","_","undoOnce","keyTest","PanelComponent","updateData","commitToHistory","createRedoAction","redoOnce"],"mappings":";;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,EAAeC,IAAf,QAA2B,qBAA3B;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,SAASC,CAAT,QAAkB,SAAlB;AAIA,SAASC,IAAT,QAAqB,SAArB;;AAEA,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAChBC,QADgB,EAEhBC,OAFgB,EAGb;AACH,MACE,CAACD,QAAQ,CAACE,YAAV,IACA,CAACF,QAAQ,CAACG,eADV,IAEA,CAACH,QAAQ,CAACI,cAFV,IAGA,CAACJ,QAAQ,CAACK,eAJZ,EAKE;AACA,QAAMC,IAAI,GAAGL,OAAO,EAApB;AAEA,WAAOK,IAAI,KAAK,IAAT,GACH,EADG,GAEH;AACEC,MAAAA,QAAQ,EAAED,IAAI,CAACC,QADjB;AAEEP,MAAAA,QAAQ,oBAAOA,QAAP,MAAoBM,IAAI,CAACN,QAAzB;AAFV,KAFJ;AAMD;;AACD,SAAO,EAAP;AACD,CApBD;;AAsBA,IAAMQ,QAAQ,GAAG,SAAXA,QAAW,CAACC,KAAD;AAAA,SAAoB,UAACC,KAAD;AAAA,WACnCA,KAAK,CAACZ,IAAI,CAACa,WAAN,CAAL,IAA2B,KAAKC,IAAL,CAAUF,KAAK,CAACG,GAAhB,CAA3B,IAAmDH,KAAK,CAACI,QAAN,KAAmBL,KADnC;AAAA,GAApB;AAAA,CAAjB;;AAKA,OAAO,IAAMM,gBAA+B,GAAG,SAAlCA,gBAAkC,CAAAC,OAAO;AAAA,SAAK;AACzDC,IAAAA,IAAI,EAAE,MADmD;AAEzDC,IAAAA,OAAO,EAAE,iBAACC,CAAD,EAAInB,QAAJ;AAAA,aAAiBD,SAAS,CAACC,QAAD,EAAW;AAAA,eAAMgB,OAAO,CAACI,QAAR,EAAN;AAAA,OAAX,CAA1B;AAAA,KAFgD;AAGzDC,IAAAA,OAAO,EAAEb,QAAQ,CAAC,KAAD,CAHwC;AAIzDc,IAAAA,cAAc,EAAE;AAAA,UAAGC,UAAH,QAAGA,UAAH;AAAA,aACd,oBAAC,UAAD;AACE,QAAA,IAAI,EAAC,QADP;AAEE,QAAA,IAAI,EAAE7B,IAFR;AAGE,sBAAYG,CAAC,CAAC,cAAD,CAHf;AAIE,QAAA,OAAO,EAAE0B,UAJX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADc;AAAA,KAJyC;AAYzDC,IAAAA,eAAe,EAAE;AAAA,aAAM,KAAN;AAAA;AAZwC,GAAL;AAAA,CAA/C;AAeP,OAAO,IAAMC,gBAA+B,GAAG,SAAlCA,gBAAkC,CAAAT,OAAO;AAAA,SAAK;AACzDC,IAAAA,IAAI,EAAE,MADmD;AAEzDC,IAAAA,OAAO,EAAE,iBAACC,CAAD,EAAInB,QAAJ;AAAA,aAAiBD,SAAS,CAACC,QAAD,EAAW;AAAA,eAAMgB,OAAO,CAACU,QAAR,EAAN;AAAA,OAAX,CAA1B;AAAA,KAFgD;AAGzDL,IAAAA,OAAO,EAAEb,QAAQ,CAAC,IAAD,CAHwC;AAIzDc,IAAAA,cAAc,EAAE;AAAA,UAAGC,UAAH,SAAGA,UAAH;AAAA,aACd,oBAAC,UAAD;AACE,QAAA,IAAI,EAAC,QADP;AAEE,QAAA,IAAI,EAAE5B,IAFR;AAGE,sBAAYE,CAAC,CAAC,cAAD,CAHf;AAIE,QAAA,OAAO,EAAE0B,UAJX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADc;AAAA,KAJyC;AAYzDC,IAAAA,eAAe,EAAE;AAAA,aAAM,KAAN;AAAA;AAZwC,GAAL;AAAA,CAA/C","sourcesContent":["import { Action } from \"./types\";\nimport React from \"react\";\nimport { undo, redo } from \"../components/icons\";\nimport { ToolButton } from \"../components/ToolButton\";\nimport { t } from \"../i18n\";\nimport { SceneHistory } from \"../history\";\nimport { ExcalidrawElement } from \"../element/types\";\nimport { AppState } from \"../types\";\nimport { KEYS } from \"../keys\";\n\nconst writeData = (\n  appState: AppState,\n  updater: () => { elements: ExcalidrawElement[]; appState: AppState } | null,\n) => {\n  if (\n    !appState.multiElement &&\n    !appState.resizingElement &&\n    !appState.editingElement &&\n    !appState.draggingElement\n  ) {\n    const data = updater();\n\n    return data === null\n      ? {}\n      : {\n          elements: data.elements,\n          appState: { ...appState, ...data.appState },\n        };\n  }\n  return {};\n};\n\nconst testUndo = (shift: boolean) => (event: KeyboardEvent) =>\n  event[KEYS.CTRL_OR_CMD] && /z/i.test(event.key) && event.shiftKey === shift;\n\ntype ActionCreator = (history: SceneHistory) => Action;\n\nexport const createUndoAction: ActionCreator = history => ({\n  name: \"undo\",\n  perform: (_, appState) => writeData(appState, () => history.undoOnce()),\n  keyTest: testUndo(false),\n  PanelComponent: ({ updateData }) => (\n    <ToolButton\n      type=\"button\"\n      icon={undo}\n      aria-label={t(\"buttons.undo\")}\n      onClick={updateData}\n    />\n  ),\n  commitToHistory: () => false,\n});\n\nexport const createRedoAction: ActionCreator = history => ({\n  name: \"redo\",\n  perform: (_, appState) => writeData(appState, () => history.redoOnce()),\n  keyTest: testUndo(true),\n  PanelComponent: ({ updateData }) => (\n    <ToolButton\n      type=\"button\"\n      icon={redo}\n      aria-label={t(\"buttons.redo\")}\n      onClick={updateData}\n    />\n  ),\n  commitToHistory: () => false,\n});\n"]},"metadata":{},"sourceType":"module"}