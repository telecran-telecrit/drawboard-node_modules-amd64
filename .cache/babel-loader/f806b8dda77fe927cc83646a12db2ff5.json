{"ast":null,"code":"import { invalidateShapeForElement } from \"../renderer/renderElement\";\nexport function isInvisiblySmallElement(element) {\n  if (element.type === \"arrow\" || element.type === \"line\") {\n    return element.points.length < 2;\n  }\n\n  return element.width === 0 && element.height === 0;\n}\n/**\n * Makes a perfect shape or diagonal/horizontal/vertical line\n */\n\nexport function getPerfectElementSize(elementType, width, height) {\n  var absWidth = Math.abs(width);\n  var absHeight = Math.abs(height);\n\n  if (elementType === \"line\" || elementType === \"arrow\") {\n    if (absHeight < absWidth / 2) {\n      height = 0;\n    } else if (absWidth < absHeight / 2) {\n      width = 0;\n    } else {\n      height = absWidth * Math.sign(height);\n    }\n  } else if (elementType !== \"selection\") {\n    height = absWidth * Math.sign(height);\n  }\n\n  return {\n    width: width,\n    height: height\n  };\n}\nexport function resizePerfectLineForNWHandler(element, x, y) {\n  var anchorX = element.x + element.width;\n  var anchorY = element.y + element.height;\n  var distanceToAnchorX = x - anchorX;\n  var distanceToAnchorY = y - anchorY;\n\n  if (Math.abs(distanceToAnchorX) < Math.abs(distanceToAnchorY) / 2) {\n    element.x = anchorX;\n    element.width = 0;\n    element.y = y;\n    element.height = -distanceToAnchorY;\n  } else if (Math.abs(distanceToAnchorY) < Math.abs(element.width) / 2) {\n    element.y = anchorY;\n    element.height = 0;\n  } else {\n    element.x = x;\n    element.width = -distanceToAnchorX;\n    element.height = Math.sign(distanceToAnchorY) * Math.sign(distanceToAnchorX) * element.width;\n    element.y = anchorY - element.height;\n  }\n}\n/**\n * @returns {boolean} whether element was normalized\n */\n\nexport function normalizeDimensions(element) {\n  if (!element || element.width >= 0 && element.height >= 0 || element.type === \"line\" || element.type === \"arrow\") {\n    return false;\n  }\n\n  if (element.width < 0) {\n    element.width = Math.abs(element.width);\n    element.x -= element.width;\n  }\n\n  if (element.height < 0) {\n    element.height = Math.abs(element.height);\n    element.y -= element.height;\n  }\n\n  invalidateShapeForElement(element);\n  return true;\n}","map":{"version":3,"sources":["/home/pro/Solutions/drawboard-light/src/element/sizeHelpers.ts"],"names":["invalidateShapeForElement","isInvisiblySmallElement","element","type","points","length","width","height","getPerfectElementSize","elementType","absWidth","Math","abs","absHeight","sign","resizePerfectLineForNWHandler","x","y","anchorX","anchorY","distanceToAnchorX","distanceToAnchorY","normalizeDimensions"],"mappings":"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","sourcesContent":["import { ExcalidrawElement } from \"./types\";\nimport { invalidateShapeForElement } from \"../renderer/renderElement\";\n\nexport function isInvisiblySmallElement(element: ExcalidrawElement): boolean {\n  if (element.type === \"arrow\" || element.type === \"line\") {\n    return element.points.length < 2;\n  }\n  return element.width === 0 && element.height === 0;\n}\n\n/**\n * Makes a perfect shape or diagonal/horizontal/vertical line\n */\nexport function getPerfectElementSize(\n  elementType: string,\n  width: number,\n  height: number,\n): { width: number; height: number } {\n  const absWidth = Math.abs(width);\n  const absHeight = Math.abs(height);\n\n  if (elementType === \"line\" || elementType === \"arrow\") {\n    if (absHeight < absWidth / 2) {\n      height = 0;\n    } else if (absWidth < absHeight / 2) {\n      width = 0;\n    } else {\n      height = absWidth * Math.sign(height);\n    }\n  } else if (elementType !== \"selection\") {\n    height = absWidth * Math.sign(height);\n  }\n\n  return { width, height };\n}\n\nexport function resizePerfectLineForNWHandler(\n  element: ExcalidrawElement,\n  x: number,\n  y: number,\n) {\n  const anchorX = element.x + element.width;\n  const anchorY = element.y + element.height;\n  const distanceToAnchorX = x - anchorX;\n  const distanceToAnchorY = y - anchorY;\n  if (Math.abs(distanceToAnchorX) < Math.abs(distanceToAnchorY) / 2) {\n    element.x = anchorX;\n    element.width = 0;\n    element.y = y;\n    element.height = -distanceToAnchorY;\n  } else if (Math.abs(distanceToAnchorY) < Math.abs(element.width) / 2) {\n    element.y = anchorY;\n    element.height = 0;\n  } else {\n    element.x = x;\n    element.width = -distanceToAnchorX;\n    element.height =\n      Math.sign(distanceToAnchorY) *\n      Math.sign(distanceToAnchorX) *\n      element.width;\n    element.y = anchorY - element.height;\n  }\n}\n\n/**\n * @returns {boolean} whether element was normalized\n */\nexport function normalizeDimensions(\n  element: ExcalidrawElement | null,\n): element is ExcalidrawElement {\n  if (\n    !element ||\n    (element.width >= 0 && element.height >= 0) ||\n    element.type === \"line\" ||\n    element.type === \"arrow\"\n  ) {\n    return false;\n  }\n\n  if (element.width < 0) {\n    element.width = Math.abs(element.width);\n    element.x -= element.width;\n  }\n\n  if (element.height < 0) {\n    element.height = Math.abs(element.height);\n    element.y -= element.height;\n  }\n\n  invalidateShapeForElement(element);\n\n  return true;\n}\n"]},"metadata":{},"sourceType":"module"}