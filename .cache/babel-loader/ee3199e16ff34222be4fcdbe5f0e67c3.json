{"ast":null,"code":"import { handlerRectangles } from \"./handlerRectangles\";\nexport function resizeTest(element, appState, x, y, zoom, pointerType) {\n  if (!appState.selectedElementIds[element.id] || element.type === \"text\") {\n    return false;\n  }\n\n  var handlers = handlerRectangles(element, zoom, pointerType);\n  var filter = Object.keys(handlers).filter(function (key) {\n    var handler = handlers[key];\n\n    if (!handler) {\n      return false;\n    }\n\n    return x >= handler[0] && x <= handler[0] + handler[2] && y >= handler[1] && y <= handler[1] + handler[3];\n  });\n\n  if (filter.length > 0) {\n    return filter[0];\n  }\n\n  return false;\n}\nexport function getElementWithResizeHandler(elements, appState, _ref, zoom, pointerType) {\n  var x = _ref.x,\n      y = _ref.y;\n  return elements.reduce(function (result, element) {\n    if (result) {\n      return result;\n    }\n\n    var resizeHandle = resizeTest(element, appState, x, y, zoom, pointerType);\n    return resizeHandle ? {\n      element: element,\n      resizeHandle: resizeHandle\n    } : null;\n  }, null);\n}\n/*\n * Returns bi-directional cursor for the element being resized\n */\n\nexport function getCursorForResizingElement(resizingElement) {\n  var element = resizingElement.element,\n      resizeHandle = resizingElement.resizeHandle;\n  var shouldSwapCursors = Math.sign(element.height) * Math.sign(element.width) === -1;\n  var cursor = null;\n\n  switch (resizeHandle) {\n    case \"n\":\n    case \"s\":\n      cursor = \"ns\";\n      break;\n\n    case \"w\":\n    case \"e\":\n      cursor = \"ew\";\n      break;\n\n    case \"nw\":\n    case \"se\":\n      if (shouldSwapCursors) {\n        cursor = \"nesw\";\n      } else {\n        cursor = \"nwse\";\n      }\n\n      break;\n\n    case \"ne\":\n    case \"sw\":\n      if (shouldSwapCursors) {\n        cursor = \"nwse\";\n      } else {\n        cursor = \"nesw\";\n      }\n\n      break;\n  }\n\n  return cursor ? \"\".concat(cursor, \"-resize\") : \"\";\n}\nexport function normalizeResizeHandle(element, resizeHandle) {\n  if (element.width >= 0 && element.height >= 0 || element.type === \"line\" || element.type === \"arrow\") {\n    return resizeHandle;\n  }\n\n  if (element.width < 0 && element.height < 0) {\n    switch (resizeHandle) {\n      case \"nw\":\n        return \"se\";\n\n      case \"ne\":\n        return \"sw\";\n\n      case \"se\":\n        return \"nw\";\n\n      case \"sw\":\n        return \"ne\";\n    }\n  } else if (element.width < 0) {\n    switch (resizeHandle) {\n      case \"nw\":\n        return \"ne\";\n\n      case \"ne\":\n        return \"nw\";\n\n      case \"se\":\n        return \"sw\";\n\n      case \"sw\":\n        return \"se\";\n\n      case \"e\":\n        return \"w\";\n\n      case \"w\":\n        return \"e\";\n    }\n  } else {\n    switch (resizeHandle) {\n      case \"nw\":\n        return \"sw\";\n\n      case \"ne\":\n        return \"se\";\n\n      case \"se\":\n        return \"ne\";\n\n      case \"sw\":\n        return \"nw\";\n\n      case \"n\":\n        return \"s\";\n\n      case \"s\":\n        return \"n\";\n    }\n  }\n\n  return resizeHandle;\n}","map":{"version":3,"sources":["/home/pro/Solutions/drawboard-light/src/element/resizeTest.ts"],"names":["handlerRectangles","resizeTest","element","appState","x","y","zoom","pointerType","selectedElementIds","id","type","handlers","filter","Object","keys","key","handler","length","getElementWithResizeHandler","elements","reduce","result","resizeHandle","getCursorForResizingElement","resizingElement","shouldSwapCursors","Math","sign","height","width","cursor","normalizeResizeHandle"],"mappings":"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","sourcesContent":["import { ExcalidrawElement, PointerType } from \"./types\";\n\nimport { handlerRectangles } from \"./handlerRectangles\";\nimport { AppState } from \"../types\";\n\ntype HandlerRectanglesRet = keyof ReturnType<typeof handlerRectangles>;\n\nexport function resizeTest(\n  element: ExcalidrawElement,\n  appState: AppState,\n  x: number,\n  y: number,\n  zoom: number,\n  pointerType: PointerType,\n): HandlerRectanglesRet | false {\n  if (!appState.selectedElementIds[element.id] || element.type === \"text\") {\n    return false;\n  }\n\n  const handlers = handlerRectangles(element, zoom, pointerType);\n\n  const filter = Object.keys(handlers).filter(key => {\n    const handler = handlers[key as HandlerRectanglesRet]!;\n    if (!handler) {\n      return false;\n    }\n\n    return (\n      x >= handler[0] &&\n      x <= handler[0] + handler[2] &&\n      y >= handler[1] &&\n      y <= handler[1] + handler[3]\n    );\n  });\n\n  if (filter.length > 0) {\n    return filter[0] as HandlerRectanglesRet;\n  }\n\n  return false;\n}\n\nexport function getElementWithResizeHandler(\n  elements: readonly ExcalidrawElement[],\n  appState: AppState,\n  { x, y }: { x: number; y: number },\n  zoom: number,\n  pointerType: PointerType,\n) {\n  return elements.reduce((result, element) => {\n    if (result) {\n      return result;\n    }\n    const resizeHandle = resizeTest(element, appState, x, y, zoom, pointerType);\n    return resizeHandle ? { element, resizeHandle } : null;\n  }, null as { element: ExcalidrawElement; resizeHandle: ReturnType<typeof resizeTest> } | null);\n}\n\n/*\n * Returns bi-directional cursor for the element being resized\n */\nexport function getCursorForResizingElement(resizingElement: {\n  element: ExcalidrawElement;\n  resizeHandle: ReturnType<typeof resizeTest>;\n}): string {\n  const { element, resizeHandle } = resizingElement;\n  const shouldSwapCursors =\n    Math.sign(element.height) * Math.sign(element.width) === -1;\n  let cursor = null;\n\n  switch (resizeHandle) {\n    case \"n\":\n    case \"s\":\n      cursor = \"ns\";\n      break;\n    case \"w\":\n    case \"e\":\n      cursor = \"ew\";\n      break;\n    case \"nw\":\n    case \"se\":\n      if (shouldSwapCursors) {\n        cursor = \"nesw\";\n      } else {\n        cursor = \"nwse\";\n      }\n      break;\n    case \"ne\":\n    case \"sw\":\n      if (shouldSwapCursors) {\n        cursor = \"nwse\";\n      } else {\n        cursor = \"nesw\";\n      }\n      break;\n  }\n\n  return cursor ? `${cursor}-resize` : \"\";\n}\n\nexport function normalizeResizeHandle(\n  element: ExcalidrawElement,\n  resizeHandle: HandlerRectanglesRet,\n): HandlerRectanglesRet {\n  if (\n    (element.width >= 0 && element.height >= 0) ||\n    element.type === \"line\" ||\n    element.type === \"arrow\"\n  ) {\n    return resizeHandle;\n  }\n\n  if (element.width < 0 && element.height < 0) {\n    switch (resizeHandle) {\n      case \"nw\":\n        return \"se\";\n      case \"ne\":\n        return \"sw\";\n      case \"se\":\n        return \"nw\";\n      case \"sw\":\n        return \"ne\";\n    }\n  } else if (element.width < 0) {\n    switch (resizeHandle) {\n      case \"nw\":\n        return \"ne\";\n      case \"ne\":\n        return \"nw\";\n      case \"se\":\n        return \"sw\";\n      case \"sw\":\n        return \"se\";\n      case \"e\":\n        return \"w\";\n      case \"w\":\n        return \"e\";\n    }\n  } else {\n    switch (resizeHandle) {\n      case \"nw\":\n        return \"sw\";\n      case \"ne\":\n        return \"se\";\n      case \"se\":\n        return \"ne\";\n      case \"sw\":\n        return \"nw\";\n      case \"n\":\n        return \"s\";\n      case \"s\":\n        return \"n\";\n    }\n  }\n\n  return resizeHandle;\n}\n"]},"metadata":{},"sourceType":"module"}