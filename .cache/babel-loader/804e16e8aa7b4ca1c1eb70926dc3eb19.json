{"ast":null,"code":"(function (root, factory) {\n  'use strict'; // Universal Module Definition (UMD) to support AMD, CommonJS/Node.js, Rhino, and browsers.\n\n  /* istanbul ignore next */\n\n  if (typeof define === 'function' && define.amd) {\n    define('stacktrace-gps', ['source-map', 'stackframe'], factory);\n  } else if (typeof exports === 'object') {\n    module.exports = factory(require('source-map/lib/source-map-consumer'), require('stackframe'));\n  } else {\n    root.StackTraceGPS = factory(root.SourceMap || root.sourceMap, root.StackFrame);\n  }\n})(this, function (SourceMap, StackFrame) {\n  'use strict';\n  /**\n   * Make a X-Domain request to url and callback.\n   *\n   * @param {String} url\n   * @returns {Promise} with response text if fulfilled\n   */\n\n  function _xdr(url) {\n    return new Promise(function (resolve, reject) {\n      var req = new XMLHttpRequest();\n      req.open('get', url);\n      req.onerror = reject;\n\n      req.onreadystatechange = function onreadystatechange() {\n        if (req.readyState === 4) {\n          if (req.status >= 200 && req.status < 300 || url.substr(0, 7) === 'file://' && req.responseText) {\n            resolve(req.responseText);\n          } else {\n            reject(new Error('HTTP status: ' + req.status + ' retrieving ' + url));\n          }\n        }\n      };\n\n      req.send();\n    });\n  }\n  /**\n   * Convert a Base64-encoded string into its original representation.\n   * Used for inline sourcemaps.\n   *\n   * @param {String} b64str Base-64 encoded string\n   * @returns {String} original representation of the base64-encoded string.\n   */\n\n\n  function _atob(b64str) {\n    if (typeof window !== 'undefined' && window.atob) {\n      return window.atob(b64str);\n    } else {\n      throw new Error('You must supply a polyfill for window.atob in this environment');\n    }\n  }\n\n  function _parseJson(string) {\n    if (typeof JSON !== 'undefined' && JSON.parse) {\n      return JSON.parse(string);\n    } else {\n      throw new Error('You must supply a polyfill for JSON.parse in this environment');\n    }\n  }\n\n  function _findFunctionName(source, lineNumber\n  /*, columnNumber*/\n  ) {\n    var syntaxes = [// {name} = function ({args}) TODO args capture\n    /['\"]?([$_A-Za-z][$_A-Za-z0-9]*)['\"]?\\s*[:=]\\s*function\\b/, // function {name}({args}) m[1]=name m[2]=args\n    /function\\s+([^('\"`]*?)\\s*\\(([^)]*)\\)/, // {name} = eval()\n    /['\"]?([$_A-Za-z][$_A-Za-z0-9]*)['\"]?\\s*[:=]\\s*(?:eval|new Function)\\b/, // fn_name() {\n    /\\b(?!(?:if|for|switch|while|with|catch)\\b)(?:(?:static)\\s+)?(\\S+)\\s*\\(.*?\\)\\s*\\{/, // {name} = () => {\n    /['\"]?([$_A-Za-z][$_A-Za-z0-9]*)['\"]?\\s*[:=]\\s*\\(.*?\\)\\s*=>/];\n    var lines = source.split('\\n'); // Walk backwards in the source lines until we find the line which matches one of the patterns above\n\n    var code = '';\n    var maxLines = Math.min(lineNumber, 20);\n\n    for (var i = 0; i < maxLines; ++i) {\n      // lineNo is 1-based, source[] is 0-based\n      var line = lines[lineNumber - i - 1];\n      var commentPos = line.indexOf('//');\n\n      if (commentPos >= 0) {\n        line = line.substr(0, commentPos);\n      }\n\n      if (line) {\n        code = line + code;\n        var len = syntaxes.length;\n\n        for (var index = 0; index < len; index++) {\n          var m = syntaxes[index].exec(code);\n\n          if (m && m[1]) {\n            return m[1];\n          }\n        }\n      }\n    }\n\n    return undefined;\n  }\n\n  function _ensureSupportedEnvironment() {\n    if (typeof Object.defineProperty !== 'function' || typeof Object.create !== 'function') {\n      throw new Error('Unable to consume source maps in older browsers');\n    }\n  }\n\n  function _ensureStackFrameIsLegit(stackframe) {\n    if (typeof stackframe !== 'object') {\n      throw new TypeError('Given StackFrame is not an object');\n    } else if (typeof stackframe.fileName !== 'string') {\n      throw new TypeError('Given file name is not a String');\n    } else if (typeof stackframe.lineNumber !== 'number' || stackframe.lineNumber % 1 !== 0 || stackframe.lineNumber < 1) {\n      throw new TypeError('Given line number must be a positive integer');\n    } else if (typeof stackframe.columnNumber !== 'number' || stackframe.columnNumber % 1 !== 0 || stackframe.columnNumber < 0) {\n      throw new TypeError('Given column number must be a non-negative integer');\n    }\n\n    return true;\n  }\n\n  function _findSourceMappingURL(source) {\n    var sourceMappingUrlRegExp = /\\/\\/[#@] ?sourceMappingURL=([^\\s'\"]+)\\s*$/mg;\n    var lastSourceMappingUrl;\n    var matchSourceMappingUrl; // eslint-disable-next-line no-cond-assign\n\n    while (matchSourceMappingUrl = sourceMappingUrlRegExp.exec(source)) {\n      lastSourceMappingUrl = matchSourceMappingUrl[1];\n    }\n\n    if (lastSourceMappingUrl) {\n      return lastSourceMappingUrl;\n    } else {\n      throw new Error('sourceMappingURL not found');\n    }\n  }\n\n  function _extractLocationInfoFromSourceMapSource(stackframe, sourceMapConsumer, sourceCache) {\n    return new Promise(function (resolve, reject) {\n      var loc = sourceMapConsumer.originalPositionFor({\n        line: stackframe.lineNumber,\n        column: stackframe.columnNumber\n      });\n\n      if (loc.source) {\n        // cache mapped sources\n        var mappedSource = sourceMapConsumer.sourceContentFor(loc.source);\n\n        if (mappedSource) {\n          sourceCache[loc.source] = mappedSource;\n        }\n\n        resolve( // given stackframe and source location, update stackframe\n        new StackFrame({\n          functionName: loc.name || stackframe.functionName,\n          args: stackframe.args,\n          fileName: loc.source,\n          lineNumber: loc.line,\n          columnNumber: loc.column\n        }));\n      } else {\n        reject(new Error('Could not get original source for given stackframe and source map'));\n      }\n    });\n  }\n  /**\n   * @constructor\n   * @param {Object} opts\n   *      opts.sourceCache = {url: \"Source String\"} => preload source cache\n   *      opts.sourceMapConsumerCache = {/path/file.js.map: SourceMapConsumer}\n   *      opts.offline = True to prevent network requests.\n   *              Best effort without sources or source maps.\n   *      opts.ajax = Promise returning function to make X-Domain requests\n   */\n\n\n  return function StackTraceGPS(opts) {\n    if (!(this instanceof StackTraceGPS)) {\n      return new StackTraceGPS(opts);\n    }\n\n    opts = opts || {};\n    this.sourceCache = opts.sourceCache || {};\n    this.sourceMapConsumerCache = opts.sourceMapConsumerCache || {};\n    this.ajax = opts.ajax || _xdr;\n    this._atob = opts.atob || _atob;\n\n    this._get = function _get(location) {\n      return new Promise(function (resolve, reject) {\n        var isDataUrl = location.substr(0, 5) === 'data:';\n\n        if (this.sourceCache[location]) {\n          resolve(this.sourceCache[location]);\n        } else if (opts.offline && !isDataUrl) {\n          reject(new Error('Cannot make network requests in offline mode'));\n        } else {\n          if (isDataUrl) {\n            // data URLs can have parameters.\n            // see http://tools.ietf.org/html/rfc2397\n            var supportedEncodingRegexp = /^data:application\\/json;([\\w=:\"-]+;)*base64,/;\n            var match = location.match(supportedEncodingRegexp);\n\n            if (match) {\n              var sourceMapStart = match[0].length;\n              var encodedSource = location.substr(sourceMapStart);\n\n              var source = this._atob(encodedSource);\n\n              this.sourceCache[location] = source;\n              resolve(source);\n            } else {\n              reject(new Error('The encoding of the inline sourcemap is not supported'));\n            }\n          } else {\n            var xhrPromise = this.ajax(location, {\n              method: 'get'\n            }); // Cache the Promise to prevent duplicate in-flight requests\n\n            this.sourceCache[location] = xhrPromise;\n            xhrPromise.then(resolve, reject);\n          }\n        }\n      }.bind(this));\n    };\n    /**\n     * Creating SourceMapConsumers is expensive, so this wraps the creation of a\n     * SourceMapConsumer in a per-instance cache.\n     *\n     * @param {String} sourceMappingURL = URL to fetch source map from\n     * @param {String} defaultSourceRoot = Default source root for source map if undefined\n     * @returns {Promise} that resolves a SourceMapConsumer\n     */\n\n\n    this._getSourceMapConsumer = function _getSourceMapConsumer(sourceMappingURL, defaultSourceRoot) {\n      return new Promise(function (resolve) {\n        if (this.sourceMapConsumerCache[sourceMappingURL]) {\n          resolve(this.sourceMapConsumerCache[sourceMappingURL]);\n        } else {\n          var sourceMapConsumerPromise = new Promise(function (resolve, reject) {\n            return this._get(sourceMappingURL).then(function (sourceMapSource) {\n              if (typeof sourceMapSource === 'string') {\n                sourceMapSource = _parseJson(sourceMapSource.replace(/^\\)\\]\\}'/, ''));\n              }\n\n              if (typeof sourceMapSource.sourceRoot === 'undefined') {\n                sourceMapSource.sourceRoot = defaultSourceRoot;\n              }\n\n              resolve(new SourceMap.SourceMapConsumer(sourceMapSource));\n            }, reject);\n          }.bind(this));\n          this.sourceMapConsumerCache[sourceMappingURL] = sourceMapConsumerPromise;\n          resolve(sourceMapConsumerPromise);\n        }\n      }.bind(this));\n    };\n    /**\n     * Given a StackFrame, enhance function name and use source maps for a\n     * better StackFrame.\n     *\n     * @param {StackFrame} stackframe object\n     * @returns {Promise} that resolves with with source-mapped StackFrame\n     */\n\n\n    this.pinpoint = function StackTraceGPS$$pinpoint(stackframe) {\n      return new Promise(function (resolve, reject) {\n        this.getMappedLocation(stackframe).then(function (mappedStackFrame) {\n          function resolveMappedStackFrame() {\n            resolve(mappedStackFrame);\n          }\n\n          this.findFunctionName(mappedStackFrame).then(resolve, resolveMappedStackFrame) // eslint-disable-next-line no-unexpected-multiline\n          ['catch'](resolveMappedStackFrame);\n        }.bind(this), reject);\n      }.bind(this));\n    };\n    /**\n     * Given a StackFrame, guess function name from location information.\n     *\n     * @param {StackFrame} stackframe\n     * @returns {Promise} that resolves with enhanced StackFrame.\n     */\n\n\n    this.findFunctionName = function StackTraceGPS$$findFunctionName(stackframe) {\n      return new Promise(function (resolve, reject) {\n        _ensureStackFrameIsLegit(stackframe);\n\n        this._get(stackframe.fileName).then(function getSourceCallback(source) {\n          var lineNumber = stackframe.lineNumber;\n          var columnNumber = stackframe.columnNumber;\n\n          var guessedFunctionName = _findFunctionName(source, lineNumber, columnNumber); // Only replace functionName if we found something\n\n\n          if (guessedFunctionName) {\n            resolve(new StackFrame({\n              functionName: guessedFunctionName,\n              args: stackframe.args,\n              fileName: stackframe.fileName,\n              lineNumber: lineNumber,\n              columnNumber: columnNumber\n            }));\n          } else {\n            resolve(stackframe);\n          }\n        }, reject)['catch'](reject);\n      }.bind(this));\n    };\n    /**\n     * Given a StackFrame, seek source-mapped location and return new enhanced StackFrame.\n     *\n     * @param {StackFrame} stackframe\n     * @returns {Promise} that resolves with enhanced StackFrame.\n     */\n\n\n    this.getMappedLocation = function StackTraceGPS$$getMappedLocation(stackframe) {\n      return new Promise(function (resolve, reject) {\n        _ensureSupportedEnvironment();\n\n        _ensureStackFrameIsLegit(stackframe);\n\n        var sourceCache = this.sourceCache;\n        var fileName = stackframe.fileName;\n\n        this._get(fileName).then(function (source) {\n          var sourceMappingURL = _findSourceMappingURL(source);\n\n          var isDataUrl = sourceMappingURL.substr(0, 5) === 'data:';\n          var defaultSourceRoot = fileName.substring(0, fileName.lastIndexOf('/') + 1);\n\n          if (sourceMappingURL[0] !== '/' && !isDataUrl && !/^https?:\\/\\/|^\\/\\//i.test(sourceMappingURL)) {\n            sourceMappingURL = defaultSourceRoot + sourceMappingURL;\n          }\n\n          return this._getSourceMapConsumer(sourceMappingURL, defaultSourceRoot).then(function (sourceMapConsumer) {\n            return _extractLocationInfoFromSourceMapSource(stackframe, sourceMapConsumer, sourceCache).then(resolve)['catch'](function () {\n              resolve(stackframe);\n            });\n          });\n        }.bind(this), reject)['catch'](reject);\n      }.bind(this));\n    };\n  };\n});","map":{"version":3,"sources":["/home/pro/Solutions/drawboard-light/node_modules/stacktrace-gps/stacktrace-gps.js"],"names":["root","factory","define","amd","exports","module","require","StackTraceGPS","SourceMap","sourceMap","StackFrame","_xdr","url","Promise","resolve","reject","req","XMLHttpRequest","open","onerror","onreadystatechange","readyState","status","substr","responseText","Error","send","_atob","b64str","window","atob","_parseJson","string","JSON","parse","_findFunctionName","source","lineNumber","syntaxes","lines","split","code","maxLines","Math","min","i","line","commentPos","indexOf","len","length","index","m","exec","undefined","_ensureSupportedEnvironment","Object","defineProperty","create","_ensureStackFrameIsLegit","stackframe","TypeError","fileName","columnNumber","_findSourceMappingURL","sourceMappingUrlRegExp","lastSourceMappingUrl","matchSourceMappingUrl","_extractLocationInfoFromSourceMapSource","sourceMapConsumer","sourceCache","loc","originalPositionFor","column","mappedSource","sourceContentFor","functionName","name","args","opts","sourceMapConsumerCache","ajax","_get","location","isDataUrl","offline","supportedEncodingRegexp","match","sourceMapStart","encodedSource","xhrPromise","method","then","bind","_getSourceMapConsumer","sourceMappingURL","defaultSourceRoot","sourceMapConsumerPromise","sourceMapSource","replace","sourceRoot","SourceMapConsumer","pinpoint","StackTraceGPS$$pinpoint","getMappedLocation","mappedStackFrame","resolveMappedStackFrame","findFunctionName","StackTraceGPS$$findFunctionName","getSourceCallback","guessedFunctionName","StackTraceGPS$$getMappedLocation","substring","lastIndexOf","test"],"mappings":"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","sourcesContent":["(function(root, factory) {\n    'use strict';\n    // Universal Module Definition (UMD) to support AMD, CommonJS/Node.js, Rhino, and browsers.\n\n    /* istanbul ignore next */\n    if (typeof define === 'function' && define.amd) {\n        define('stacktrace-gps', ['source-map', 'stackframe'], factory);\n    } else if (typeof exports === 'object') {\n        module.exports = factory(require('source-map/lib/source-map-consumer'), require('stackframe'));\n    } else {\n        root.StackTraceGPS = factory(root.SourceMap || root.sourceMap, root.StackFrame);\n    }\n}(this, function(SourceMap, StackFrame) {\n    'use strict';\n\n    /**\n     * Make a X-Domain request to url and callback.\n     *\n     * @param {String} url\n     * @returns {Promise} with response text if fulfilled\n     */\n    function _xdr(url) {\n        return new Promise(function(resolve, reject) {\n            var req = new XMLHttpRequest();\n            req.open('get', url);\n            req.onerror = reject;\n            req.onreadystatechange = function onreadystatechange() {\n                if (req.readyState === 4) {\n                    if ((req.status >= 200 && req.status < 300) ||\n                        (url.substr(0, 7) === 'file://' && req.responseText)) {\n                        resolve(req.responseText);\n                    } else {\n                        reject(new Error('HTTP status: ' + req.status + ' retrieving ' + url));\n                    }\n                }\n            };\n            req.send();\n        });\n\n    }\n\n    /**\n     * Convert a Base64-encoded string into its original representation.\n     * Used for inline sourcemaps.\n     *\n     * @param {String} b64str Base-64 encoded string\n     * @returns {String} original representation of the base64-encoded string.\n     */\n    function _atob(b64str) {\n        if (typeof window !== 'undefined' && window.atob) {\n            return window.atob(b64str);\n        } else {\n            throw new Error('You must supply a polyfill for window.atob in this environment');\n        }\n    }\n\n    function _parseJson(string) {\n        if (typeof JSON !== 'undefined' && JSON.parse) {\n            return JSON.parse(string);\n        } else {\n            throw new Error('You must supply a polyfill for JSON.parse in this environment');\n        }\n    }\n\n    function _findFunctionName(source, lineNumber/*, columnNumber*/) {\n        var syntaxes = [\n            // {name} = function ({args}) TODO args capture\n            /['\"]?([$_A-Za-z][$_A-Za-z0-9]*)['\"]?\\s*[:=]\\s*function\\b/,\n            // function {name}({args}) m[1]=name m[2]=args\n            /function\\s+([^('\"`]*?)\\s*\\(([^)]*)\\)/,\n            // {name} = eval()\n            /['\"]?([$_A-Za-z][$_A-Za-z0-9]*)['\"]?\\s*[:=]\\s*(?:eval|new Function)\\b/,\n            // fn_name() {\n            /\\b(?!(?:if|for|switch|while|with|catch)\\b)(?:(?:static)\\s+)?(\\S+)\\s*\\(.*?\\)\\s*\\{/,\n            // {name} = () => {\n            /['\"]?([$_A-Za-z][$_A-Za-z0-9]*)['\"]?\\s*[:=]\\s*\\(.*?\\)\\s*=>/\n        ];\n        var lines = source.split('\\n');\n\n        // Walk backwards in the source lines until we find the line which matches one of the patterns above\n        var code = '';\n        var maxLines = Math.min(lineNumber, 20);\n        for (var i = 0; i < maxLines; ++i) {\n            // lineNo is 1-based, source[] is 0-based\n            var line = lines[lineNumber - i - 1];\n            var commentPos = line.indexOf('//');\n            if (commentPos >= 0) {\n                line = line.substr(0, commentPos);\n            }\n\n            if (line) {\n                code = line + code;\n                var len = syntaxes.length;\n                for (var index = 0; index < len; index++) {\n                    var m = syntaxes[index].exec(code);\n                    if (m && m[1]) {\n                        return m[1];\n                    }\n                }\n            }\n        }\n        return undefined;\n    }\n\n    function _ensureSupportedEnvironment() {\n        if (typeof Object.defineProperty !== 'function' || typeof Object.create !== 'function') {\n            throw new Error('Unable to consume source maps in older browsers');\n        }\n    }\n\n    function _ensureStackFrameIsLegit(stackframe) {\n        if (typeof stackframe !== 'object') {\n            throw new TypeError('Given StackFrame is not an object');\n        } else if (typeof stackframe.fileName !== 'string') {\n            throw new TypeError('Given file name is not a String');\n        } else if (typeof stackframe.lineNumber !== 'number' ||\n            stackframe.lineNumber % 1 !== 0 ||\n            stackframe.lineNumber < 1) {\n            throw new TypeError('Given line number must be a positive integer');\n        } else if (typeof stackframe.columnNumber !== 'number' ||\n            stackframe.columnNumber % 1 !== 0 ||\n            stackframe.columnNumber < 0) {\n            throw new TypeError('Given column number must be a non-negative integer');\n        }\n        return true;\n    }\n\n    function _findSourceMappingURL(source) {\n        var sourceMappingUrlRegExp = /\\/\\/[#@] ?sourceMappingURL=([^\\s'\"]+)\\s*$/mg;\n        var lastSourceMappingUrl;\n        var matchSourceMappingUrl;\n        // eslint-disable-next-line no-cond-assign\n        while (matchSourceMappingUrl = sourceMappingUrlRegExp.exec(source)) {\n            lastSourceMappingUrl = matchSourceMappingUrl[1];\n        }\n        if (lastSourceMappingUrl) {\n            return lastSourceMappingUrl;\n        } else {\n            throw new Error('sourceMappingURL not found');\n        }\n    }\n\n    function _extractLocationInfoFromSourceMapSource(stackframe, sourceMapConsumer, sourceCache) {\n        return new Promise(function(resolve, reject) {\n            var loc = sourceMapConsumer.originalPositionFor({\n                line: stackframe.lineNumber,\n                column: stackframe.columnNumber\n            });\n\n            if (loc.source) {\n                // cache mapped sources\n                var mappedSource = sourceMapConsumer.sourceContentFor(loc.source);\n                if (mappedSource) {\n                    sourceCache[loc.source] = mappedSource;\n                }\n\n                resolve(\n                    // given stackframe and source location, update stackframe\n                    new StackFrame({\n                        functionName: loc.name || stackframe.functionName,\n                        args: stackframe.args,\n                        fileName: loc.source,\n                        lineNumber: loc.line,\n                        columnNumber: loc.column\n                    }));\n            } else {\n                reject(new Error('Could not get original source for given stackframe and source map'));\n            }\n        });\n    }\n\n    /**\n     * @constructor\n     * @param {Object} opts\n     *      opts.sourceCache = {url: \"Source String\"} => preload source cache\n     *      opts.sourceMapConsumerCache = {/path/file.js.map: SourceMapConsumer}\n     *      opts.offline = True to prevent network requests.\n     *              Best effort without sources or source maps.\n     *      opts.ajax = Promise returning function to make X-Domain requests\n     */\n    return function StackTraceGPS(opts) {\n        if (!(this instanceof StackTraceGPS)) {\n            return new StackTraceGPS(opts);\n        }\n        opts = opts || {};\n\n        this.sourceCache = opts.sourceCache || {};\n        this.sourceMapConsumerCache = opts.sourceMapConsumerCache || {};\n\n        this.ajax = opts.ajax || _xdr;\n\n        this._atob = opts.atob || _atob;\n\n        this._get = function _get(location) {\n            return new Promise(function(resolve, reject) {\n                var isDataUrl = location.substr(0, 5) === 'data:';\n                if (this.sourceCache[location]) {\n                    resolve(this.sourceCache[location]);\n                } else if (opts.offline && !isDataUrl) {\n                    reject(new Error('Cannot make network requests in offline mode'));\n                } else {\n                    if (isDataUrl) {\n                        // data URLs can have parameters.\n                        // see http://tools.ietf.org/html/rfc2397\n                        var supportedEncodingRegexp =\n                            /^data:application\\/json;([\\w=:\"-]+;)*base64,/;\n                        var match = location.match(supportedEncodingRegexp);\n                        if (match) {\n                            var sourceMapStart = match[0].length;\n                            var encodedSource = location.substr(sourceMapStart);\n                            var source = this._atob(encodedSource);\n                            this.sourceCache[location] = source;\n                            resolve(source);\n                        } else {\n                            reject(new Error('The encoding of the inline sourcemap is not supported'));\n                        }\n                    } else {\n                        var xhrPromise = this.ajax(location, {method: 'get'});\n                        // Cache the Promise to prevent duplicate in-flight requests\n                        this.sourceCache[location] = xhrPromise;\n                        xhrPromise.then(resolve, reject);\n                    }\n                }\n            }.bind(this));\n        };\n\n        /**\n         * Creating SourceMapConsumers is expensive, so this wraps the creation of a\n         * SourceMapConsumer in a per-instance cache.\n         *\n         * @param {String} sourceMappingURL = URL to fetch source map from\n         * @param {String} defaultSourceRoot = Default source root for source map if undefined\n         * @returns {Promise} that resolves a SourceMapConsumer\n         */\n        this._getSourceMapConsumer = function _getSourceMapConsumer(sourceMappingURL, defaultSourceRoot) {\n            return new Promise(function(resolve) {\n                if (this.sourceMapConsumerCache[sourceMappingURL]) {\n                    resolve(this.sourceMapConsumerCache[sourceMappingURL]);\n                } else {\n                    var sourceMapConsumerPromise = new Promise(function(resolve, reject) {\n                        return this._get(sourceMappingURL).then(function(sourceMapSource) {\n                            if (typeof sourceMapSource === 'string') {\n                                sourceMapSource = _parseJson(sourceMapSource.replace(/^\\)\\]\\}'/, ''));\n                            }\n                            if (typeof sourceMapSource.sourceRoot === 'undefined') {\n                                sourceMapSource.sourceRoot = defaultSourceRoot;\n                            }\n\n                            resolve(new SourceMap.SourceMapConsumer(sourceMapSource));\n                        }, reject);\n                    }.bind(this));\n                    this.sourceMapConsumerCache[sourceMappingURL] = sourceMapConsumerPromise;\n                    resolve(sourceMapConsumerPromise);\n                }\n            }.bind(this));\n        };\n\n        /**\n         * Given a StackFrame, enhance function name and use source maps for a\n         * better StackFrame.\n         *\n         * @param {StackFrame} stackframe object\n         * @returns {Promise} that resolves with with source-mapped StackFrame\n         */\n        this.pinpoint = function StackTraceGPS$$pinpoint(stackframe) {\n            return new Promise(function(resolve, reject) {\n                this.getMappedLocation(stackframe).then(function(mappedStackFrame) {\n                    function resolveMappedStackFrame() {\n                        resolve(mappedStackFrame);\n                    }\n\n                    this.findFunctionName(mappedStackFrame)\n                        .then(resolve, resolveMappedStackFrame)\n                        // eslint-disable-next-line no-unexpected-multiline\n                        ['catch'](resolveMappedStackFrame);\n                }.bind(this), reject);\n            }.bind(this));\n        };\n\n        /**\n         * Given a StackFrame, guess function name from location information.\n         *\n         * @param {StackFrame} stackframe\n         * @returns {Promise} that resolves with enhanced StackFrame.\n         */\n        this.findFunctionName = function StackTraceGPS$$findFunctionName(stackframe) {\n            return new Promise(function(resolve, reject) {\n                _ensureStackFrameIsLegit(stackframe);\n                this._get(stackframe.fileName).then(function getSourceCallback(source) {\n                    var lineNumber = stackframe.lineNumber;\n                    var columnNumber = stackframe.columnNumber;\n                    var guessedFunctionName = _findFunctionName(source, lineNumber, columnNumber);\n                    // Only replace functionName if we found something\n                    if (guessedFunctionName) {\n                        resolve(new StackFrame({\n                            functionName: guessedFunctionName,\n                            args: stackframe.args,\n                            fileName: stackframe.fileName,\n                            lineNumber: lineNumber,\n                            columnNumber: columnNumber\n                        }));\n                    } else {\n                        resolve(stackframe);\n                    }\n                }, reject)['catch'](reject);\n            }.bind(this));\n        };\n\n        /**\n         * Given a StackFrame, seek source-mapped location and return new enhanced StackFrame.\n         *\n         * @param {StackFrame} stackframe\n         * @returns {Promise} that resolves with enhanced StackFrame.\n         */\n        this.getMappedLocation = function StackTraceGPS$$getMappedLocation(stackframe) {\n            return new Promise(function(resolve, reject) {\n                _ensureSupportedEnvironment();\n                _ensureStackFrameIsLegit(stackframe);\n\n                var sourceCache = this.sourceCache;\n                var fileName = stackframe.fileName;\n                this._get(fileName).then(function(source) {\n                    var sourceMappingURL = _findSourceMappingURL(source);\n                    var isDataUrl = sourceMappingURL.substr(0, 5) === 'data:';\n                    var defaultSourceRoot = fileName.substring(0, fileName.lastIndexOf('/') + 1);\n\n                    if (sourceMappingURL[0] !== '/' && !isDataUrl && !(/^https?:\\/\\/|^\\/\\//i).test(sourceMappingURL)) {\n                        sourceMappingURL = defaultSourceRoot + sourceMappingURL;\n                    }\n\n                    return this._getSourceMapConsumer(sourceMappingURL, defaultSourceRoot)\n                        .then(function(sourceMapConsumer) {\n                            return _extractLocationInfoFromSourceMapSource(stackframe, sourceMapConsumer, sourceCache)\n                                .then(resolve)['catch'](function() {\n                                    resolve(stackframe);\n                                });\n                        });\n                }.bind(this), reject)['catch'](reject);\n            }.bind(this));\n        };\n    };\n}));\n"]},"metadata":{},"sourceType":"script"}