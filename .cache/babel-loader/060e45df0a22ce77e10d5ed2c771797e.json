{"ast":null,"code":"var _jsxFileName = \"/home/pro/Solutions/drawboard-light/src/actions/actionDeleteSelected.tsx\";\nimport { deleteSelectedElements, isSomeElementSelected } from \"../scene\";\nimport { KEYS } from \"../keys\";\nimport { ToolButton } from \"../components/ToolButton\";\nimport React from \"react\";\nimport { trash } from \"../components/icons\";\nimport { t } from \"../i18n\";\nimport { register } from \"./register\";\nimport { getNonDeletedElements } from \"../element\";\nexport const actionDeleteSelected = register({\n  name: \"deleteSelectedElements\",\n  perform: (elements, appState) => {\n    const {\n      elements: nextElements,\n      appState: nextAppState\n    } = deleteSelectedElements(elements, appState);\n    return {\n      elements: nextElements,\n      appState: { ...nextAppState,\n        elementType: \"selection\",\n        multiElement: null\n      },\n      commitToHistory: isSomeElementSelected(getNonDeletedElements(elements), appState)\n    };\n  },\n  contextItemLabel: \"labels.delete\",\n  contextMenuOrder: 3,\n  keyTest: event => event.key === KEYS.BACKSPACE || event.key === KEYS.DELETE,\n  PanelComponent: ({\n    elements,\n    appState,\n    updateData\n  }) => /*#__PURE__*/React.createElement(ToolButton, {\n    type: \"button\",\n    icon: trash,\n    title: t(\"labels.delete\"),\n    \"aria-label\": t(\"labels.delete\"),\n    onClick: () => updateData(null),\n    visible: isSomeElementSelected(getNonDeletedElements(elements), appState),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 5\n    }\n  })\n});","map":{"version":3,"sources":["/home/pro/Solutions/drawboard-light/src/actions/actionDeleteSelected.tsx"],"names":["deleteSelectedElements","isSomeElementSelected","KEYS","ToolButton","React","trash","t","register","getNonDeletedElements","actionDeleteSelected","name","perform","elements","appState","nextElements","nextAppState","elementType","multiElement","commitToHistory","contextItemLabel","contextMenuOrder","keyTest","event","key","BACKSPACE","DELETE","PanelComponent","updateData"],"mappings":";AAAA,SAASA,sBAAT,EAAiCC,qBAAjC,QAA8D,UAA9D;AACA,SAASC,IAAT,QAAqB,SAArB;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,QAAsB,qBAAtB;AACA,SAASC,CAAT,QAAkB,SAAlB;AACA,SAASC,QAAT,QAAyB,YAAzB;AACA,SAASC,qBAAT,QAAsC,YAAtC;AAEA,OAAO,MAAMC,oBAAoB,GAAGF,QAAQ,CAAC;AAC3CG,EAAAA,IAAI,EAAE,wBADqC;AAE3CC,EAAAA,OAAO,EAAE,CAACC,QAAD,EAAWC,QAAX,KAAwB;AAC/B,UAAM;AACJD,MAAAA,QAAQ,EAAEE,YADN;AAEJD,MAAAA,QAAQ,EAAEE;AAFN,QAGFf,sBAAsB,CAACY,QAAD,EAAWC,QAAX,CAH1B;AAIA,WAAO;AACLD,MAAAA,QAAQ,EAAEE,YADL;AAELD,MAAAA,QAAQ,EAAE,EACR,GAAGE,YADK;AAERC,QAAAA,WAAW,EAAE,WAFL;AAGRC,QAAAA,YAAY,EAAE;AAHN,OAFL;AAOLC,MAAAA,eAAe,EAAEjB,qBAAqB,CACpCO,qBAAqB,CAACI,QAAD,CADe,EAEpCC,QAFoC;AAPjC,KAAP;AAYD,GAnB0C;AAoB3CM,EAAAA,gBAAgB,EAAE,eApByB;AAqB3CC,EAAAA,gBAAgB,EAAE,CArByB;AAsB3CC,EAAAA,OAAO,EAAGC,KAAD,IAAWA,KAAK,CAACC,GAAN,KAAcrB,IAAI,CAACsB,SAAnB,IAAgCF,KAAK,CAACC,GAAN,KAAcrB,IAAI,CAACuB,MAtB5B;AAuB3CC,EAAAA,cAAc,EAAE,CAAC;AAAEd,IAAAA,QAAF;AAAYC,IAAAA,QAAZ;AAAsBc,IAAAA;AAAtB,GAAD,kBACd,oBAAC,UAAD;AACE,IAAA,IAAI,EAAC,QADP;AAEE,IAAA,IAAI,EAAEtB,KAFR;AAGE,IAAA,KAAK,EAAEC,CAAC,CAAC,eAAD,CAHV;AAIE,kBAAYA,CAAC,CAAC,eAAD,CAJf;AAKE,IAAA,OAAO,EAAE,MAAMqB,UAAU,CAAC,IAAD,CAL3B;AAME,IAAA,OAAO,EAAE1B,qBAAqB,CAACO,qBAAqB,CAACI,QAAD,CAAtB,EAAkCC,QAAlC,CANhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAxByC,CAAD,CAArC","sourcesContent":["import { deleteSelectedElements, isSomeElementSelected } from \"../scene\";\nimport { KEYS } from \"../keys\";\nimport { ToolButton } from \"../components/ToolButton\";\nimport React from \"react\";\nimport { trash } from \"../components/icons\";\nimport { t } from \"../i18n\";\nimport { register } from \"./register\";\nimport { getNonDeletedElements } from \"../element\";\n\nexport const actionDeleteSelected = register({\n  name: \"deleteSelectedElements\",\n  perform: (elements, appState) => {\n    const {\n      elements: nextElements,\n      appState: nextAppState,\n    } = deleteSelectedElements(elements, appState);\n    return {\n      elements: nextElements,\n      appState: {\n        ...nextAppState,\n        elementType: \"selection\",\n        multiElement: null,\n      },\n      commitToHistory: isSomeElementSelected(\n        getNonDeletedElements(elements),\n        appState,\n      ),\n    };\n  },\n  contextItemLabel: \"labels.delete\",\n  contextMenuOrder: 3,\n  keyTest: (event) => event.key === KEYS.BACKSPACE || event.key === KEYS.DELETE,\n  PanelComponent: ({ elements, appState, updateData }) => (\n    <ToolButton\n      type=\"button\"\n      icon={trash}\n      title={t(\"labels.delete\")}\n      aria-label={t(\"labels.delete\")}\n      onClick={() => updateData(null)}\n      visible={isSomeElementSelected(getNonDeletedElements(elements), appState)}\n    />\n  ),\n});\n"]},"metadata":{},"sourceType":"module"}