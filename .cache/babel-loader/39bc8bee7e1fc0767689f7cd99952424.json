{"ast":null,"code":"import _objectSpread from \"/home/pro/Solutions/drawboard-light/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/home/pro/Solutions/drawboard-light/src/actions/actionExport.tsx\";\nimport React from \"react\";\nimport { ProjectName } from \"../components/ProjectName\";\nimport { saveAsJSON, loadFromJSON } from \"../data\";\nimport { load, save } from \"../components/icons\";\nimport { ToolButton } from \"../components/ToolButton\";\nimport { t } from \"../i18n\";\nimport useIsMobile from \"../is-mobile\";\nimport { register } from \"./register\";\nexport var actionChangeProjectName = register({\n  name: \"changeProjectName\",\n  perform: function perform(_elements, appState, value) {\n    return {\n      appState: _objectSpread({}, appState, {\n        name: value\n      })\n    };\n  },\n  PanelComponent: function PanelComponent(_ref) {\n    var appState = _ref.appState,\n        updateData = _ref.updateData;\n    return React.createElement(ProjectName, {\n      label: t(\"labels.fileTitle\"),\n      value: appState.name || \"Unnamed\",\n      onChange: function onChange(name) {\n        return updateData(name);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16\n      },\n      __self: this\n    });\n  }\n});\nexport var actionChangeExportBackground = register({\n  name: \"changeExportBackground\",\n  perform: function perform(_elements, appState, value) {\n    return {\n      appState: _objectSpread({}, appState, {\n        exportBackground: value\n      })\n    };\n  },\n  PanelComponent: function PanelComponent(_ref2) {\n    var appState = _ref2.appState,\n        updateData = _ref2.updateData;\n    return React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"checkbox\",\n      checked: appState.exportBackground,\n      onChange: function onChange(event) {\n        return updateData(event.target.checked);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }), \" \", t(\"labels.withBackground\"));\n  }\n});\nexport var actionSaveScene = register({\n  name: \"saveScene\",\n  perform: function perform(elements, appState, value) {\n    saveAsJSON(elements, appState).catch(function (error) {\n      return console.error(error);\n    });\n    return {};\n  },\n  PanelComponent: function PanelComponent(_ref3) {\n    var updateData = _ref3.updateData;\n    return React.createElement(ToolButton, {\n      type: \"button\",\n      icon: save,\n      title: t(\"buttons.save\"),\n      \"aria-label\": t(\"buttons.save\"),\n      showAriaLabel: useIsMobile(),\n      onClick: function onClick() {\n        return updateData(null);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    });\n  }\n});\nexport var actionLoadScene = register({\n  name: \"loadScene\",\n  perform: function perform(elements, appState, _ref4) {\n    var loadedElements = _ref4.elements,\n        loadedAppState = _ref4.appState;\n    return {\n      elements: loadedElements,\n      appState: loadedAppState\n    };\n  },\n  PanelComponent: function PanelComponent(_ref5) {\n    var updateData = _ref5.updateData;\n    return React.createElement(ToolButton, {\n      type: \"button\",\n      icon: load,\n      title: t(\"buttons.load\"),\n      \"aria-label\": t(\"buttons.load\"),\n      showAriaLabel: useIsMobile(),\n      onClick: function onClick() {\n        loadFromJSON().then(function (_ref6) {\n          var elements = _ref6.elements,\n              appState = _ref6.appState;\n          updateData({\n            elements: elements,\n            appState: appState\n          });\n        }).catch(function (error) {\n          return console.error(error);\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    });\n  }\n});","map":{"version":3,"sources":["/home/pro/Solutions/drawboard-light/src/actions/actionExport.tsx"],"names":["React","ProjectName","saveAsJSON","loadFromJSON","load","save","ToolButton","t","useIsMobile","register","actionChangeProjectName","name","perform","_elements","appState","value","PanelComponent","updateData","actionChangeExportBackground","exportBackground","event","target","checked","actionSaveScene","elements","catch","error","console","actionLoadScene","loadedElements","loadedAppState","then"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,QAA4B,2BAA5B;AACA,SAASC,UAAT,EAAqBC,YAArB,QAAyC,SAAzC;AACA,SAASC,IAAT,EAAeC,IAAf,QAA2B,qBAA3B;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,SAASC,CAAT,QAAkB,SAAlB;AACA,OAAOC,WAAP,MAAwB,cAAxB;AACA,SAASC,QAAT,QAAyB,YAAzB;AAEA,OAAO,IAAMC,uBAAuB,GAAGD,QAAQ,CAAC;AAC9CE,EAAAA,IAAI,EAAE,mBADwC;AAE9CC,EAAAA,OAAO,EAAE,iBAACC,SAAD,EAAYC,QAAZ,EAAsBC,KAAtB,EAAgC;AACvC,WAAO;AAAED,MAAAA,QAAQ,oBAAOA,QAAP;AAAiBH,QAAAA,IAAI,EAAEI;AAAvB;AAAV,KAAP;AACD,GAJ6C;AAK9CC,EAAAA,cAAc,EAAE;AAAA,QAAGF,QAAH,QAAGA,QAAH;AAAA,QAAaG,UAAb,QAAaA,UAAb;AAAA,WACd,oBAAC,WAAD;AACE,MAAA,KAAK,EAAEV,CAAC,CAAC,kBAAD,CADV;AAEE,MAAA,KAAK,EAAEO,QAAQ,CAACH,IAAT,IAAiB,SAF1B;AAGE,MAAA,QAAQ,EAAE,kBAACA,IAAD;AAAA,eAAkBM,UAAU,CAACN,IAAD,CAA5B;AAAA,OAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADc;AAAA;AAL8B,CAAD,CAAxC;AAcP,OAAO,IAAMO,4BAA4B,GAAGT,QAAQ,CAAC;AACnDE,EAAAA,IAAI,EAAE,wBAD6C;AAEnDC,EAAAA,OAAO,EAAE,iBAACC,SAAD,EAAYC,QAAZ,EAAsBC,KAAtB,EAAgC;AACvC,WAAO;AAAED,MAAAA,QAAQ,oBAAOA,QAAP;AAAiBK,QAAAA,gBAAgB,EAAEJ;AAAnC;AAAV,KAAP;AACD,GAJkD;AAKnDC,EAAAA,cAAc,EAAE;AAAA,QAAGF,QAAH,SAAGA,QAAH;AAAA,QAAaG,UAAb,SAAaA,UAAb;AAAA,WACd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AACE,MAAA,IAAI,EAAC,UADP;AAEE,MAAA,OAAO,EAAEH,QAAQ,CAACK,gBAFpB;AAGE,MAAA,QAAQ,EAAE,kBAAAC,KAAK;AAAA,eAAIH,UAAU,CAACG,KAAK,CAACC,MAAN,CAAaC,OAAd,CAAd;AAAA,OAHjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAKK,GALL,EAMGf,CAAC,CAAC,uBAAD,CANJ,CADc;AAAA;AALmC,CAAD,CAA7C;AAiBP,OAAO,IAAMgB,eAAe,GAAGd,QAAQ,CAAC;AACtCE,EAAAA,IAAI,EAAE,WADgC;AAEtCC,EAAAA,OAAO,EAAE,iBAACY,QAAD,EAAWV,QAAX,EAAqBC,KAArB,EAA+B;AACtCb,IAAAA,UAAU,CAACsB,QAAD,EAAWV,QAAX,CAAV,CAA+BW,KAA/B,CAAqC,UAAAC,KAAK;AAAA,aAAIC,OAAO,CAACD,KAAR,CAAcA,KAAd,CAAJ;AAAA,KAA1C;AACA,WAAO,EAAP;AACD,GALqC;AAMtCV,EAAAA,cAAc,EAAE;AAAA,QAAGC,UAAH,SAAGA,UAAH;AAAA,WACd,oBAAC,UAAD;AACE,MAAA,IAAI,EAAC,QADP;AAEE,MAAA,IAAI,EAAEZ,IAFR;AAGE,MAAA,KAAK,EAAEE,CAAC,CAAC,cAAD,CAHV;AAIE,oBAAYA,CAAC,CAAC,cAAD,CAJf;AAKE,MAAA,aAAa,EAAEC,WAAW,EAL5B;AAME,MAAA,OAAO,EAAE;AAAA,eAAMS,UAAU,CAAC,IAAD,CAAhB;AAAA,OANX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADc;AAAA;AANsB,CAAD,CAAhC;AAkBP,OAAO,IAAMW,eAAe,GAAGnB,QAAQ,CAAC;AACtCE,EAAAA,IAAI,EAAE,WADgC;AAEtCC,EAAAA,OAAO,EAAE,iBACPY,QADO,EAEPV,QAFO,SAIJ;AAAA,QADSe,cACT,SADDL,QACC;AAAA,QADmCM,cACnC,SADyBhB,QACzB;AACH,WAAO;AAAEU,MAAAA,QAAQ,EAAEK,cAAZ;AAA4Bf,MAAAA,QAAQ,EAAEgB;AAAtC,KAAP;AACD,GARqC;AAStCd,EAAAA,cAAc,EAAE;AAAA,QAAGC,UAAH,SAAGA,UAAH;AAAA,WACd,oBAAC,UAAD;AACE,MAAA,IAAI,EAAC,QADP;AAEE,MAAA,IAAI,EAAEb,IAFR;AAGE,MAAA,KAAK,EAAEG,CAAC,CAAC,cAAD,CAHV;AAIE,oBAAYA,CAAC,CAAC,cAAD,CAJf;AAKE,MAAA,aAAa,EAAEC,WAAW,EAL5B;AAME,MAAA,OAAO,EAAE,mBAAM;AACbL,QAAAA,YAAY,GACT4B,IADH,CACQ,iBAA4B;AAAA,cAAzBP,QAAyB,SAAzBA,QAAyB;AAAA,cAAfV,QAAe,SAAfA,QAAe;AAChCG,UAAAA,UAAU,CAAC;AAAEO,YAAAA,QAAQ,EAAEA,QAAZ;AAAsBV,YAAAA,QAAQ,EAAEA;AAAhC,WAAD,CAAV;AACD,SAHH,EAIGW,KAJH,CAIS,UAAAC,KAAK;AAAA,iBAAIC,OAAO,CAACD,KAAR,CAAcA,KAAd,CAAJ;AAAA,SAJd;AAKD,OAZH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADc;AAAA;AATsB,CAAD,CAAhC","sourcesContent":["import React from \"react\";\nimport { ProjectName } from \"../components/ProjectName\";\nimport { saveAsJSON, loadFromJSON } from \"../data\";\nimport { load, save } from \"../components/icons\";\nimport { ToolButton } from \"../components/ToolButton\";\nimport { t } from \"../i18n\";\nimport useIsMobile from \"../is-mobile\";\nimport { register } from \"./register\";\n\nexport const actionChangeProjectName = register({\n  name: \"changeProjectName\",\n  perform: (_elements, appState, value) => {\n    return { appState: { ...appState, name: value } };\n  },\n  PanelComponent: ({ appState, updateData }) => (\n    <ProjectName\n      label={t(\"labels.fileTitle\")}\n      value={appState.name || \"Unnamed\"}\n      onChange={(name: string) => updateData(name)}\n    />\n  ),\n});\n\nexport const actionChangeExportBackground = register({\n  name: \"changeExportBackground\",\n  perform: (_elements, appState, value) => {\n    return { appState: { ...appState, exportBackground: value } };\n  },\n  PanelComponent: ({ appState, updateData }) => (\n    <label>\n      <input\n        type=\"checkbox\"\n        checked={appState.exportBackground}\n        onChange={event => updateData(event.target.checked)}\n      />{\" \"}\n      {t(\"labels.withBackground\")}\n    </label>\n  ),\n});\n\nexport const actionSaveScene = register({\n  name: \"saveScene\",\n  perform: (elements, appState, value) => {\n    saveAsJSON(elements, appState).catch(error => console.error(error));\n    return {};\n  },\n  PanelComponent: ({ updateData }) => (\n    <ToolButton\n      type=\"button\"\n      icon={save}\n      title={t(\"buttons.save\")}\n      aria-label={t(\"buttons.save\")}\n      showAriaLabel={useIsMobile()}\n      onClick={() => updateData(null)}\n    />\n  ),\n});\n\nexport const actionLoadScene = register({\n  name: \"loadScene\",\n  perform: (\n    elements,\n    appState,\n    { elements: loadedElements, appState: loadedAppState },\n  ) => {\n    return { elements: loadedElements, appState: loadedAppState };\n  },\n  PanelComponent: ({ updateData }) => (\n    <ToolButton\n      type=\"button\"\n      icon={load}\n      title={t(\"buttons.load\")}\n      aria-label={t(\"buttons.load\")}\n      showAriaLabel={useIsMobile()}\n      onClick={() => {\n        loadFromJSON()\n          .then(({ elements, appState }) => {\n            updateData({ elements: elements, appState: appState });\n          })\n          .catch(error => console.error(error));\n      }}\n    />\n  ),\n});\n"]},"metadata":{},"sourceType":"module"}