{"ast":null,"code":"import { isTextElement, isExcalidrawElement, redrawTextBoundingBox } from \"../element\";\nimport { KEYS } from \"../keys\";\nimport { DEFAULT_FONT } from \"../appState\";\nimport { register } from \"./register\";\nimport { mutateElement, newElementWith } from \"../element/mutateElement\";\nlet copiedStyles = \"{}\";\nexport const actionCopyStyles = register({\n  name: \"copyStyles\",\n  perform: (elements, appState) => {\n    const element = elements.find(el => appState.selectedElementIds[el.id]);\n\n    if (element) {\n      copiedStyles = JSON.stringify(element);\n    }\n\n    return {\n      commitToHistory: false\n    };\n  },\n  contextItemLabel: \"labels.copyStyles\",\n  keyTest: event => event[KEYS.CTRL_OR_CMD] && event.shiftKey && event.key === \"C\",\n  contextMenuOrder: 0\n});\nexport const actionPasteStyles = register({\n  name: \"pasteStyles\",\n  perform: (elements, appState) => {\n    const pastedElement = JSON.parse(copiedStyles);\n\n    if (!isExcalidrawElement(pastedElement)) {\n      return {\n        elements,\n        commitToHistory: false\n      };\n    }\n\n    return {\n      elements: elements.map(element => {\n        if (appState.selectedElementIds[element.id]) {\n          const newElement = newElementWith(element, {\n            backgroundColor: pastedElement === null || pastedElement === void 0 ? void 0 : pastedElement.backgroundColor,\n            strokeWidth: pastedElement === null || pastedElement === void 0 ? void 0 : pastedElement.strokeWidth,\n            strokeColor: pastedElement === null || pastedElement === void 0 ? void 0 : pastedElement.strokeColor,\n            fillStyle: pastedElement === null || pastedElement === void 0 ? void 0 : pastedElement.fillStyle,\n            opacity: pastedElement === null || pastedElement === void 0 ? void 0 : pastedElement.opacity,\n            roughness: pastedElement === null || pastedElement === void 0 ? void 0 : pastedElement.roughness\n          });\n\n          if (isTextElement(newElement)) {\n            mutateElement(newElement, {\n              font: (pastedElement === null || pastedElement === void 0 ? void 0 : pastedElement.font) || DEFAULT_FONT\n            });\n            redrawTextBoundingBox(newElement);\n          }\n\n          return newElement;\n        }\n\n        return element;\n      }),\n      commitToHistory: true\n    };\n  },\n  contextItemLabel: \"labels.pasteStyles\",\n  keyTest: event => event[KEYS.CTRL_OR_CMD] && event.shiftKey && event.key === \"V\",\n  contextMenuOrder: 1\n});","map":{"version":3,"sources":["/home/pro/Solutions/drawboard-light/src/actions/actionStyles.ts"],"names":["isTextElement","isExcalidrawElement","redrawTextBoundingBox","KEYS","DEFAULT_FONT","register","mutateElement","newElementWith","copiedStyles","actionCopyStyles","name","perform","elements","appState","element","find","el","selectedElementIds","id","JSON","stringify","commitToHistory","contextItemLabel","keyTest","event","CTRL_OR_CMD","shiftKey","key","contextMenuOrder","actionPasteStyles","pastedElement","parse","map","newElement","backgroundColor","strokeWidth","strokeColor","fillStyle","opacity","roughness","font"],"mappings":"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","sourcesContent":["import {\n  isTextElement,\n  isExcalidrawElement,\n  redrawTextBoundingBox,\n} from \"../element\";\nimport { KEYS } from \"../keys\";\nimport { DEFAULT_FONT } from \"../appState\";\nimport { register } from \"./register\";\nimport { mutateElement, newElementWith } from \"../element/mutateElement\";\n\nlet copiedStyles: string = \"{}\";\n\nexport const actionCopyStyles = register({\n  name: \"copyStyles\",\n  perform: (elements, appState) => {\n    const element = elements.find((el) => appState.selectedElementIds[el.id]);\n    if (element) {\n      copiedStyles = JSON.stringify(element);\n    }\n    return {\n      commitToHistory: false,\n    };\n  },\n  contextItemLabel: \"labels.copyStyles\",\n  keyTest: (event) =>\n    event[KEYS.CTRL_OR_CMD] && event.shiftKey && event.key === \"C\",\n  contextMenuOrder: 0,\n});\n\nexport const actionPasteStyles = register({\n  name: \"pasteStyles\",\n  perform: (elements, appState) => {\n    const pastedElement = JSON.parse(copiedStyles);\n    if (!isExcalidrawElement(pastedElement)) {\n      return { elements, commitToHistory: false };\n    }\n    return {\n      elements: elements.map((element) => {\n        if (appState.selectedElementIds[element.id]) {\n          const newElement = newElementWith(element, {\n            backgroundColor: pastedElement?.backgroundColor,\n            strokeWidth: pastedElement?.strokeWidth,\n            strokeColor: pastedElement?.strokeColor,\n            fillStyle: pastedElement?.fillStyle,\n            opacity: pastedElement?.opacity,\n            roughness: pastedElement?.roughness,\n          });\n          if (isTextElement(newElement)) {\n            mutateElement(newElement, {\n              font: pastedElement?.font || DEFAULT_FONT,\n            });\n            redrawTextBoundingBox(newElement);\n          }\n          return newElement;\n        }\n        return element;\n      }),\n      commitToHistory: true,\n    };\n  },\n  contextItemLabel: \"labels.pasteStyles\",\n  keyTest: (event) =>\n    event[KEYS.CTRL_OR_CMD] && event.shiftKey && event.key === \"V\",\n  contextMenuOrder: 1,\n});\n"]},"metadata":{},"sourceType":"module"}