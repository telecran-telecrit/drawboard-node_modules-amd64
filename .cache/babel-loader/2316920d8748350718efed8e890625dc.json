{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { isError, isPlainObject, logger, normalize } from '@sentry/utils';\n/** Patch toString calls to return proper name for wrapped functions */\n\nvar ExtraErrorData =\n/** @class */\nfunction () {\n  /**\n   * @inheritDoc\n   */\n  function ExtraErrorData(_options) {\n    if (_options === void 0) {\n      _options = {\n        depth: 3\n      };\n    }\n\n    this._options = _options;\n    /**\n     * @inheritDoc\n     */\n\n    this.name = ExtraErrorData.id;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  ExtraErrorData.prototype.setupOnce = function (addGlobalEventProcessor, getCurrentHub) {\n    addGlobalEventProcessor(function (event, hint) {\n      var self = getCurrentHub().getIntegration(ExtraErrorData);\n\n      if (!self) {\n        return event;\n      }\n\n      return self.enhanceEventWithErrorData(event, hint);\n    });\n  };\n  /**\n   * Attaches extracted information from the Error object to extra field in the Event\n   */\n\n\n  ExtraErrorData.prototype.enhanceEventWithErrorData = function (event, hint) {\n    var _a;\n\n    if (!hint || !hint.originalException || !isError(hint.originalException)) {\n      return event;\n    }\n\n    var name = hint.originalException.name || hint.originalException.constructor.name;\n\n    var errorData = this._extractErrorData(hint.originalException);\n\n    if (errorData) {\n      var contexts = tslib_1.__assign({}, event.contexts);\n\n      var normalizedErrorData = normalize(errorData, this._options.depth);\n\n      if (isPlainObject(normalizedErrorData)) {\n        contexts = tslib_1.__assign({}, event.contexts, (_a = {}, _a[name] = tslib_1.__assign({}, normalizedErrorData), _a));\n      }\n\n      return tslib_1.__assign({}, event, {\n        contexts: contexts\n      });\n    }\n\n    return event;\n  };\n  /**\n   * Extract extra information from the Error object\n   */\n\n\n  ExtraErrorData.prototype._extractErrorData = function (error) {\n    var e_1, _a;\n\n    var result = null; // We are trying to enhance already existing event, so no harm done if it won't succeed\n\n    try {\n      var nativeKeys_1 = ['name', 'message', 'stack', 'line', 'column', 'fileName', 'lineNumber', 'columnNumber'];\n      var errorKeys = Object.getOwnPropertyNames(error).filter(function (key) {\n        return nativeKeys_1.indexOf(key) === -1;\n      });\n\n      if (errorKeys.length) {\n        var extraErrorInfo = {};\n\n        try {\n          for (var errorKeys_1 = tslib_1.__values(errorKeys), errorKeys_1_1 = errorKeys_1.next(); !errorKeys_1_1.done; errorKeys_1_1 = errorKeys_1.next()) {\n            var key = errorKeys_1_1.value;\n            var value = error[key];\n\n            if (isError(value)) {\n              value = value.toString();\n            } // tslint:disable:no-unsafe-any\n\n\n            extraErrorInfo[key] = value;\n          }\n        } catch (e_1_1) {\n          e_1 = {\n            error: e_1_1\n          };\n        } finally {\n          try {\n            if (errorKeys_1_1 && !errorKeys_1_1.done && (_a = errorKeys_1.return)) _a.call(errorKeys_1);\n          } finally {\n            if (e_1) throw e_1.error;\n          }\n        }\n\n        result = extraErrorInfo;\n      }\n    } catch (oO) {\n      logger.error('Unable to extract extra data from the Error object:', oO);\n    }\n\n    return result;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  ExtraErrorData.id = 'ExtraErrorData';\n  return ExtraErrorData;\n}();\n\nexport { ExtraErrorData };","map":{"version":3,"sources":["../src/extraerrordata.ts"],"names":[],"mappings":"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","sourcesContent":["import { Event, EventHint, EventProcessor, ExtendedError, Hub, Integration } from '@sentry/types';\nimport { isError, isPlainObject, logger, normalize } from '@sentry/utils';\n\n/** JSDoc */\ninterface ExtraErrorDataOptions {\n  depth?: number;\n}\n\n/** Patch toString calls to return proper name for wrapped functions */\nexport class ExtraErrorData implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public name: string = ExtraErrorData.id;\n\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'ExtraErrorData';\n\n  /**\n   * @inheritDoc\n   */\n  public constructor(private readonly _options: ExtraErrorDataOptions = { depth: 3 }) {}\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(addGlobalEventProcessor: (callback: EventProcessor) => void, getCurrentHub: () => Hub): void {\n    addGlobalEventProcessor((event: Event, hint?: EventHint) => {\n      const self = getCurrentHub().getIntegration(ExtraErrorData);\n      if (!self) {\n        return event;\n      }\n      return self.enhanceEventWithErrorData(event, hint);\n    });\n  }\n\n  /**\n   * Attaches extracted information from the Error object to extra field in the Event\n   */\n  public enhanceEventWithErrorData(event: Event, hint?: EventHint): Event {\n    if (!hint || !hint.originalException || !isError(hint.originalException)) {\n      return event;\n    }\n    const name = (hint.originalException as ExtendedError).name || hint.originalException.constructor.name;\n\n    const errorData = this._extractErrorData(hint.originalException as ExtendedError);\n\n    if (errorData) {\n      let contexts = {\n        ...event.contexts,\n      };\n\n      const normalizedErrorData = normalize(errorData, this._options.depth);\n      if (isPlainObject(normalizedErrorData)) {\n        contexts = {\n          ...event.contexts,\n          [name]: {\n            ...normalizedErrorData,\n          },\n        };\n      }\n\n      return {\n        ...event,\n        contexts,\n      };\n    }\n\n    return event;\n  }\n\n  /**\n   * Extract extra information from the Error object\n   */\n  private _extractErrorData(error: ExtendedError): { [key: string]: unknown } | null {\n    let result = null;\n    // We are trying to enhance already existing event, so no harm done if it won't succeed\n    try {\n      const nativeKeys = ['name', 'message', 'stack', 'line', 'column', 'fileName', 'lineNumber', 'columnNumber'];\n      const errorKeys = Object.getOwnPropertyNames(error).filter(key => nativeKeys.indexOf(key) === -1);\n\n      if (errorKeys.length) {\n        const extraErrorInfo: { [key: string]: unknown } = {};\n        for (const key of errorKeys) {\n          let value = error[key];\n          if (isError(value)) {\n            value = (value as Error).toString();\n          }\n          // tslint:disable:no-unsafe-any\n          extraErrorInfo[key] = value;\n        }\n        result = extraErrorInfo;\n      }\n    } catch (oO) {\n      logger.error('Unable to extract extra data from the Error object:', oO);\n    }\n\n    return result;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}