{"ast":null,"code":"import rough from \"roughjs/bin/rough\";\nimport { getCommonBounds } from \"../element/bounds\";\nimport { renderScene, renderSceneToSvg } from \"../renderer/renderScene\";\nimport { distance, SVG_NS } from \"../utils\";\nimport { normalizeScroll } from \"./scroll\";\nexport const SVG_EXPORT_TAG = `<!-- svg-source:excalidraw -->`;\nexport function exportToCanvas(elements, appState, {\n  exportBackground,\n  exportPadding = 10,\n  viewBackgroundColor,\n  scale = 1\n}, createCanvas = function (width, height) {\n  const tempCanvas = document.createElement(\"canvas\");\n  tempCanvas.width = width * scale;\n  tempCanvas.height = height * scale;\n  return tempCanvas;\n}) {\n  // calculate smallest area to fit the contents in\n  const [minX, minY, maxX, maxY] = getCommonBounds(elements);\n  const width = distance(minX, maxX) + exportPadding * 2;\n  const height = distance(minY, maxY) + exportPadding * 2;\n  const tempCanvas = createCanvas(width, height);\n  renderScene(elements, appState, null, scale, rough.canvas(tempCanvas), tempCanvas, {\n    viewBackgroundColor: exportBackground ? viewBackgroundColor : null,\n    scrollX: normalizeScroll(-minX + exportPadding),\n    scrollY: normalizeScroll(-minY + exportPadding),\n    zoom: 1,\n    remotePointerViewportCoords: {},\n    remoteSelectedElementIds: {},\n    shouldCacheIgnoreZoom: false,\n    remotePointerUsernames: {}\n  }, {\n    renderScrollbars: false,\n    renderSelection: false,\n    renderOptimizations: false\n  });\n  return tempCanvas;\n}\nexport function exportToSvg(elements, {\n  exportBackground,\n  exportPadding = 10,\n  viewBackgroundColor\n}) {\n  // calculate canvas dimensions\n  const [minX, minY, maxX, maxY] = getCommonBounds(elements);\n  const width = distance(minX, maxX) + exportPadding * 2;\n  const height = distance(minY, maxY) + exportPadding * 2; // initialze SVG root\n\n  const svgRoot = document.createElementNS(SVG_NS, \"svg\");\n  svgRoot.setAttribute(\"version\", \"1.1\");\n  svgRoot.setAttribute(\"xmlns\", SVG_NS);\n  svgRoot.setAttribute(\"viewBox\", `0 0 ${width} ${height}`);\n  svgRoot.innerHTML = `\n  ${SVG_EXPORT_TAG}\n  <defs>\n    <style>\n      @font-face {\n        font-family: \"Virgil\";\n        src: url(\"https://excalidraw.com/FG_Virgil.woff2\");\n      }\n      @font-face {\n        font-family: \"Cascadia\";\n        src: url(\"https://excalidraw.com/Cascadia.woff2\");\n      }\n    </style>\n  </defs>\n  `; // render backgroiund rect\n\n  if (exportBackground && viewBackgroundColor) {\n    const rect = svgRoot.ownerDocument.createElementNS(SVG_NS, \"rect\");\n    rect.setAttribute(\"x\", \"0\");\n    rect.setAttribute(\"y\", \"0\");\n    rect.setAttribute(\"width\", `${width}`);\n    rect.setAttribute(\"height\", `${height}`);\n    rect.setAttribute(\"fill\", viewBackgroundColor);\n    svgRoot.appendChild(rect);\n  }\n\n  const rsvg = rough.svg(svgRoot);\n  renderSceneToSvg(elements, rsvg, svgRoot, {\n    offsetX: -minX + exportPadding,\n    offsetY: -minY + exportPadding\n  });\n  return svgRoot;\n}","map":{"version":3,"sources":["/home/pro/Solutions/drawboard-light/src/scene/export.ts"],"names":["rough","getCommonBounds","renderScene","renderSceneToSvg","distance","SVG_NS","normalizeScroll","SVG_EXPORT_TAG","exportToCanvas","elements","appState","exportBackground","exportPadding","viewBackgroundColor","scale","createCanvas","width","height","tempCanvas","document","createElement","minX","minY","maxX","maxY","canvas","scrollX","scrollY","zoom","remotePointerViewportCoords","remoteSelectedElementIds","shouldCacheIgnoreZoom","remotePointerUsernames","renderScrollbars","renderSelection","renderOptimizations","exportToSvg","svgRoot","createElementNS","setAttribute","innerHTML","rect","ownerDocument","appendChild","rsvg","svg","offsetX","offsetY"],"mappings":"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","sourcesContent":["import rough from \"roughjs/bin/rough\";\nimport { NonDeletedExcalidrawElement } from \"../element/types\";\nimport { getCommonBounds } from \"../element/bounds\";\nimport { renderScene, renderSceneToSvg } from \"../renderer/renderScene\";\nimport { distance, SVG_NS } from \"../utils\";\nimport { normalizeScroll } from \"./scroll\";\nimport { AppState } from \"../types\";\n\nexport const SVG_EXPORT_TAG = `<!-- svg-source:excalidraw -->`;\n\nexport function exportToCanvas(\n  elements: readonly NonDeletedExcalidrawElement[],\n  appState: AppState,\n  {\n    exportBackground,\n    exportPadding = 10,\n    viewBackgroundColor,\n    scale = 1,\n  }: {\n    exportBackground: boolean;\n    exportPadding?: number;\n    scale?: number;\n    viewBackgroundColor: string;\n  },\n  createCanvas: (width: number, height: number) => any = function (\n    width,\n    height,\n  ) {\n    const tempCanvas = document.createElement(\"canvas\");\n    tempCanvas.width = width * scale;\n    tempCanvas.height = height * scale;\n    return tempCanvas;\n  },\n) {\n  // calculate smallest area to fit the contents in\n  const [minX, minY, maxX, maxY] = getCommonBounds(elements);\n  const width = distance(minX, maxX) + exportPadding * 2;\n  const height = distance(minY, maxY) + exportPadding * 2;\n\n  const tempCanvas: any = createCanvas(width, height);\n\n  renderScene(\n    elements,\n    appState,\n    null,\n    scale,\n    rough.canvas(tempCanvas),\n    tempCanvas,\n    {\n      viewBackgroundColor: exportBackground ? viewBackgroundColor : null,\n      scrollX: normalizeScroll(-minX + exportPadding),\n      scrollY: normalizeScroll(-minY + exportPadding),\n      zoom: 1,\n      remotePointerViewportCoords: {},\n      remoteSelectedElementIds: {},\n      shouldCacheIgnoreZoom: false,\n      remotePointerUsernames: {},\n    },\n    {\n      renderScrollbars: false,\n      renderSelection: false,\n      renderOptimizations: false,\n    },\n  );\n  return tempCanvas;\n}\n\nexport function exportToSvg(\n  elements: readonly NonDeletedExcalidrawElement[],\n  {\n    exportBackground,\n    exportPadding = 10,\n    viewBackgroundColor,\n  }: {\n    exportBackground: boolean;\n    exportPadding?: number;\n    viewBackgroundColor: string;\n  },\n): SVGSVGElement {\n  // calculate canvas dimensions\n  const [minX, minY, maxX, maxY] = getCommonBounds(elements);\n  const width = distance(minX, maxX) + exportPadding * 2;\n  const height = distance(minY, maxY) + exportPadding * 2;\n\n  // initialze SVG root\n  const svgRoot = document.createElementNS(SVG_NS, \"svg\");\n  svgRoot.setAttribute(\"version\", \"1.1\");\n  svgRoot.setAttribute(\"xmlns\", SVG_NS);\n  svgRoot.setAttribute(\"viewBox\", `0 0 ${width} ${height}`);\n\n  svgRoot.innerHTML = `\n  ${SVG_EXPORT_TAG}\n  <defs>\n    <style>\n      @font-face {\n        font-family: \"Virgil\";\n        src: url(\"https://excalidraw.com/FG_Virgil.woff2\");\n      }\n      @font-face {\n        font-family: \"Cascadia\";\n        src: url(\"https://excalidraw.com/Cascadia.woff2\");\n      }\n    </style>\n  </defs>\n  `;\n\n  // render backgroiund rect\n  if (exportBackground && viewBackgroundColor) {\n    const rect = svgRoot.ownerDocument!.createElementNS(SVG_NS, \"rect\");\n    rect.setAttribute(\"x\", \"0\");\n    rect.setAttribute(\"y\", \"0\");\n    rect.setAttribute(\"width\", `${width}`);\n    rect.setAttribute(\"height\", `${height}`);\n    rect.setAttribute(\"fill\", viewBackgroundColor);\n    svgRoot.appendChild(rect);\n  }\n\n  const rsvg = rough.svg(svgRoot);\n  renderSceneToSvg(elements, rsvg, svgRoot, {\n    offsetX: -minX + exportPadding,\n    offsetY: -minY + exportPadding,\n  });\n  return svgRoot;\n}\n"]},"metadata":{},"sourceType":"module"}