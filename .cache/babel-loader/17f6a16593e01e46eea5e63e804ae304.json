{"ast":null,"code":"import _slicedToArray from \"/home/pro/Solutions/drawboard-light/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { RoughPath, PathFitter, RoughArcConverter } from './path.js';\nimport { getFiller } from './fillers/filler.js';\nimport { Random } from './math.js';\nvar helper = {\n  randOffset: randOffset,\n  randOffsetWithRange: randOffsetWithRange,\n  ellipse: ellipse,\n  doubleLineOps: doubleLineOps\n};\nexport function line(x1, y1, x2, y2, o) {\n  return {\n    type: 'path',\n    ops: _doubleLine(x1, y1, x2, y2, o)\n  };\n}\nexport function linearPath(points, close, o) {\n  var len = (points || []).length;\n\n  if (len > 2) {\n    var ops = [];\n\n    for (var i = 0; i < len - 1; i++) {\n      ops = ops.concat(_doubleLine(points[i][0], points[i][1], points[i + 1][0], points[i + 1][1], o));\n    }\n\n    if (close) {\n      ops = ops.concat(_doubleLine(points[len - 1][0], points[len - 1][1], points[0][0], points[0][1], o));\n    }\n\n    return {\n      type: 'path',\n      ops: ops\n    };\n  } else if (len === 2) {\n    return line(points[0][0], points[0][1], points[1][0], points[1][1], o);\n  }\n\n  return {\n    type: 'path',\n    ops: []\n  };\n}\nexport function polygon(points, o) {\n  return linearPath(points, true, o);\n}\nexport function rectangle(x, y, width, height, o) {\n  var points = [[x, y], [x + width, y], [x + width, y + height], [x, y + height]];\n  return polygon(points, o);\n}\nexport function curve(points, o) {\n  var o1 = _curveWithOffset(points, 1 * (1 + o.roughness * 0.2), o);\n\n  var o2 = _curveWithOffset(points, 1.5 * (1 + o.roughness * 0.22), o);\n\n  return {\n    type: 'path',\n    ops: o1.concat(o2)\n  };\n}\nexport function ellipse(x, y, width, height, o) {\n  var params = generateEllipseParams(width, height, o);\n  return ellipseWithParams(x, y, o, params).opset;\n}\nexport function generateEllipseParams(width, height, o) {\n  var psq = Math.sqrt(Math.PI * 2 * Math.sqrt((Math.pow(width / 2, 2) + Math.pow(height / 2, 2)) / 2));\n  var stepCount = Math.max(o.curveStepCount, o.curveStepCount / Math.sqrt(200) * psq);\n  var increment = Math.PI * 2 / stepCount;\n  var rx = Math.abs(width / 2);\n  var ry = Math.abs(height / 2);\n  var curveFitRandomness = 1 - o.curveFitting;\n  rx += _offsetOpt(rx * curveFitRandomness, o);\n  ry += _offsetOpt(ry * curveFitRandomness, o);\n  return {\n    increment: increment,\n    rx: rx,\n    ry: ry\n  };\n}\nexport function ellipseWithParams(x, y, o, ellipseParams) {\n  var _computeEllipsePoints2 = _computeEllipsePoints(ellipseParams.increment, x, y, ellipseParams.rx, ellipseParams.ry, 1, ellipseParams.increment * _offset(0.1, _offset(0.4, 1, o), o), o),\n      _computeEllipsePoints3 = _slicedToArray(_computeEllipsePoints2, 2),\n      ap1 = _computeEllipsePoints3[0],\n      cp1 = _computeEllipsePoints3[1];\n\n  var _computeEllipsePoints4 = _computeEllipsePoints(ellipseParams.increment, x, y, ellipseParams.rx, ellipseParams.ry, 1.5, 0, o),\n      _computeEllipsePoints5 = _slicedToArray(_computeEllipsePoints4, 1),\n      ap2 = _computeEllipsePoints5[0];\n\n  var o1 = _curve(ap1, null, o);\n\n  var o2 = _curve(ap2, null, o);\n\n  return {\n    estimatedPoints: cp1,\n    opset: {\n      type: 'path',\n      ops: o1.concat(o2)\n    }\n  };\n}\nexport function arc(x, y, width, height, start, stop, closed, roughClosure, o) {\n  var cx = x;\n  var cy = y;\n  var rx = Math.abs(width / 2);\n  var ry = Math.abs(height / 2);\n  rx += _offsetOpt(rx * 0.01, o);\n  ry += _offsetOpt(ry * 0.01, o);\n  var strt = start;\n  var stp = stop;\n\n  while (strt < 0) {\n    strt += Math.PI * 2;\n    stp += Math.PI * 2;\n  }\n\n  if (stp - strt > Math.PI * 2) {\n    strt = 0;\n    stp = Math.PI * 2;\n  }\n\n  var ellipseInc = Math.PI * 2 / o.curveStepCount;\n  var arcInc = Math.min(ellipseInc / 2, (stp - strt) / 2);\n\n  var o1 = _arc(arcInc, cx, cy, rx, ry, strt, stp, 1, o);\n\n  var o2 = _arc(arcInc, cx, cy, rx, ry, strt, stp, 1.5, o);\n\n  var ops = o1.concat(o2);\n\n  if (closed) {\n    if (roughClosure) {\n      ops = ops.concat(_doubleLine(cx, cy, cx + rx * Math.cos(strt), cy + ry * Math.sin(strt), o));\n      ops = ops.concat(_doubleLine(cx, cy, cx + rx * Math.cos(stp), cy + ry * Math.sin(stp), o));\n    } else {\n      ops.push({\n        op: 'lineTo',\n        data: [cx, cy]\n      });\n      ops.push({\n        op: 'lineTo',\n        data: [cx + rx * Math.cos(strt), cy + ry * Math.sin(strt)]\n      });\n    }\n  }\n\n  return {\n    type: 'path',\n    ops: ops\n  };\n}\nexport function svgPath(path, o) {\n  path = (path || '').replace(/\\n/g, ' ').replace(/(-\\s)/g, '-').replace('/(\\s\\s)/g', ' ');\n  var p = new RoughPath(path);\n\n  if (o.simplification) {\n    var fitter = new PathFitter(p.linearPoints, p.closed);\n    var d = fitter.fit(o.simplification);\n    p = new RoughPath(d);\n  }\n\n  var ops = [];\n  var segments = p.segments || [];\n\n  for (var i = 0; i < segments.length; i++) {\n    var s = segments[i];\n    var prev = i > 0 ? segments[i - 1] : null;\n\n    var opList = _processSegment(p, s, prev, o);\n\n    if (opList && opList.length) {\n      ops = ops.concat(opList);\n    }\n  }\n\n  return {\n    type: 'path',\n    ops: ops\n  };\n} // Fills\n\nexport function solidFillPolygon(points, o) {\n  var ops = [];\n\n  if (points.length) {\n    var offset = o.maxRandomnessOffset || 0;\n    var len = points.length;\n\n    if (len > 2) {\n      ops.push({\n        op: 'move',\n        data: [points[0][0] + _offsetOpt(offset, o), points[0][1] + _offsetOpt(offset, o)]\n      });\n\n      for (var i = 1; i < len; i++) {\n        ops.push({\n          op: 'lineTo',\n          data: [points[i][0] + _offsetOpt(offset, o), points[i][1] + _offsetOpt(offset, o)]\n        });\n      }\n    }\n  }\n\n  return {\n    type: 'fillPath',\n    ops: ops\n  };\n}\nexport function patternFillPolygon(points, o) {\n  return getFiller(o, helper).fillPolygon(points, o);\n}\nexport function patternFillArc(x, y, width, height, start, stop, o) {\n  var cx = x;\n  var cy = y;\n  var rx = Math.abs(width / 2);\n  var ry = Math.abs(height / 2);\n  rx += _offsetOpt(rx * 0.01, o);\n  ry += _offsetOpt(ry * 0.01, o);\n  var strt = start;\n  var stp = stop;\n\n  while (strt < 0) {\n    strt += Math.PI * 2;\n    stp += Math.PI * 2;\n  }\n\n  if (stp - strt > Math.PI * 2) {\n    strt = 0;\n    stp = Math.PI * 2;\n  }\n\n  var increment = (stp - strt) / o.curveStepCount;\n  var points = [];\n\n  for (var angle = strt; angle <= stp; angle = angle + increment) {\n    points.push([cx + rx * Math.cos(angle), cy + ry * Math.sin(angle)]);\n  }\n\n  points.push([cx + rx * Math.cos(stp), cy + ry * Math.sin(stp)]);\n  points.push([cx, cy]);\n  return patternFillPolygon(points, o);\n}\nexport function randOffset(x, o) {\n  return _offsetOpt(x, o);\n}\nexport function randOffsetWithRange(min, max, o) {\n  return _offset(min, max, o);\n}\nexport function doubleLineOps(x1, y1, x2, y2, o) {\n  return _doubleLine(x1, y1, x2, y2, o);\n} // Private helpers\n\nfunction random(ops) {\n  if (!ops.randomizer) {\n    ops.randomizer = new Random(ops.seed || 0);\n  }\n\n  return ops.randomizer.next();\n}\n\nfunction _offset(min, max, ops) {\n  return ops.roughness * ops.roughnessGain * (random(ops) * (max - min) + min);\n}\n\nfunction _offsetOpt(x, ops) {\n  return _offset(-x, x, ops);\n}\n\nfunction _doubleLine(x1, y1, x2, y2, o) {\n  var o1 = _line(x1, y1, x2, y2, o, true, false);\n\n  var o2 = _line(x1, y1, x2, y2, o, true, true);\n\n  return o1.concat(o2);\n}\n\nfunction _line(x1, y1, x2, y2, o, move, overlay) {\n  var lengthSq = Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2);\n  var length = Math.sqrt(lengthSq);\n\n  if (length < 200) {\n    o.roughnessGain = 1;\n  } else if (length > 500) {\n    o.roughnessGain = 0.4;\n  } else {\n    o.roughnessGain = -0.0016668 * length + 1.233334;\n  }\n\n  var offset = o.maxRandomnessOffset || 0;\n\n  if (offset * offset * 100 > lengthSq) {\n    offset = length / 10;\n  }\n\n  var halfOffset = offset / 2;\n  var divergePoint = 0.2 + random(o) * 0.2;\n  var midDispX = o.bowing * o.maxRandomnessOffset * (y2 - y1) / 200;\n  var midDispY = o.bowing * o.maxRandomnessOffset * (x1 - x2) / 200;\n  midDispX = _offsetOpt(midDispX, o);\n  midDispY = _offsetOpt(midDispY, o);\n  var ops = [];\n\n  var randomHalf = function randomHalf() {\n    return _offsetOpt(halfOffset, o);\n  };\n\n  var randomFull = function randomFull() {\n    return _offsetOpt(offset, o);\n  };\n\n  if (move) {\n    if (overlay) {\n      ops.push({\n        op: 'move',\n        data: [x1 + randomHalf(), y1 + randomHalf()]\n      });\n    } else {\n      ops.push({\n        op: 'move',\n        data: [x1 + _offsetOpt(offset, o), y1 + _offsetOpt(offset, o)]\n      });\n    }\n  }\n\n  if (overlay) {\n    ops.push({\n      op: 'bcurveTo',\n      data: [midDispX + x1 + (x2 - x1) * divergePoint + randomHalf(), midDispY + y1 + (y2 - y1) * divergePoint + randomHalf(), midDispX + x1 + 2 * (x2 - x1) * divergePoint + randomHalf(), midDispY + y1 + 2 * (y2 - y1) * divergePoint + randomHalf(), x2 + randomHalf(), y2 + randomHalf()]\n    });\n  } else {\n    ops.push({\n      op: 'bcurveTo',\n      data: [midDispX + x1 + (x2 - x1) * divergePoint + randomFull(), midDispY + y1 + (y2 - y1) * divergePoint + randomFull(), midDispX + x1 + 2 * (x2 - x1) * divergePoint + randomFull(), midDispY + y1 + 2 * (y2 - y1) * divergePoint + randomFull(), x2 + randomFull(), y2 + randomFull()]\n    });\n  }\n\n  return ops;\n}\n\nfunction _curveWithOffset(points, offset, o) {\n  var ps = [];\n  ps.push([points[0][0] + _offsetOpt(offset, o), points[0][1] + _offsetOpt(offset, o)]);\n  ps.push([points[0][0] + _offsetOpt(offset, o), points[0][1] + _offsetOpt(offset, o)]);\n\n  for (var i = 1; i < points.length; i++) {\n    ps.push([points[i][0] + _offsetOpt(offset, o), points[i][1] + _offsetOpt(offset, o)]);\n\n    if (i === points.length - 1) {\n      ps.push([points[i][0] + _offsetOpt(offset, o), points[i][1] + _offsetOpt(offset, o)]);\n    }\n  }\n\n  return _curve(ps, null, o);\n}\n\nfunction _curve(points, closePoint, o) {\n  var len = points.length;\n  var ops = [];\n\n  if (len > 3) {\n    var b = [];\n    var s = 1 - o.curveTightness;\n    ops.push({\n      op: 'move',\n      data: [points[1][0], points[1][1]]\n    });\n\n    for (var i = 1; i + 2 < len; i++) {\n      var cachedVertArray = points[i];\n      b[0] = [cachedVertArray[0], cachedVertArray[1]];\n      b[1] = [cachedVertArray[0] + (s * points[i + 1][0] - s * points[i - 1][0]) / 6, cachedVertArray[1] + (s * points[i + 1][1] - s * points[i - 1][1]) / 6];\n      b[2] = [points[i + 1][0] + (s * points[i][0] - s * points[i + 2][0]) / 6, points[i + 1][1] + (s * points[i][1] - s * points[i + 2][1]) / 6];\n      b[3] = [points[i + 1][0], points[i + 1][1]];\n      ops.push({\n        op: 'bcurveTo',\n        data: [b[1][0], b[1][1], b[2][0], b[2][1], b[3][0], b[3][1]]\n      });\n    }\n\n    if (closePoint && closePoint.length === 2) {\n      var ro = o.maxRandomnessOffset;\n      ops.push({\n        op: 'lineTo',\n        data: [closePoint[0] + _offsetOpt(ro, o), closePoint[1] + _offsetOpt(ro, o)]\n      });\n    }\n  } else if (len === 3) {\n    ops.push({\n      op: 'move',\n      data: [points[1][0], points[1][1]]\n    });\n    ops.push({\n      op: 'bcurveTo',\n      data: [points[1][0], points[1][1], points[2][0], points[2][1], points[2][0], points[2][1]]\n    });\n  } else if (len === 2) {\n    ops = ops.concat(_doubleLine(points[0][0], points[0][1], points[1][0], points[1][1], o));\n  }\n\n  return ops;\n}\n\nfunction _computeEllipsePoints(increment, cx, cy, rx, ry, offset, overlap, o) {\n  var corePoints = [];\n  var allPoints = [];\n  var radOffset = _offsetOpt(0.5, o) - Math.PI / 2;\n  allPoints.push([_offsetOpt(offset, o) + cx + 0.9 * rx * Math.cos(radOffset - increment), _offsetOpt(offset, o) + cy + 0.9 * ry * Math.sin(radOffset - increment)]);\n\n  for (var angle = radOffset; angle < Math.PI * 2 + radOffset - 0.01; angle = angle + increment) {\n    var p = [_offsetOpt(offset, o) + cx + rx * Math.cos(angle), _offsetOpt(offset, o) + cy + ry * Math.sin(angle)];\n    corePoints.push(p);\n    allPoints.push(p);\n  }\n\n  allPoints.push([_offsetOpt(offset, o) + cx + rx * Math.cos(radOffset + Math.PI * 2 + overlap * 0.5), _offsetOpt(offset, o) + cy + ry * Math.sin(radOffset + Math.PI * 2 + overlap * 0.5)]);\n  allPoints.push([_offsetOpt(offset, o) + cx + 0.98 * rx * Math.cos(radOffset + overlap), _offsetOpt(offset, o) + cy + 0.98 * ry * Math.sin(radOffset + overlap)]);\n  allPoints.push([_offsetOpt(offset, o) + cx + 0.9 * rx * Math.cos(radOffset + overlap * 0.5), _offsetOpt(offset, o) + cy + 0.9 * ry * Math.sin(radOffset + overlap * 0.5)]);\n  return [allPoints, corePoints];\n}\n\nfunction _arc(increment, cx, cy, rx, ry, strt, stp, offset, o) {\n  var radOffset = strt + _offsetOpt(0.1, o);\n\n  var points = [];\n  points.push([_offsetOpt(offset, o) + cx + 0.9 * rx * Math.cos(radOffset - increment), _offsetOpt(offset, o) + cy + 0.9 * ry * Math.sin(radOffset - increment)]);\n\n  for (var angle = radOffset; angle <= stp; angle = angle + increment) {\n    points.push([_offsetOpt(offset, o) + cx + rx * Math.cos(angle), _offsetOpt(offset, o) + cy + ry * Math.sin(angle)]);\n  }\n\n  points.push([cx + rx * Math.cos(stp), cy + ry * Math.sin(stp)]);\n  points.push([cx + rx * Math.cos(stp), cy + ry * Math.sin(stp)]);\n  return _curve(points, null, o);\n}\n\nfunction _bezierTo(x1, y1, x2, y2, x, y, path, o) {\n  var ops = [];\n  var ros = [o.maxRandomnessOffset || 1, (o.maxRandomnessOffset || 1) + 0.5];\n  var f = [0, 0];\n\n  for (var i = 0; i < 2; i++) {\n    if (i === 0) {\n      ops.push({\n        op: 'move',\n        data: [path.x, path.y]\n      });\n    } else {\n      ops.push({\n        op: 'move',\n        data: [path.x + _offsetOpt(ros[0], o), path.y + _offsetOpt(ros[0], o)]\n      });\n    }\n\n    f = [x + _offsetOpt(ros[i], o), y + _offsetOpt(ros[i], o)];\n    ops.push({\n      op: 'bcurveTo',\n      data: [x1 + _offsetOpt(ros[i], o), y1 + _offsetOpt(ros[i], o), x2 + _offsetOpt(ros[i], o), y2 + _offsetOpt(ros[i], o), f[0], f[1]]\n    });\n  }\n\n  path.setPosition(f[0], f[1]);\n  return ops;\n}\n\nfunction _processSegment(path, seg, prevSeg, o) {\n  var ops = [];\n\n  switch (seg.key) {\n    case 'M':\n    case 'm':\n      {\n        var delta = seg.key === 'm';\n\n        if (seg.data.length >= 2) {\n          var x = +seg.data[0];\n          var y = +seg.data[1];\n\n          if (delta) {\n            x += path.x;\n            y += path.y;\n          }\n\n          var ro = 1 * (o.maxRandomnessOffset || 0);\n          x = x + _offsetOpt(ro, o);\n          y = y + _offsetOpt(ro, o);\n          path.setPosition(x, y);\n          ops.push({\n            op: 'move',\n            data: [x, y]\n          });\n        }\n\n        break;\n      }\n\n    case 'L':\n    case 'l':\n      {\n        var _delta = seg.key === 'l';\n\n        if (seg.data.length >= 2) {\n          var _x = +seg.data[0];\n\n          var _y = +seg.data[1];\n\n          if (_delta) {\n            _x += path.x;\n            _y += path.y;\n          }\n\n          ops = ops.concat(_doubleLine(path.x, path.y, _x, _y, o));\n          path.setPosition(_x, _y);\n        }\n\n        break;\n      }\n\n    case 'H':\n    case 'h':\n      {\n        var _delta2 = seg.key === 'h';\n\n        if (seg.data.length) {\n          var _x2 = +seg.data[0];\n\n          if (_delta2) {\n            _x2 += path.x;\n          }\n\n          ops = ops.concat(_doubleLine(path.x, path.y, _x2, path.y, o));\n          path.setPosition(_x2, path.y);\n        }\n\n        break;\n      }\n\n    case 'V':\n    case 'v':\n      {\n        var _delta3 = seg.key === 'v';\n\n        if (seg.data.length) {\n          var _y2 = +seg.data[0];\n\n          if (_delta3) {\n            _y2 += path.y;\n          }\n\n          ops = ops.concat(_doubleLine(path.x, path.y, path.x, _y2, o));\n          path.setPosition(path.x, _y2);\n        }\n\n        break;\n      }\n\n    case 'Z':\n    case 'z':\n      {\n        if (path.first) {\n          ops = ops.concat(_doubleLine(path.x, path.y, path.first[0], path.first[1], o));\n          path.setPosition(path.first[0], path.first[1]);\n          path.first = null;\n        }\n\n        break;\n      }\n\n    case 'C':\n    case 'c':\n      {\n        var _delta4 = seg.key === 'c';\n\n        if (seg.data.length >= 6) {\n          var x1 = +seg.data[0];\n          var y1 = +seg.data[1];\n          var x2 = +seg.data[2];\n          var y2 = +seg.data[3];\n\n          var _x3 = +seg.data[4];\n\n          var _y3 = +seg.data[5];\n\n          if (_delta4) {\n            x1 += path.x;\n            x2 += path.x;\n            _x3 += path.x;\n            y1 += path.y;\n            y2 += path.y;\n            _y3 += path.y;\n          }\n\n          var ob = _bezierTo(x1, y1, x2, y2, _x3, _y3, path, o);\n\n          ops = ops.concat(ob);\n          path.bezierReflectionPoint = [_x3 + (_x3 - x2), _y3 + (_y3 - y2)];\n        }\n\n        break;\n      }\n\n    case 'S':\n    case 's':\n      {\n        var _delta5 = seg.key === 's';\n\n        if (seg.data.length >= 4) {\n          var _x4 = +seg.data[0];\n\n          var _y4 = +seg.data[1];\n\n          var _x5 = +seg.data[2];\n\n          var _y5 = +seg.data[3];\n\n          if (_delta5) {\n            _x4 += path.x;\n            _x5 += path.x;\n            _y4 += path.y;\n            _y5 += path.y;\n          }\n\n          var _x6 = _x4;\n          var _y6 = _y4;\n          var prevKey = prevSeg ? prevSeg.key : '';\n          var ref = null;\n\n          if (prevKey === 'c' || prevKey === 'C' || prevKey === 's' || prevKey === 'S') {\n            ref = path.bezierReflectionPoint;\n          }\n\n          if (ref) {\n            _x6 = ref[0];\n            _y6 = ref[1];\n          }\n\n          var _ob = _bezierTo(_x6, _y6, _x4, _y4, _x5, _y5, path, o);\n\n          ops = ops.concat(_ob);\n          path.bezierReflectionPoint = [_x5 + (_x5 - _x4), _y5 + (_y5 - _y4)];\n        }\n\n        break;\n      }\n\n    case 'Q':\n    case 'q':\n      {\n        var _delta6 = seg.key === 'q';\n\n        if (seg.data.length >= 4) {\n          var _x7 = +seg.data[0];\n\n          var _y7 = +seg.data[1];\n\n          var _x8 = +seg.data[2];\n\n          var _y8 = +seg.data[3];\n\n          if (_delta6) {\n            _x7 += path.x;\n            _x8 += path.x;\n            _y7 += path.y;\n            _y8 += path.y;\n          }\n\n          var offset1 = 1 * (1 + o.roughness * 0.2);\n          var offset2 = 1.5 * (1 + o.roughness * 0.22);\n          ops.push({\n            op: 'move',\n            data: [path.x + _offsetOpt(offset1, o), path.y + _offsetOpt(offset1, o)]\n          });\n          var f = [_x8 + _offsetOpt(offset1, o), _y8 + _offsetOpt(offset1, o)];\n          ops.push({\n            op: 'qcurveTo',\n            data: [_x7 + _offsetOpt(offset1, o), _y7 + _offsetOpt(offset1, o), f[0], f[1]]\n          });\n          ops.push({\n            op: 'move',\n            data: [path.x + _offsetOpt(offset2, o), path.y + _offsetOpt(offset2, o)]\n          });\n          f = [_x8 + _offsetOpt(offset2, o), _y8 + _offsetOpt(offset2, o)];\n          ops.push({\n            op: 'qcurveTo',\n            data: [_x7 + _offsetOpt(offset2, o), _y7 + _offsetOpt(offset2, o), f[0], f[1]]\n          });\n          path.setPosition(f[0], f[1]);\n          path.quadReflectionPoint = [_x8 + (_x8 - _x7), _y8 + (_y8 - _y7)];\n        }\n\n        break;\n      }\n\n    case 'T':\n    case 't':\n      {\n        var _delta7 = seg.key === 't';\n\n        if (seg.data.length >= 2) {\n          var _x9 = +seg.data[0];\n\n          var _y9 = +seg.data[1];\n\n          if (_delta7) {\n            _x9 += path.x;\n            _y9 += path.y;\n          }\n\n          var _x10 = _x9;\n          var _y10 = _y9;\n\n          var _prevKey = prevSeg ? prevSeg.key : '';\n\n          var _ref = null;\n\n          if (_prevKey === 'q' || _prevKey === 'Q' || _prevKey === 't' || _prevKey === 'T') {\n            _ref = path.quadReflectionPoint;\n          }\n\n          if (_ref) {\n            _x10 = _ref[0];\n            _y10 = _ref[1];\n          }\n\n          var _offset2 = 1 * (1 + o.roughness * 0.2);\n\n          var _offset3 = 1.5 * (1 + o.roughness * 0.22);\n\n          ops.push({\n            op: 'move',\n            data: [path.x + _offsetOpt(_offset2, o), path.y + _offsetOpt(_offset2, o)]\n          });\n          var _f = [_x9 + _offsetOpt(_offset2, o), _y9 + _offsetOpt(_offset2, o)];\n          ops.push({\n            op: 'qcurveTo',\n            data: [_x10 + _offsetOpt(_offset2, o), _y10 + _offsetOpt(_offset2, o), _f[0], _f[1]]\n          });\n          ops.push({\n            op: 'move',\n            data: [path.x + _offsetOpt(_offset3, o), path.y + _offsetOpt(_offset3, o)]\n          });\n          _f = [_x9 + _offsetOpt(_offset3, o), _y9 + _offsetOpt(_offset3, o)];\n          ops.push({\n            op: 'qcurveTo',\n            data: [_x10 + _offsetOpt(_offset3, o), _y10 + _offsetOpt(_offset3, o), _f[0], _f[1]]\n          });\n          path.setPosition(_f[0], _f[1]);\n          path.quadReflectionPoint = [_x9 + (_x9 - _x10), _y9 + (_y9 - _y10)];\n        }\n\n        break;\n      }\n\n    case 'A':\n    case 'a':\n      {\n        var _delta8 = seg.key === 'a';\n\n        if (seg.data.length >= 7) {\n          var rx = +seg.data[0];\n          var ry = +seg.data[1];\n          var angle = +seg.data[2];\n          var largeArcFlag = +seg.data[3];\n          var sweepFlag = +seg.data[4];\n\n          var _x11 = +seg.data[5];\n\n          var _y11 = +seg.data[6];\n\n          if (_delta8) {\n            _x11 += path.x;\n            _y11 += path.y;\n          }\n\n          if (_x11 === path.x && _y11 === path.y) {\n            break;\n          }\n\n          if (rx === 0 || ry === 0) {\n            ops = ops.concat(_doubleLine(path.x, path.y, _x11, _y11, o));\n            path.setPosition(_x11, _y11);\n          } else {\n            for (var i = 0; i < 1; i++) {\n              var arcConverter = new RoughArcConverter([path.x, path.y], [_x11, _y11], [rx, ry], angle, largeArcFlag ? true : false, sweepFlag ? true : false);\n              var segment = arcConverter.getNextSegment();\n\n              while (segment) {\n                var _ob2 = _bezierTo(segment.cp1[0], segment.cp1[1], segment.cp2[0], segment.cp2[1], segment.to[0], segment.to[1], path, o);\n\n                ops = ops.concat(_ob2);\n                segment = arcConverter.getNextSegment();\n              }\n            }\n          }\n        }\n\n        break;\n      }\n\n    default:\n      break;\n  }\n\n  return ops;\n}","map":{"version":3,"sources":["/home/pro/Solutions/drawboard-light/node_modules/roughjs/bin/renderer.js"],"names":["RoughPath","PathFitter","RoughArcConverter","getFiller","Random","helper","randOffset","randOffsetWithRange","ellipse","doubleLineOps","line","x1","y1","x2","y2","o","type","ops","_doubleLine","linearPath","points","close","len","length","i","concat","polygon","rectangle","x","y","width","height","curve","o1","_curveWithOffset","roughness","o2","params","generateEllipseParams","ellipseWithParams","opset","psq","Math","sqrt","PI","pow","stepCount","max","curveStepCount","increment","rx","abs","ry","curveFitRandomness","curveFitting","_offsetOpt","ellipseParams","_computeEllipsePoints","_offset","ap1","cp1","ap2","_curve","estimatedPoints","arc","start","stop","closed","roughClosure","cx","cy","strt","stp","ellipseInc","arcInc","min","_arc","cos","sin","push","op","data","svgPath","path","replace","p","simplification","fitter","linearPoints","d","fit","segments","s","prev","opList","_processSegment","solidFillPolygon","offset","maxRandomnessOffset","patternFillPolygon","fillPolygon","patternFillArc","angle","random","randomizer","seed","next","roughnessGain","_line","move","overlay","lengthSq","halfOffset","divergePoint","midDispX","bowing","midDispY","randomHalf","randomFull","ps","closePoint","b","curveTightness","cachedVertArray","ro","overlap","corePoints","allPoints","radOffset","_bezierTo","ros","f","setPosition","seg","prevSeg","key","delta","first","ob","bezierReflectionPoint","prevKey","ref","offset1","offset2","quadReflectionPoint","largeArcFlag","sweepFlag","arcConverter","segment","getNextSegment","cp2","to"],"mappings":";AAAA,SAASA,SAAT,EAAoBC,UAApB,EAAgCC,iBAAhC,QAAyD,WAAzD;AACA,SAASC,SAAT,QAA0B,qBAA1B;AACA,SAASC,MAAT,QAAuB,WAAvB;AACA,IAAMC,MAAM,GAAG;AACXC,EAAAA,UAAU,EAAVA,UADW;AAEXC,EAAAA,mBAAmB,EAAnBA,mBAFW;AAGXC,EAAAA,OAAO,EAAPA,OAHW;AAIXC,EAAAA,aAAa,EAAbA;AAJW,CAAf;AAMA,OAAO,SAASC,IAAT,CAAcC,EAAd,EAAkBC,EAAlB,EAAsBC,EAAtB,EAA0BC,EAA1B,EAA8BC,CAA9B,EAAiC;AACpC,SAAO;AAAEC,IAAAA,IAAI,EAAE,MAAR;AAAgBC,IAAAA,GAAG,EAAEC,WAAW,CAACP,EAAD,EAAKC,EAAL,EAASC,EAAT,EAAaC,EAAb,EAAiBC,CAAjB;AAAhC,GAAP;AACH;AACD,OAAO,SAASI,UAAT,CAAoBC,MAApB,EAA4BC,KAA5B,EAAmCN,CAAnC,EAAsC;AACzC,MAAMO,GAAG,GAAG,CAACF,MAAM,IAAI,EAAX,EAAeG,MAA3B;;AACA,MAAID,GAAG,GAAG,CAAV,EAAa;AACT,QAAIL,GAAG,GAAG,EAAV;;AACA,SAAK,IAAIO,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAIF,GAAG,GAAG,CAA3B,EAA+BE,CAAC,EAAhC,EAAoC;AAChCP,MAAAA,GAAG,GAAGA,GAAG,CAACQ,MAAJ,CAAWP,WAAW,CAACE,MAAM,CAACI,CAAD,CAAN,CAAU,CAAV,CAAD,EAAeJ,MAAM,CAACI,CAAD,CAAN,CAAU,CAAV,CAAf,EAA6BJ,MAAM,CAACI,CAAC,GAAG,CAAL,CAAN,CAAc,CAAd,CAA7B,EAA+CJ,MAAM,CAACI,CAAC,GAAG,CAAL,CAAN,CAAc,CAAd,CAA/C,EAAiET,CAAjE,CAAtB,CAAN;AACH;;AACD,QAAIM,KAAJ,EAAW;AACPJ,MAAAA,GAAG,GAAGA,GAAG,CAACQ,MAAJ,CAAWP,WAAW,CAACE,MAAM,CAACE,GAAG,GAAG,CAAP,CAAN,CAAgB,CAAhB,CAAD,EAAqBF,MAAM,CAACE,GAAG,GAAG,CAAP,CAAN,CAAgB,CAAhB,CAArB,EAAyCF,MAAM,CAAC,CAAD,CAAN,CAAU,CAAV,CAAzC,EAAuDA,MAAM,CAAC,CAAD,CAAN,CAAU,CAAV,CAAvD,EAAqEL,CAArE,CAAtB,CAAN;AACH;;AACD,WAAO;AAAEC,MAAAA,IAAI,EAAE,MAAR;AAAgBC,MAAAA,GAAG,EAAHA;AAAhB,KAAP;AACH,GATD,MAUK,IAAIK,GAAG,KAAK,CAAZ,EAAe;AAChB,WAAOZ,IAAI,CAACU,MAAM,CAAC,CAAD,CAAN,CAAU,CAAV,CAAD,EAAeA,MAAM,CAAC,CAAD,CAAN,CAAU,CAAV,CAAf,EAA6BA,MAAM,CAAC,CAAD,CAAN,CAAU,CAAV,CAA7B,EAA2CA,MAAM,CAAC,CAAD,CAAN,CAAU,CAAV,CAA3C,EAAyDL,CAAzD,CAAX;AACH;;AACD,SAAO;AAAEC,IAAAA,IAAI,EAAE,MAAR;AAAgBC,IAAAA,GAAG,EAAE;AAArB,GAAP;AACH;AACD,OAAO,SAASS,OAAT,CAAiBN,MAAjB,EAAyBL,CAAzB,EAA4B;AAC/B,SAAOI,UAAU,CAACC,MAAD,EAAS,IAAT,EAAeL,CAAf,CAAjB;AACH;AACD,OAAO,SAASY,SAAT,CAAmBC,CAAnB,EAAsBC,CAAtB,EAAyBC,KAAzB,EAAgCC,MAAhC,EAAwChB,CAAxC,EAA2C;AAC9C,MAAMK,MAAM,GAAG,CACX,CAACQ,CAAD,EAAIC,CAAJ,CADW,EACH,CAACD,CAAC,GAAGE,KAAL,EAAYD,CAAZ,CADG,EACa,CAACD,CAAC,GAAGE,KAAL,EAAYD,CAAC,GAAGE,MAAhB,CADb,EACsC,CAACH,CAAD,EAAIC,CAAC,GAAGE,MAAR,CADtC,CAAf;AAGA,SAAOL,OAAO,CAACN,MAAD,EAASL,CAAT,CAAd;AACH;AACD,OAAO,SAASiB,KAAT,CAAeZ,MAAf,EAAuBL,CAAvB,EAA0B;AAC7B,MAAMkB,EAAE,GAAGC,gBAAgB,CAACd,MAAD,EAAS,KAAK,IAAIL,CAAC,CAACoB,SAAF,GAAc,GAAvB,CAAT,EAAsCpB,CAAtC,CAA3B;;AACA,MAAMqB,EAAE,GAAGF,gBAAgB,CAACd,MAAD,EAAS,OAAO,IAAIL,CAAC,CAACoB,SAAF,GAAc,IAAzB,CAAT,EAAyCpB,CAAzC,CAA3B;;AACA,SAAO;AAAEC,IAAAA,IAAI,EAAE,MAAR;AAAgBC,IAAAA,GAAG,EAAEgB,EAAE,CAACR,MAAH,CAAUW,EAAV;AAArB,GAAP;AACH;AACD,OAAO,SAAS5B,OAAT,CAAiBoB,CAAjB,EAAoBC,CAApB,EAAuBC,KAAvB,EAA8BC,MAA9B,EAAsChB,CAAtC,EAAyC;AAC5C,MAAMsB,MAAM,GAAGC,qBAAqB,CAACR,KAAD,EAAQC,MAAR,EAAgBhB,CAAhB,CAApC;AACA,SAAOwB,iBAAiB,CAACX,CAAD,EAAIC,CAAJ,EAAOd,CAAP,EAAUsB,MAAV,CAAjB,CAAmCG,KAA1C;AACH;AACD,OAAO,SAASF,qBAAT,CAA+BR,KAA/B,EAAsCC,MAAtC,EAA8ChB,CAA9C,EAAiD;AACpD,MAAM0B,GAAG,GAAGC,IAAI,CAACC,IAAL,CAAUD,IAAI,CAACE,EAAL,GAAU,CAAV,GAAcF,IAAI,CAACC,IAAL,CAAU,CAACD,IAAI,CAACG,GAAL,CAASf,KAAK,GAAG,CAAjB,EAAoB,CAApB,IAAyBY,IAAI,CAACG,GAAL,CAASd,MAAM,GAAG,CAAlB,EAAqB,CAArB,CAA1B,IAAqD,CAA/D,CAAxB,CAAZ;AACA,MAAMe,SAAS,GAAGJ,IAAI,CAACK,GAAL,CAAShC,CAAC,CAACiC,cAAX,EAA4BjC,CAAC,CAACiC,cAAF,GAAmBN,IAAI,CAACC,IAAL,CAAU,GAAV,CAApB,GAAsCF,GAAjE,CAAlB;AACA,MAAMQ,SAAS,GAAIP,IAAI,CAACE,EAAL,GAAU,CAAX,GAAgBE,SAAlC;AACA,MAAII,EAAE,GAAGR,IAAI,CAACS,GAAL,CAASrB,KAAK,GAAG,CAAjB,CAAT;AACA,MAAIsB,EAAE,GAAGV,IAAI,CAACS,GAAL,CAASpB,MAAM,GAAG,CAAlB,CAAT;AACA,MAAMsB,kBAAkB,GAAG,IAAItC,CAAC,CAACuC,YAAjC;AACAJ,EAAAA,EAAE,IAAIK,UAAU,CAACL,EAAE,GAAGG,kBAAN,EAA0BtC,CAA1B,CAAhB;AACAqC,EAAAA,EAAE,IAAIG,UAAU,CAACH,EAAE,GAAGC,kBAAN,EAA0BtC,CAA1B,CAAhB;AACA,SAAO;AAAEkC,IAAAA,SAAS,EAATA,SAAF;AAAaC,IAAAA,EAAE,EAAFA,EAAb;AAAiBE,IAAAA,EAAE,EAAFA;AAAjB,GAAP;AACH;AACD,OAAO,SAASb,iBAAT,CAA2BX,CAA3B,EAA8BC,CAA9B,EAAiCd,CAAjC,EAAoCyC,aAApC,EAAmD;AAAA,+BACnCC,qBAAqB,CAACD,aAAa,CAACP,SAAf,EAA0BrB,CAA1B,EAA6BC,CAA7B,EAAgC2B,aAAa,CAACN,EAA9C,EAAkDM,aAAa,CAACJ,EAAhE,EAAoE,CAApE,EAAuEI,aAAa,CAACP,SAAd,GAA0BS,OAAO,CAAC,GAAD,EAAMA,OAAO,CAAC,GAAD,EAAM,CAAN,EAAS3C,CAAT,CAAb,EAA0BA,CAA1B,CAAxG,EAAsIA,CAAtI,CADc;AAAA;AAAA,MAC/C4C,GAD+C;AAAA,MAC1CC,GAD0C;;AAAA,+BAExCH,qBAAqB,CAACD,aAAa,CAACP,SAAf,EAA0BrB,CAA1B,EAA6BC,CAA7B,EAAgC2B,aAAa,CAACN,EAA9C,EAAkDM,aAAa,CAACJ,EAAhE,EAAoE,GAApE,EAAyE,CAAzE,EAA4ErC,CAA5E,CAFmB;AAAA;AAAA,MAE/C8C,GAF+C;;AAGtD,MAAM5B,EAAE,GAAG6B,MAAM,CAACH,GAAD,EAAM,IAAN,EAAY5C,CAAZ,CAAjB;;AACA,MAAMqB,EAAE,GAAG0B,MAAM,CAACD,GAAD,EAAM,IAAN,EAAY9C,CAAZ,CAAjB;;AACA,SAAO;AACHgD,IAAAA,eAAe,EAAEH,GADd;AAEHpB,IAAAA,KAAK,EAAE;AAAExB,MAAAA,IAAI,EAAE,MAAR;AAAgBC,MAAAA,GAAG,EAAEgB,EAAE,CAACR,MAAH,CAAUW,EAAV;AAArB;AAFJ,GAAP;AAIH;AACD,OAAO,SAAS4B,GAAT,CAAapC,CAAb,EAAgBC,CAAhB,EAAmBC,KAAnB,EAA0BC,MAA1B,EAAkCkC,KAAlC,EAAyCC,IAAzC,EAA+CC,MAA/C,EAAuDC,YAAvD,EAAqErD,CAArE,EAAwE;AAC3E,MAAMsD,EAAE,GAAGzC,CAAX;AACA,MAAM0C,EAAE,GAAGzC,CAAX;AACA,MAAIqB,EAAE,GAAGR,IAAI,CAACS,GAAL,CAASrB,KAAK,GAAG,CAAjB,CAAT;AACA,MAAIsB,EAAE,GAAGV,IAAI,CAACS,GAAL,CAASpB,MAAM,GAAG,CAAlB,CAAT;AACAmB,EAAAA,EAAE,IAAIK,UAAU,CAACL,EAAE,GAAG,IAAN,EAAYnC,CAAZ,CAAhB;AACAqC,EAAAA,EAAE,IAAIG,UAAU,CAACH,EAAE,GAAG,IAAN,EAAYrC,CAAZ,CAAhB;AACA,MAAIwD,IAAI,GAAGN,KAAX;AACA,MAAIO,GAAG,GAAGN,IAAV;;AACA,SAAOK,IAAI,GAAG,CAAd,EAAiB;AACbA,IAAAA,IAAI,IAAI7B,IAAI,CAACE,EAAL,GAAU,CAAlB;AACA4B,IAAAA,GAAG,IAAI9B,IAAI,CAACE,EAAL,GAAU,CAAjB;AACH;;AACD,MAAK4B,GAAG,GAAGD,IAAP,GAAgB7B,IAAI,CAACE,EAAL,GAAU,CAA9B,EAAkC;AAC9B2B,IAAAA,IAAI,GAAG,CAAP;AACAC,IAAAA,GAAG,GAAG9B,IAAI,CAACE,EAAL,GAAU,CAAhB;AACH;;AACD,MAAM6B,UAAU,GAAI/B,IAAI,CAACE,EAAL,GAAU,CAAX,GAAgB7B,CAAC,CAACiC,cAArC;AACA,MAAM0B,MAAM,GAAGhC,IAAI,CAACiC,GAAL,CAASF,UAAU,GAAG,CAAtB,EAAyB,CAACD,GAAG,GAAGD,IAAP,IAAe,CAAxC,CAAf;;AACA,MAAMtC,EAAE,GAAG2C,IAAI,CAACF,MAAD,EAASL,EAAT,EAAaC,EAAb,EAAiBpB,EAAjB,EAAqBE,EAArB,EAAyBmB,IAAzB,EAA+BC,GAA/B,EAAoC,CAApC,EAAuCzD,CAAvC,CAAf;;AACA,MAAMqB,EAAE,GAAGwC,IAAI,CAACF,MAAD,EAASL,EAAT,EAAaC,EAAb,EAAiBpB,EAAjB,EAAqBE,EAArB,EAAyBmB,IAAzB,EAA+BC,GAA/B,EAAoC,GAApC,EAAyCzD,CAAzC,CAAf;;AACA,MAAIE,GAAG,GAAGgB,EAAE,CAACR,MAAH,CAAUW,EAAV,CAAV;;AACA,MAAI+B,MAAJ,EAAY;AACR,QAAIC,YAAJ,EAAkB;AACdnD,MAAAA,GAAG,GAAGA,GAAG,CAACQ,MAAJ,CAAWP,WAAW,CAACmD,EAAD,EAAKC,EAAL,EAASD,EAAE,GAAGnB,EAAE,GAAGR,IAAI,CAACmC,GAAL,CAASN,IAAT,CAAnB,EAAmCD,EAAE,GAAGlB,EAAE,GAAGV,IAAI,CAACoC,GAAL,CAASP,IAAT,CAA7C,EAA6DxD,CAA7D,CAAtB,CAAN;AACAE,MAAAA,GAAG,GAAGA,GAAG,CAACQ,MAAJ,CAAWP,WAAW,CAACmD,EAAD,EAAKC,EAAL,EAASD,EAAE,GAAGnB,EAAE,GAAGR,IAAI,CAACmC,GAAL,CAASL,GAAT,CAAnB,EAAkCF,EAAE,GAAGlB,EAAE,GAAGV,IAAI,CAACoC,GAAL,CAASN,GAAT,CAA5C,EAA2DzD,CAA3D,CAAtB,CAAN;AACH,KAHD,MAIK;AACDE,MAAAA,GAAG,CAAC8D,IAAJ,CAAS;AAAEC,QAAAA,EAAE,EAAE,QAAN;AAAgBC,QAAAA,IAAI,EAAE,CAACZ,EAAD,EAAKC,EAAL;AAAtB,OAAT;AACArD,MAAAA,GAAG,CAAC8D,IAAJ,CAAS;AAAEC,QAAAA,EAAE,EAAE,QAAN;AAAgBC,QAAAA,IAAI,EAAE,CAACZ,EAAE,GAAGnB,EAAE,GAAGR,IAAI,CAACmC,GAAL,CAASN,IAAT,CAAX,EAA2BD,EAAE,GAAGlB,EAAE,GAAGV,IAAI,CAACoC,GAAL,CAASP,IAAT,CAArC;AAAtB,OAAT;AACH;AACJ;;AACD,SAAO;AAAEvD,IAAAA,IAAI,EAAE,MAAR;AAAgBC,IAAAA,GAAG,EAAHA;AAAhB,GAAP;AACH;AACD,OAAO,SAASiE,OAAT,CAAiBC,IAAjB,EAAuBpE,CAAvB,EAA0B;AAC7BoE,EAAAA,IAAI,GAAG,CAACA,IAAI,IAAI,EAAT,EAAaC,OAAb,CAAqB,KAArB,EAA4B,GAA5B,EAAiCA,OAAjC,CAAyC,QAAzC,EAAmD,GAAnD,EAAwDA,OAAxD,CAAgE,WAAhE,EAA6E,GAA7E,CAAP;AACA,MAAIC,CAAC,GAAG,IAAIrF,SAAJ,CAAcmF,IAAd,CAAR;;AACA,MAAIpE,CAAC,CAACuE,cAAN,EAAsB;AAClB,QAAMC,MAAM,GAAG,IAAItF,UAAJ,CAAeoF,CAAC,CAACG,YAAjB,EAA+BH,CAAC,CAAClB,MAAjC,CAAf;AACA,QAAMsB,CAAC,GAAGF,MAAM,CAACG,GAAP,CAAW3E,CAAC,CAACuE,cAAb,CAAV;AACAD,IAAAA,CAAC,GAAG,IAAIrF,SAAJ,CAAcyF,CAAd,CAAJ;AACH;;AACD,MAAIxE,GAAG,GAAG,EAAV;AACA,MAAM0E,QAAQ,GAAGN,CAAC,CAACM,QAAF,IAAc,EAA/B;;AACA,OAAK,IAAInE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGmE,QAAQ,CAACpE,MAA7B,EAAqCC,CAAC,EAAtC,EAA0C;AACtC,QAAMoE,CAAC,GAAGD,QAAQ,CAACnE,CAAD,CAAlB;AACA,QAAMqE,IAAI,GAAGrE,CAAC,GAAG,CAAJ,GAAQmE,QAAQ,CAACnE,CAAC,GAAG,CAAL,CAAhB,GAA0B,IAAvC;;AACA,QAAMsE,MAAM,GAAGC,eAAe,CAACV,CAAD,EAAIO,CAAJ,EAAOC,IAAP,EAAa9E,CAAb,CAA9B;;AACA,QAAI+E,MAAM,IAAIA,MAAM,CAACvE,MAArB,EAA6B;AACzBN,MAAAA,GAAG,GAAGA,GAAG,CAACQ,MAAJ,CAAWqE,MAAX,CAAN;AACH;AACJ;;AACD,SAAO;AAAE9E,IAAAA,IAAI,EAAE,MAAR;AAAgBC,IAAAA,GAAG,EAAHA;AAAhB,GAAP;AACH,C,CACD;;AACA,OAAO,SAAS+E,gBAAT,CAA0B5E,MAA1B,EAAkCL,CAAlC,EAAqC;AACxC,MAAME,GAAG,GAAG,EAAZ;;AACA,MAAIG,MAAM,CAACG,MAAX,EAAmB;AACf,QAAM0E,MAAM,GAAGlF,CAAC,CAACmF,mBAAF,IAAyB,CAAxC;AACA,QAAM5E,GAAG,GAAGF,MAAM,CAACG,MAAnB;;AACA,QAAID,GAAG,GAAG,CAAV,EAAa;AACTL,MAAAA,GAAG,CAAC8D,IAAJ,CAAS;AAAEC,QAAAA,EAAE,EAAE,MAAN;AAAcC,QAAAA,IAAI,EAAE,CAAC7D,MAAM,CAAC,CAAD,CAAN,CAAU,CAAV,IAAemC,UAAU,CAAC0C,MAAD,EAASlF,CAAT,CAA1B,EAAuCK,MAAM,CAAC,CAAD,CAAN,CAAU,CAAV,IAAemC,UAAU,CAAC0C,MAAD,EAASlF,CAAT,CAAhE;AAApB,OAAT;;AACA,WAAK,IAAIS,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,GAApB,EAAyBE,CAAC,EAA1B,EAA8B;AAC1BP,QAAAA,GAAG,CAAC8D,IAAJ,CAAS;AAAEC,UAAAA,EAAE,EAAE,QAAN;AAAgBC,UAAAA,IAAI,EAAE,CAAC7D,MAAM,CAACI,CAAD,CAAN,CAAU,CAAV,IAAe+B,UAAU,CAAC0C,MAAD,EAASlF,CAAT,CAA1B,EAAuCK,MAAM,CAACI,CAAD,CAAN,CAAU,CAAV,IAAe+B,UAAU,CAAC0C,MAAD,EAASlF,CAAT,CAAhE;AAAtB,SAAT;AACH;AACJ;AACJ;;AACD,SAAO;AAAEC,IAAAA,IAAI,EAAE,UAAR;AAAoBC,IAAAA,GAAG,EAAHA;AAApB,GAAP;AACH;AACD,OAAO,SAASkF,kBAAT,CAA4B/E,MAA5B,EAAoCL,CAApC,EAAuC;AAC1C,SAAOZ,SAAS,CAACY,CAAD,EAAIV,MAAJ,CAAT,CAAqB+F,WAArB,CAAiChF,MAAjC,EAAyCL,CAAzC,CAAP;AACH;AACD,OAAO,SAASsF,cAAT,CAAwBzE,CAAxB,EAA2BC,CAA3B,EAA8BC,KAA9B,EAAqCC,MAArC,EAA6CkC,KAA7C,EAAoDC,IAApD,EAA0DnD,CAA1D,EAA6D;AAChE,MAAMsD,EAAE,GAAGzC,CAAX;AACA,MAAM0C,EAAE,GAAGzC,CAAX;AACA,MAAIqB,EAAE,GAAGR,IAAI,CAACS,GAAL,CAASrB,KAAK,GAAG,CAAjB,CAAT;AACA,MAAIsB,EAAE,GAAGV,IAAI,CAACS,GAAL,CAASpB,MAAM,GAAG,CAAlB,CAAT;AACAmB,EAAAA,EAAE,IAAIK,UAAU,CAACL,EAAE,GAAG,IAAN,EAAYnC,CAAZ,CAAhB;AACAqC,EAAAA,EAAE,IAAIG,UAAU,CAACH,EAAE,GAAG,IAAN,EAAYrC,CAAZ,CAAhB;AACA,MAAIwD,IAAI,GAAGN,KAAX;AACA,MAAIO,GAAG,GAAGN,IAAV;;AACA,SAAOK,IAAI,GAAG,CAAd,EAAiB;AACbA,IAAAA,IAAI,IAAI7B,IAAI,CAACE,EAAL,GAAU,CAAlB;AACA4B,IAAAA,GAAG,IAAI9B,IAAI,CAACE,EAAL,GAAU,CAAjB;AACH;;AACD,MAAK4B,GAAG,GAAGD,IAAP,GAAgB7B,IAAI,CAACE,EAAL,GAAU,CAA9B,EAAkC;AAC9B2B,IAAAA,IAAI,GAAG,CAAP;AACAC,IAAAA,GAAG,GAAG9B,IAAI,CAACE,EAAL,GAAU,CAAhB;AACH;;AACD,MAAMK,SAAS,GAAG,CAACuB,GAAG,GAAGD,IAAP,IAAexD,CAAC,CAACiC,cAAnC;AACA,MAAM5B,MAAM,GAAG,EAAf;;AACA,OAAK,IAAIkF,KAAK,GAAG/B,IAAjB,EAAuB+B,KAAK,IAAI9B,GAAhC,EAAqC8B,KAAK,GAAGA,KAAK,GAAGrD,SAArD,EAAgE;AAC5D7B,IAAAA,MAAM,CAAC2D,IAAP,CAAY,CAACV,EAAE,GAAGnB,EAAE,GAAGR,IAAI,CAACmC,GAAL,CAASyB,KAAT,CAAX,EAA4BhC,EAAE,GAAGlB,EAAE,GAAGV,IAAI,CAACoC,GAAL,CAASwB,KAAT,CAAtC,CAAZ;AACH;;AACDlF,EAAAA,MAAM,CAAC2D,IAAP,CAAY,CAACV,EAAE,GAAGnB,EAAE,GAAGR,IAAI,CAACmC,GAAL,CAASL,GAAT,CAAX,EAA0BF,EAAE,GAAGlB,EAAE,GAAGV,IAAI,CAACoC,GAAL,CAASN,GAAT,CAApC,CAAZ;AACApD,EAAAA,MAAM,CAAC2D,IAAP,CAAY,CAACV,EAAD,EAAKC,EAAL,CAAZ;AACA,SAAO6B,kBAAkB,CAAC/E,MAAD,EAASL,CAAT,CAAzB;AACH;AACD,OAAO,SAAST,UAAT,CAAoBsB,CAApB,EAAuBb,CAAvB,EAA0B;AAC7B,SAAOwC,UAAU,CAAC3B,CAAD,EAAIb,CAAJ,CAAjB;AACH;AACD,OAAO,SAASR,mBAAT,CAA6BoE,GAA7B,EAAkC5B,GAAlC,EAAuChC,CAAvC,EAA0C;AAC7C,SAAO2C,OAAO,CAACiB,GAAD,EAAM5B,GAAN,EAAWhC,CAAX,CAAd;AACH;AACD,OAAO,SAASN,aAAT,CAAuBE,EAAvB,EAA2BC,EAA3B,EAA+BC,EAA/B,EAAmCC,EAAnC,EAAuCC,CAAvC,EAA0C;AAC7C,SAAOG,WAAW,CAACP,EAAD,EAAKC,EAAL,EAASC,EAAT,EAAaC,EAAb,EAAiBC,CAAjB,CAAlB;AACH,C,CACD;;AACA,SAASwF,MAAT,CAAgBtF,GAAhB,EAAqB;AACjB,MAAI,CAACA,GAAG,CAACuF,UAAT,EAAqB;AACjBvF,IAAAA,GAAG,CAACuF,UAAJ,GAAiB,IAAIpG,MAAJ,CAAWa,GAAG,CAACwF,IAAJ,IAAY,CAAvB,CAAjB;AACH;;AACD,SAAOxF,GAAG,CAACuF,UAAJ,CAAeE,IAAf,EAAP;AACH;;AACD,SAAShD,OAAT,CAAiBiB,GAAjB,EAAsB5B,GAAtB,EAA2B9B,GAA3B,EAAgC;AAC5B,SAAOA,GAAG,CAACkB,SAAJ,GAAgBlB,GAAG,CAAC0F,aAApB,IAAsCJ,MAAM,CAACtF,GAAD,CAAN,IAAe8B,GAAG,GAAG4B,GAArB,CAAD,GAA8BA,GAAnE,CAAP;AACH;;AACD,SAASpB,UAAT,CAAoB3B,CAApB,EAAuBX,GAAvB,EAA4B;AACxB,SAAOyC,OAAO,CAAC,CAAC9B,CAAF,EAAKA,CAAL,EAAQX,GAAR,CAAd;AACH;;AACD,SAASC,WAAT,CAAqBP,EAArB,EAAyBC,EAAzB,EAA6BC,EAA7B,EAAiCC,EAAjC,EAAqCC,CAArC,EAAwC;AACpC,MAAMkB,EAAE,GAAG2E,KAAK,CAACjG,EAAD,EAAKC,EAAL,EAASC,EAAT,EAAaC,EAAb,EAAiBC,CAAjB,EAAoB,IAApB,EAA0B,KAA1B,CAAhB;;AACA,MAAMqB,EAAE,GAAGwE,KAAK,CAACjG,EAAD,EAAKC,EAAL,EAASC,EAAT,EAAaC,EAAb,EAAiBC,CAAjB,EAAoB,IAApB,EAA0B,IAA1B,CAAhB;;AACA,SAAOkB,EAAE,CAACR,MAAH,CAAUW,EAAV,CAAP;AACH;;AACD,SAASwE,KAAT,CAAejG,EAAf,EAAmBC,EAAnB,EAAuBC,EAAvB,EAA2BC,EAA3B,EAA+BC,CAA/B,EAAkC8F,IAAlC,EAAwCC,OAAxC,EAAiD;AAC7C,MAAMC,QAAQ,GAAGrE,IAAI,CAACG,GAAL,CAAUlC,EAAE,GAAGE,EAAf,EAAoB,CAApB,IAAyB6B,IAAI,CAACG,GAAL,CAAUjC,EAAE,GAAGE,EAAf,EAAoB,CAApB,CAA1C;AACA,MAAMS,MAAM,GAAGmB,IAAI,CAACC,IAAL,CAAUoE,QAAV,CAAf;;AACA,MAAIxF,MAAM,GAAG,GAAb,EAAkB;AACdR,IAAAA,CAAC,CAAC4F,aAAF,GAAkB,CAAlB;AACH,GAFD,MAGK,IAAIpF,MAAM,GAAG,GAAb,EAAkB;AACnBR,IAAAA,CAAC,CAAC4F,aAAF,GAAkB,GAAlB;AACH,GAFI,MAGA;AACD5F,IAAAA,CAAC,CAAC4F,aAAF,GAAmB,CAAC,SAAF,GAAepF,MAAf,GAAwB,QAA1C;AACH;;AACD,MAAI0E,MAAM,GAAGlF,CAAC,CAACmF,mBAAF,IAAyB,CAAtC;;AACA,MAAKD,MAAM,GAAGA,MAAT,GAAkB,GAAnB,GAA0Bc,QAA9B,EAAwC;AACpCd,IAAAA,MAAM,GAAG1E,MAAM,GAAG,EAAlB;AACH;;AACD,MAAMyF,UAAU,GAAGf,MAAM,GAAG,CAA5B;AACA,MAAMgB,YAAY,GAAG,MAAMV,MAAM,CAACxF,CAAD,CAAN,GAAY,GAAvC;AACA,MAAImG,QAAQ,GAAGnG,CAAC,CAACoG,MAAF,GAAWpG,CAAC,CAACmF,mBAAb,IAAoCpF,EAAE,GAAGF,EAAzC,IAA+C,GAA9D;AACA,MAAIwG,QAAQ,GAAGrG,CAAC,CAACoG,MAAF,GAAWpG,CAAC,CAACmF,mBAAb,IAAoCvF,EAAE,GAAGE,EAAzC,IAA+C,GAA9D;AACAqG,EAAAA,QAAQ,GAAG3D,UAAU,CAAC2D,QAAD,EAAWnG,CAAX,CAArB;AACAqG,EAAAA,QAAQ,GAAG7D,UAAU,CAAC6D,QAAD,EAAWrG,CAAX,CAArB;AACA,MAAME,GAAG,GAAG,EAAZ;;AACA,MAAMoG,UAAU,GAAG,SAAbA,UAAa;AAAA,WAAM9D,UAAU,CAACyD,UAAD,EAAajG,CAAb,CAAhB;AAAA,GAAnB;;AACA,MAAMuG,UAAU,GAAG,SAAbA,UAAa;AAAA,WAAM/D,UAAU,CAAC0C,MAAD,EAASlF,CAAT,CAAhB;AAAA,GAAnB;;AACA,MAAI8F,IAAJ,EAAU;AACN,QAAIC,OAAJ,EAAa;AACT7F,MAAAA,GAAG,CAAC8D,IAAJ,CAAS;AACLC,QAAAA,EAAE,EAAE,MADC;AACOC,QAAAA,IAAI,EAAE,CACdtE,EAAE,GAAG0G,UAAU,EADD,EAEdzG,EAAE,GAAGyG,UAAU,EAFD;AADb,OAAT;AAMH,KAPD,MAQK;AACDpG,MAAAA,GAAG,CAAC8D,IAAJ,CAAS;AACLC,QAAAA,EAAE,EAAE,MADC;AACOC,QAAAA,IAAI,EAAE,CACdtE,EAAE,GAAG4C,UAAU,CAAC0C,MAAD,EAASlF,CAAT,CADD,EAEdH,EAAE,GAAG2C,UAAU,CAAC0C,MAAD,EAASlF,CAAT,CAFD;AADb,OAAT;AAMH;AACJ;;AACD,MAAI+F,OAAJ,EAAa;AACT7F,IAAAA,GAAG,CAAC8D,IAAJ,CAAS;AACLC,MAAAA,EAAE,EAAE,UADC;AACWC,MAAAA,IAAI,EAAE,CAClBiC,QAAQ,GAAGvG,EAAX,GAAgB,CAACE,EAAE,GAAGF,EAAN,IAAYsG,YAA5B,GAA2CI,UAAU,EADnC,EAElBD,QAAQ,GAAGxG,EAAX,GAAgB,CAACE,EAAE,GAAGF,EAAN,IAAYqG,YAA5B,GAA2CI,UAAU,EAFnC,EAGlBH,QAAQ,GAAGvG,EAAX,GAAgB,KAAKE,EAAE,GAAGF,EAAV,IAAgBsG,YAAhC,GAA+CI,UAAU,EAHvC,EAIlBD,QAAQ,GAAGxG,EAAX,GAAgB,KAAKE,EAAE,GAAGF,EAAV,IAAgBqG,YAAhC,GAA+CI,UAAU,EAJvC,EAKlBxG,EAAE,GAAGwG,UAAU,EALG,EAMlBvG,EAAE,GAAGuG,UAAU,EANG;AADjB,KAAT;AAUH,GAXD,MAYK;AACDpG,IAAAA,GAAG,CAAC8D,IAAJ,CAAS;AACLC,MAAAA,EAAE,EAAE,UADC;AACWC,MAAAA,IAAI,EAAE,CAClBiC,QAAQ,GAAGvG,EAAX,GAAgB,CAACE,EAAE,GAAGF,EAAN,IAAYsG,YAA5B,GAA2CK,UAAU,EADnC,EAElBF,QAAQ,GAAGxG,EAAX,GAAgB,CAACE,EAAE,GAAGF,EAAN,IAAYqG,YAA5B,GAA2CK,UAAU,EAFnC,EAGlBJ,QAAQ,GAAGvG,EAAX,GAAgB,KAAKE,EAAE,GAAGF,EAAV,IAAgBsG,YAAhC,GAA+CK,UAAU,EAHvC,EAIlBF,QAAQ,GAAGxG,EAAX,GAAgB,KAAKE,EAAE,GAAGF,EAAV,IAAgBqG,YAAhC,GAA+CK,UAAU,EAJvC,EAKlBzG,EAAE,GAAGyG,UAAU,EALG,EAMlBxG,EAAE,GAAGwG,UAAU,EANG;AADjB,KAAT;AAUH;;AACD,SAAOrG,GAAP;AACH;;AACD,SAASiB,gBAAT,CAA0Bd,MAA1B,EAAkC6E,MAAlC,EAA0ClF,CAA1C,EAA6C;AACzC,MAAMwG,EAAE,GAAG,EAAX;AACAA,EAAAA,EAAE,CAACxC,IAAH,CAAQ,CACJ3D,MAAM,CAAC,CAAD,CAAN,CAAU,CAAV,IAAemC,UAAU,CAAC0C,MAAD,EAASlF,CAAT,CADrB,EAEJK,MAAM,CAAC,CAAD,CAAN,CAAU,CAAV,IAAemC,UAAU,CAAC0C,MAAD,EAASlF,CAAT,CAFrB,CAAR;AAIAwG,EAAAA,EAAE,CAACxC,IAAH,CAAQ,CACJ3D,MAAM,CAAC,CAAD,CAAN,CAAU,CAAV,IAAemC,UAAU,CAAC0C,MAAD,EAASlF,CAAT,CADrB,EAEJK,MAAM,CAAC,CAAD,CAAN,CAAU,CAAV,IAAemC,UAAU,CAAC0C,MAAD,EAASlF,CAAT,CAFrB,CAAR;;AAIA,OAAK,IAAIS,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,MAAM,CAACG,MAA3B,EAAmCC,CAAC,EAApC,EAAwC;AACpC+F,IAAAA,EAAE,CAACxC,IAAH,CAAQ,CACJ3D,MAAM,CAACI,CAAD,CAAN,CAAU,CAAV,IAAe+B,UAAU,CAAC0C,MAAD,EAASlF,CAAT,CADrB,EAEJK,MAAM,CAACI,CAAD,CAAN,CAAU,CAAV,IAAe+B,UAAU,CAAC0C,MAAD,EAASlF,CAAT,CAFrB,CAAR;;AAIA,QAAIS,CAAC,KAAMJ,MAAM,CAACG,MAAP,GAAgB,CAA3B,EAA+B;AAC3BgG,MAAAA,EAAE,CAACxC,IAAH,CAAQ,CACJ3D,MAAM,CAACI,CAAD,CAAN,CAAU,CAAV,IAAe+B,UAAU,CAAC0C,MAAD,EAASlF,CAAT,CADrB,EAEJK,MAAM,CAACI,CAAD,CAAN,CAAU,CAAV,IAAe+B,UAAU,CAAC0C,MAAD,EAASlF,CAAT,CAFrB,CAAR;AAIH;AACJ;;AACD,SAAO+C,MAAM,CAACyD,EAAD,EAAK,IAAL,EAAWxG,CAAX,CAAb;AACH;;AACD,SAAS+C,MAAT,CAAgB1C,MAAhB,EAAwBoG,UAAxB,EAAoCzG,CAApC,EAAuC;AACnC,MAAMO,GAAG,GAAGF,MAAM,CAACG,MAAnB;AACA,MAAIN,GAAG,GAAG,EAAV;;AACA,MAAIK,GAAG,GAAG,CAAV,EAAa;AACT,QAAMmG,CAAC,GAAG,EAAV;AACA,QAAM7B,CAAC,GAAG,IAAI7E,CAAC,CAAC2G,cAAhB;AACAzG,IAAAA,GAAG,CAAC8D,IAAJ,CAAS;AAAEC,MAAAA,EAAE,EAAE,MAAN;AAAcC,MAAAA,IAAI,EAAE,CAAC7D,MAAM,CAAC,CAAD,CAAN,CAAU,CAAV,CAAD,EAAeA,MAAM,CAAC,CAAD,CAAN,CAAU,CAAV,CAAf;AAApB,KAAT;;AACA,SAAK,IAAII,CAAC,GAAG,CAAb,EAAiBA,CAAC,GAAG,CAAL,GAAUF,GAA1B,EAA+BE,CAAC,EAAhC,EAAoC;AAChC,UAAMmG,eAAe,GAAGvG,MAAM,CAACI,CAAD,CAA9B;AACAiG,MAAAA,CAAC,CAAC,CAAD,CAAD,GAAO,CAACE,eAAe,CAAC,CAAD,CAAhB,EAAqBA,eAAe,CAAC,CAAD,CAApC,CAAP;AACAF,MAAAA,CAAC,CAAC,CAAD,CAAD,GAAO,CAACE,eAAe,CAAC,CAAD,CAAf,GAAqB,CAAC/B,CAAC,GAAGxE,MAAM,CAACI,CAAC,GAAG,CAAL,CAAN,CAAc,CAAd,CAAJ,GAAuBoE,CAAC,GAAGxE,MAAM,CAACI,CAAC,GAAG,CAAL,CAAN,CAAc,CAAd,CAA5B,IAAgD,CAAtE,EAAyEmG,eAAe,CAAC,CAAD,CAAf,GAAqB,CAAC/B,CAAC,GAAGxE,MAAM,CAACI,CAAC,GAAG,CAAL,CAAN,CAAc,CAAd,CAAJ,GAAuBoE,CAAC,GAAGxE,MAAM,CAACI,CAAC,GAAG,CAAL,CAAN,CAAc,CAAd,CAA5B,IAAgD,CAA9I,CAAP;AACAiG,MAAAA,CAAC,CAAC,CAAD,CAAD,GAAO,CAACrG,MAAM,CAACI,CAAC,GAAG,CAAL,CAAN,CAAc,CAAd,IAAmB,CAACoE,CAAC,GAAGxE,MAAM,CAACI,CAAD,CAAN,CAAU,CAAV,CAAJ,GAAmBoE,CAAC,GAAGxE,MAAM,CAACI,CAAC,GAAG,CAAL,CAAN,CAAc,CAAd,CAAxB,IAA4C,CAAhE,EAAmEJ,MAAM,CAACI,CAAC,GAAG,CAAL,CAAN,CAAc,CAAd,IAAmB,CAACoE,CAAC,GAAGxE,MAAM,CAACI,CAAD,CAAN,CAAU,CAAV,CAAJ,GAAmBoE,CAAC,GAAGxE,MAAM,CAACI,CAAC,GAAG,CAAL,CAAN,CAAc,CAAd,CAAxB,IAA4C,CAAlI,CAAP;AACAiG,MAAAA,CAAC,CAAC,CAAD,CAAD,GAAO,CAACrG,MAAM,CAACI,CAAC,GAAG,CAAL,CAAN,CAAc,CAAd,CAAD,EAAmBJ,MAAM,CAACI,CAAC,GAAG,CAAL,CAAN,CAAc,CAAd,CAAnB,CAAP;AACAP,MAAAA,GAAG,CAAC8D,IAAJ,CAAS;AAAEC,QAAAA,EAAE,EAAE,UAAN;AAAkBC,QAAAA,IAAI,EAAE,CAACwC,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAAD,EAAUA,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAAV,EAAmBA,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAAnB,EAA4BA,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAA5B,EAAqCA,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAArC,EAA8CA,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAA9C;AAAxB,OAAT;AACH;;AACD,QAAID,UAAU,IAAIA,UAAU,CAACjG,MAAX,KAAsB,CAAxC,EAA2C;AACvC,UAAMqG,EAAE,GAAG7G,CAAC,CAACmF,mBAAb;AACAjF,MAAAA,GAAG,CAAC8D,IAAJ,CAAS;AAAEC,QAAAA,EAAE,EAAE,QAAN;AAAgBC,QAAAA,IAAI,EAAE,CAACuC,UAAU,CAAC,CAAD,CAAV,GAAgBjE,UAAU,CAACqE,EAAD,EAAK7G,CAAL,CAA3B,EAAoCyG,UAAU,CAAC,CAAD,CAAV,GAAgBjE,UAAU,CAACqE,EAAD,EAAK7G,CAAL,CAA9D;AAAtB,OAAT;AACH;AACJ,GAhBD,MAiBK,IAAIO,GAAG,KAAK,CAAZ,EAAe;AAChBL,IAAAA,GAAG,CAAC8D,IAAJ,CAAS;AAAEC,MAAAA,EAAE,EAAE,MAAN;AAAcC,MAAAA,IAAI,EAAE,CAAC7D,MAAM,CAAC,CAAD,CAAN,CAAU,CAAV,CAAD,EAAeA,MAAM,CAAC,CAAD,CAAN,CAAU,CAAV,CAAf;AAApB,KAAT;AACAH,IAAAA,GAAG,CAAC8D,IAAJ,CAAS;AACLC,MAAAA,EAAE,EAAE,UADC;AACWC,MAAAA,IAAI,EAAE,CAClB7D,MAAM,CAAC,CAAD,CAAN,CAAU,CAAV,CADkB,EACJA,MAAM,CAAC,CAAD,CAAN,CAAU,CAAV,CADI,EAElBA,MAAM,CAAC,CAAD,CAAN,CAAU,CAAV,CAFkB,EAEJA,MAAM,CAAC,CAAD,CAAN,CAAU,CAAV,CAFI,EAGlBA,MAAM,CAAC,CAAD,CAAN,CAAU,CAAV,CAHkB,EAGJA,MAAM,CAAC,CAAD,CAAN,CAAU,CAAV,CAHI;AADjB,KAAT;AAOH,GATI,MAUA,IAAIE,GAAG,KAAK,CAAZ,EAAe;AAChBL,IAAAA,GAAG,GAAGA,GAAG,CAACQ,MAAJ,CAAWP,WAAW,CAACE,MAAM,CAAC,CAAD,CAAN,CAAU,CAAV,CAAD,EAAeA,MAAM,CAAC,CAAD,CAAN,CAAU,CAAV,CAAf,EAA6BA,MAAM,CAAC,CAAD,CAAN,CAAU,CAAV,CAA7B,EAA2CA,MAAM,CAAC,CAAD,CAAN,CAAU,CAAV,CAA3C,EAAyDL,CAAzD,CAAtB,CAAN;AACH;;AACD,SAAOE,GAAP;AACH;;AACD,SAASwC,qBAAT,CAA+BR,SAA/B,EAA0CoB,EAA1C,EAA8CC,EAA9C,EAAkDpB,EAAlD,EAAsDE,EAAtD,EAA0D6C,MAA1D,EAAkE4B,OAAlE,EAA2E9G,CAA3E,EAA8E;AAC1E,MAAM+G,UAAU,GAAG,EAAnB;AACA,MAAMC,SAAS,GAAG,EAAlB;AACA,MAAMC,SAAS,GAAGzE,UAAU,CAAC,GAAD,EAAMxC,CAAN,CAAV,GAAsB2B,IAAI,CAACE,EAAL,GAAU,CAAlD;AACAmF,EAAAA,SAAS,CAAChD,IAAV,CAAe,CACXxB,UAAU,CAAC0C,MAAD,EAASlF,CAAT,CAAV,GAAwBsD,EAAxB,GAA6B,MAAMnB,EAAN,GAAWR,IAAI,CAACmC,GAAL,CAASmD,SAAS,GAAG/E,SAArB,CAD7B,EAEXM,UAAU,CAAC0C,MAAD,EAASlF,CAAT,CAAV,GAAwBuD,EAAxB,GAA6B,MAAMlB,EAAN,GAAWV,IAAI,CAACoC,GAAL,CAASkD,SAAS,GAAG/E,SAArB,CAF7B,CAAf;;AAIA,OAAK,IAAIqD,KAAK,GAAG0B,SAAjB,EAA4B1B,KAAK,GAAI5D,IAAI,CAACE,EAAL,GAAU,CAAV,GAAcoF,SAAd,GAA0B,IAA/D,EAAsE1B,KAAK,GAAGA,KAAK,GAAGrD,SAAtF,EAAiG;AAC7F,QAAMoC,CAAC,GAAG,CACN9B,UAAU,CAAC0C,MAAD,EAASlF,CAAT,CAAV,GAAwBsD,EAAxB,GAA6BnB,EAAE,GAAGR,IAAI,CAACmC,GAAL,CAASyB,KAAT,CAD5B,EAEN/C,UAAU,CAAC0C,MAAD,EAASlF,CAAT,CAAV,GAAwBuD,EAAxB,GAA6BlB,EAAE,GAAGV,IAAI,CAACoC,GAAL,CAASwB,KAAT,CAF5B,CAAV;AAIAwB,IAAAA,UAAU,CAAC/C,IAAX,CAAgBM,CAAhB;AACA0C,IAAAA,SAAS,CAAChD,IAAV,CAAeM,CAAf;AACH;;AACD0C,EAAAA,SAAS,CAAChD,IAAV,CAAe,CACXxB,UAAU,CAAC0C,MAAD,EAASlF,CAAT,CAAV,GAAwBsD,EAAxB,GAA6BnB,EAAE,GAAGR,IAAI,CAACmC,GAAL,CAASmD,SAAS,GAAGtF,IAAI,CAACE,EAAL,GAAU,CAAtB,GAA0BiF,OAAO,GAAG,GAA7C,CADvB,EAEXtE,UAAU,CAAC0C,MAAD,EAASlF,CAAT,CAAV,GAAwBuD,EAAxB,GAA6BlB,EAAE,GAAGV,IAAI,CAACoC,GAAL,CAASkD,SAAS,GAAGtF,IAAI,CAACE,EAAL,GAAU,CAAtB,GAA0BiF,OAAO,GAAG,GAA7C,CAFvB,CAAf;AAIAE,EAAAA,SAAS,CAAChD,IAAV,CAAe,CACXxB,UAAU,CAAC0C,MAAD,EAASlF,CAAT,CAAV,GAAwBsD,EAAxB,GAA6B,OAAOnB,EAAP,GAAYR,IAAI,CAACmC,GAAL,CAASmD,SAAS,GAAGH,OAArB,CAD9B,EAEXtE,UAAU,CAAC0C,MAAD,EAASlF,CAAT,CAAV,GAAwBuD,EAAxB,GAA6B,OAAOlB,EAAP,GAAYV,IAAI,CAACoC,GAAL,CAASkD,SAAS,GAAGH,OAArB,CAF9B,CAAf;AAIAE,EAAAA,SAAS,CAAChD,IAAV,CAAe,CACXxB,UAAU,CAAC0C,MAAD,EAASlF,CAAT,CAAV,GAAwBsD,EAAxB,GAA6B,MAAMnB,EAAN,GAAWR,IAAI,CAACmC,GAAL,CAASmD,SAAS,GAAGH,OAAO,GAAG,GAA/B,CAD7B,EAEXtE,UAAU,CAAC0C,MAAD,EAASlF,CAAT,CAAV,GAAwBuD,EAAxB,GAA6B,MAAMlB,EAAN,GAAWV,IAAI,CAACoC,GAAL,CAASkD,SAAS,GAAGH,OAAO,GAAG,GAA/B,CAF7B,CAAf;AAIA,SAAO,CAACE,SAAD,EAAYD,UAAZ,CAAP;AACH;;AACD,SAASlD,IAAT,CAAc3B,SAAd,EAAyBoB,EAAzB,EAA6BC,EAA7B,EAAiCpB,EAAjC,EAAqCE,EAArC,EAAyCmB,IAAzC,EAA+CC,GAA/C,EAAoDyB,MAApD,EAA4DlF,CAA5D,EAA+D;AAC3D,MAAMiH,SAAS,GAAGzD,IAAI,GAAGhB,UAAU,CAAC,GAAD,EAAMxC,CAAN,CAAnC;;AACA,MAAMK,MAAM,GAAG,EAAf;AACAA,EAAAA,MAAM,CAAC2D,IAAP,CAAY,CACRxB,UAAU,CAAC0C,MAAD,EAASlF,CAAT,CAAV,GAAwBsD,EAAxB,GAA6B,MAAMnB,EAAN,GAAWR,IAAI,CAACmC,GAAL,CAASmD,SAAS,GAAG/E,SAArB,CADhC,EAERM,UAAU,CAAC0C,MAAD,EAASlF,CAAT,CAAV,GAAwBuD,EAAxB,GAA6B,MAAMlB,EAAN,GAAWV,IAAI,CAACoC,GAAL,CAASkD,SAAS,GAAG/E,SAArB,CAFhC,CAAZ;;AAIA,OAAK,IAAIqD,KAAK,GAAG0B,SAAjB,EAA4B1B,KAAK,IAAI9B,GAArC,EAA0C8B,KAAK,GAAGA,KAAK,GAAGrD,SAA1D,EAAqE;AACjE7B,IAAAA,MAAM,CAAC2D,IAAP,CAAY,CACRxB,UAAU,CAAC0C,MAAD,EAASlF,CAAT,CAAV,GAAwBsD,EAAxB,GAA6BnB,EAAE,GAAGR,IAAI,CAACmC,GAAL,CAASyB,KAAT,CAD1B,EAER/C,UAAU,CAAC0C,MAAD,EAASlF,CAAT,CAAV,GAAwBuD,EAAxB,GAA6BlB,EAAE,GAAGV,IAAI,CAACoC,GAAL,CAASwB,KAAT,CAF1B,CAAZ;AAIH;;AACDlF,EAAAA,MAAM,CAAC2D,IAAP,CAAY,CACRV,EAAE,GAAGnB,EAAE,GAAGR,IAAI,CAACmC,GAAL,CAASL,GAAT,CADF,EAERF,EAAE,GAAGlB,EAAE,GAAGV,IAAI,CAACoC,GAAL,CAASN,GAAT,CAFF,CAAZ;AAIApD,EAAAA,MAAM,CAAC2D,IAAP,CAAY,CACRV,EAAE,GAAGnB,EAAE,GAAGR,IAAI,CAACmC,GAAL,CAASL,GAAT,CADF,EAERF,EAAE,GAAGlB,EAAE,GAAGV,IAAI,CAACoC,GAAL,CAASN,GAAT,CAFF,CAAZ;AAIA,SAAOV,MAAM,CAAC1C,MAAD,EAAS,IAAT,EAAeL,CAAf,CAAb;AACH;;AACD,SAASkH,SAAT,CAAmBtH,EAAnB,EAAuBC,EAAvB,EAA2BC,EAA3B,EAA+BC,EAA/B,EAAmCc,CAAnC,EAAsCC,CAAtC,EAAyCsD,IAAzC,EAA+CpE,CAA/C,EAAkD;AAC9C,MAAME,GAAG,GAAG,EAAZ;AACA,MAAMiH,GAAG,GAAG,CAACnH,CAAC,CAACmF,mBAAF,IAAyB,CAA1B,EAA6B,CAACnF,CAAC,CAACmF,mBAAF,IAAyB,CAA1B,IAA+B,GAA5D,CAAZ;AACA,MAAIiC,CAAC,GAAG,CAAC,CAAD,EAAI,CAAJ,CAAR;;AACA,OAAK,IAAI3G,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AACxB,QAAIA,CAAC,KAAK,CAAV,EAAa;AACTP,MAAAA,GAAG,CAAC8D,IAAJ,CAAS;AAAEC,QAAAA,EAAE,EAAE,MAAN;AAAcC,QAAAA,IAAI,EAAE,CAACE,IAAI,CAACvD,CAAN,EAASuD,IAAI,CAACtD,CAAd;AAApB,OAAT;AACH,KAFD,MAGK;AACDZ,MAAAA,GAAG,CAAC8D,IAAJ,CAAS;AAAEC,QAAAA,EAAE,EAAE,MAAN;AAAcC,QAAAA,IAAI,EAAE,CAACE,IAAI,CAACvD,CAAL,GAAS2B,UAAU,CAAC2E,GAAG,CAAC,CAAD,CAAJ,EAASnH,CAAT,CAApB,EAAiCoE,IAAI,CAACtD,CAAL,GAAS0B,UAAU,CAAC2E,GAAG,CAAC,CAAD,CAAJ,EAASnH,CAAT,CAApD;AAApB,OAAT;AACH;;AACDoH,IAAAA,CAAC,GAAG,CAACvG,CAAC,GAAG2B,UAAU,CAAC2E,GAAG,CAAC1G,CAAD,CAAJ,EAAST,CAAT,CAAf,EAA4Bc,CAAC,GAAG0B,UAAU,CAAC2E,GAAG,CAAC1G,CAAD,CAAJ,EAAST,CAAT,CAA1C,CAAJ;AACAE,IAAAA,GAAG,CAAC8D,IAAJ,CAAS;AACLC,MAAAA,EAAE,EAAE,UADC;AACWC,MAAAA,IAAI,EAAE,CAClBtE,EAAE,GAAG4C,UAAU,CAAC2E,GAAG,CAAC1G,CAAD,CAAJ,EAAST,CAAT,CADG,EACUH,EAAE,GAAG2C,UAAU,CAAC2E,GAAG,CAAC1G,CAAD,CAAJ,EAAST,CAAT,CADzB,EAElBF,EAAE,GAAG0C,UAAU,CAAC2E,GAAG,CAAC1G,CAAD,CAAJ,EAAST,CAAT,CAFG,EAEUD,EAAE,GAAGyC,UAAU,CAAC2E,GAAG,CAAC1G,CAAD,CAAJ,EAAST,CAAT,CAFzB,EAGlBoH,CAAC,CAAC,CAAD,CAHiB,EAGZA,CAAC,CAAC,CAAD,CAHW;AADjB,KAAT;AAOH;;AACDhD,EAAAA,IAAI,CAACiD,WAAL,CAAiBD,CAAC,CAAC,CAAD,CAAlB,EAAuBA,CAAC,CAAC,CAAD,CAAxB;AACA,SAAOlH,GAAP;AACH;;AACD,SAAS8E,eAAT,CAAyBZ,IAAzB,EAA+BkD,GAA/B,EAAoCC,OAApC,EAA6CvH,CAA7C,EAAgD;AAC5C,MAAIE,GAAG,GAAG,EAAV;;AACA,UAAQoH,GAAG,CAACE,GAAZ;AACI,SAAK,GAAL;AACA,SAAK,GAAL;AAAU;AACN,YAAMC,KAAK,GAAGH,GAAG,CAACE,GAAJ,KAAY,GAA1B;;AACA,YAAIF,GAAG,CAACpD,IAAJ,CAAS1D,MAAT,IAAmB,CAAvB,EAA0B;AACtB,cAAIK,CAAC,GAAG,CAACyG,GAAG,CAACpD,IAAJ,CAAS,CAAT,CAAT;AACA,cAAIpD,CAAC,GAAG,CAACwG,GAAG,CAACpD,IAAJ,CAAS,CAAT,CAAT;;AACA,cAAIuD,KAAJ,EAAW;AACP5G,YAAAA,CAAC,IAAIuD,IAAI,CAACvD,CAAV;AACAC,YAAAA,CAAC,IAAIsD,IAAI,CAACtD,CAAV;AACH;;AACD,cAAM+F,EAAE,GAAG,KAAK7G,CAAC,CAACmF,mBAAF,IAAyB,CAA9B,CAAX;AACAtE,UAAAA,CAAC,GAAGA,CAAC,GAAG2B,UAAU,CAACqE,EAAD,EAAK7G,CAAL,CAAlB;AACAc,UAAAA,CAAC,GAAGA,CAAC,GAAG0B,UAAU,CAACqE,EAAD,EAAK7G,CAAL,CAAlB;AACAoE,UAAAA,IAAI,CAACiD,WAAL,CAAiBxG,CAAjB,EAAoBC,CAApB;AACAZ,UAAAA,GAAG,CAAC8D,IAAJ,CAAS;AAAEC,YAAAA,EAAE,EAAE,MAAN;AAAcC,YAAAA,IAAI,EAAE,CAACrD,CAAD,EAAIC,CAAJ;AAApB,WAAT;AACH;;AACD;AACH;;AACD,SAAK,GAAL;AACA,SAAK,GAAL;AAAU;AACN,YAAM2G,MAAK,GAAGH,GAAG,CAACE,GAAJ,KAAY,GAA1B;;AACA,YAAIF,GAAG,CAACpD,IAAJ,CAAS1D,MAAT,IAAmB,CAAvB,EAA0B;AACtB,cAAIK,EAAC,GAAG,CAACyG,GAAG,CAACpD,IAAJ,CAAS,CAAT,CAAT;;AACA,cAAIpD,EAAC,GAAG,CAACwG,GAAG,CAACpD,IAAJ,CAAS,CAAT,CAAT;;AACA,cAAIuD,MAAJ,EAAW;AACP5G,YAAAA,EAAC,IAAIuD,IAAI,CAACvD,CAAV;AACAC,YAAAA,EAAC,IAAIsD,IAAI,CAACtD,CAAV;AACH;;AACDZ,UAAAA,GAAG,GAAGA,GAAG,CAACQ,MAAJ,CAAWP,WAAW,CAACiE,IAAI,CAACvD,CAAN,EAASuD,IAAI,CAACtD,CAAd,EAAiBD,EAAjB,EAAoBC,EAApB,EAAuBd,CAAvB,CAAtB,CAAN;AACAoE,UAAAA,IAAI,CAACiD,WAAL,CAAiBxG,EAAjB,EAAoBC,EAApB;AACH;;AACD;AACH;;AACD,SAAK,GAAL;AACA,SAAK,GAAL;AAAU;AACN,YAAM2G,OAAK,GAAGH,GAAG,CAACE,GAAJ,KAAY,GAA1B;;AACA,YAAIF,GAAG,CAACpD,IAAJ,CAAS1D,MAAb,EAAqB;AACjB,cAAIK,GAAC,GAAG,CAACyG,GAAG,CAACpD,IAAJ,CAAS,CAAT,CAAT;;AACA,cAAIuD,OAAJ,EAAW;AACP5G,YAAAA,GAAC,IAAIuD,IAAI,CAACvD,CAAV;AACH;;AACDX,UAAAA,GAAG,GAAGA,GAAG,CAACQ,MAAJ,CAAWP,WAAW,CAACiE,IAAI,CAACvD,CAAN,EAASuD,IAAI,CAACtD,CAAd,EAAiBD,GAAjB,EAAoBuD,IAAI,CAACtD,CAAzB,EAA4Bd,CAA5B,CAAtB,CAAN;AACAoE,UAAAA,IAAI,CAACiD,WAAL,CAAiBxG,GAAjB,EAAoBuD,IAAI,CAACtD,CAAzB;AACH;;AACD;AACH;;AACD,SAAK,GAAL;AACA,SAAK,GAAL;AAAU;AACN,YAAM2G,OAAK,GAAGH,GAAG,CAACE,GAAJ,KAAY,GAA1B;;AACA,YAAIF,GAAG,CAACpD,IAAJ,CAAS1D,MAAb,EAAqB;AACjB,cAAIM,GAAC,GAAG,CAACwG,GAAG,CAACpD,IAAJ,CAAS,CAAT,CAAT;;AACA,cAAIuD,OAAJ,EAAW;AACP3G,YAAAA,GAAC,IAAIsD,IAAI,CAACtD,CAAV;AACH;;AACDZ,UAAAA,GAAG,GAAGA,GAAG,CAACQ,MAAJ,CAAWP,WAAW,CAACiE,IAAI,CAACvD,CAAN,EAASuD,IAAI,CAACtD,CAAd,EAAiBsD,IAAI,CAACvD,CAAtB,EAAyBC,GAAzB,EAA4Bd,CAA5B,CAAtB,CAAN;AACAoE,UAAAA,IAAI,CAACiD,WAAL,CAAiBjD,IAAI,CAACvD,CAAtB,EAAyBC,GAAzB;AACH;;AACD;AACH;;AACD,SAAK,GAAL;AACA,SAAK,GAAL;AAAU;AACN,YAAIsD,IAAI,CAACsD,KAAT,EAAgB;AACZxH,UAAAA,GAAG,GAAGA,GAAG,CAACQ,MAAJ,CAAWP,WAAW,CAACiE,IAAI,CAACvD,CAAN,EAASuD,IAAI,CAACtD,CAAd,EAAiBsD,IAAI,CAACsD,KAAL,CAAW,CAAX,CAAjB,EAAgCtD,IAAI,CAACsD,KAAL,CAAW,CAAX,CAAhC,EAA+C1H,CAA/C,CAAtB,CAAN;AACAoE,UAAAA,IAAI,CAACiD,WAAL,CAAiBjD,IAAI,CAACsD,KAAL,CAAW,CAAX,CAAjB,EAAgCtD,IAAI,CAACsD,KAAL,CAAW,CAAX,CAAhC;AACAtD,UAAAA,IAAI,CAACsD,KAAL,GAAa,IAAb;AACH;;AACD;AACH;;AACD,SAAK,GAAL;AACA,SAAK,GAAL;AAAU;AACN,YAAMD,OAAK,GAAGH,GAAG,CAACE,GAAJ,KAAY,GAA1B;;AACA,YAAIF,GAAG,CAACpD,IAAJ,CAAS1D,MAAT,IAAmB,CAAvB,EAA0B;AACtB,cAAIZ,EAAE,GAAG,CAAC0H,GAAG,CAACpD,IAAJ,CAAS,CAAT,CAAV;AACA,cAAIrE,EAAE,GAAG,CAACyH,GAAG,CAACpD,IAAJ,CAAS,CAAT,CAAV;AACA,cAAIpE,EAAE,GAAG,CAACwH,GAAG,CAACpD,IAAJ,CAAS,CAAT,CAAV;AACA,cAAInE,EAAE,GAAG,CAACuH,GAAG,CAACpD,IAAJ,CAAS,CAAT,CAAV;;AACA,cAAIrD,GAAC,GAAG,CAACyG,GAAG,CAACpD,IAAJ,CAAS,CAAT,CAAT;;AACA,cAAIpD,GAAC,GAAG,CAACwG,GAAG,CAACpD,IAAJ,CAAS,CAAT,CAAT;;AACA,cAAIuD,OAAJ,EAAW;AACP7H,YAAAA,EAAE,IAAIwE,IAAI,CAACvD,CAAX;AACAf,YAAAA,EAAE,IAAIsE,IAAI,CAACvD,CAAX;AACAA,YAAAA,GAAC,IAAIuD,IAAI,CAACvD,CAAV;AACAhB,YAAAA,EAAE,IAAIuE,IAAI,CAACtD,CAAX;AACAf,YAAAA,EAAE,IAAIqE,IAAI,CAACtD,CAAX;AACAA,YAAAA,GAAC,IAAIsD,IAAI,CAACtD,CAAV;AACH;;AACD,cAAM6G,EAAE,GAAGT,SAAS,CAACtH,EAAD,EAAKC,EAAL,EAASC,EAAT,EAAaC,EAAb,EAAiBc,GAAjB,EAAoBC,GAApB,EAAuBsD,IAAvB,EAA6BpE,CAA7B,CAApB;;AACAE,UAAAA,GAAG,GAAGA,GAAG,CAACQ,MAAJ,CAAWiH,EAAX,CAAN;AACAvD,UAAAA,IAAI,CAACwD,qBAAL,GAA6B,CAAC/G,GAAC,IAAIA,GAAC,GAAGf,EAAR,CAAF,EAAegB,GAAC,IAAIA,GAAC,GAAGf,EAAR,CAAhB,CAA7B;AACH;;AACD;AACH;;AACD,SAAK,GAAL;AACA,SAAK,GAAL;AAAU;AACN,YAAM0H,OAAK,GAAGH,GAAG,CAACE,GAAJ,KAAY,GAA1B;;AACA,YAAIF,GAAG,CAACpD,IAAJ,CAAS1D,MAAT,IAAmB,CAAvB,EAA0B;AACtB,cAAIV,GAAE,GAAG,CAACwH,GAAG,CAACpD,IAAJ,CAAS,CAAT,CAAV;;AACA,cAAInE,GAAE,GAAG,CAACuH,GAAG,CAACpD,IAAJ,CAAS,CAAT,CAAV;;AACA,cAAIrD,GAAC,GAAG,CAACyG,GAAG,CAACpD,IAAJ,CAAS,CAAT,CAAT;;AACA,cAAIpD,GAAC,GAAG,CAACwG,GAAG,CAACpD,IAAJ,CAAS,CAAT,CAAT;;AACA,cAAIuD,OAAJ,EAAW;AACP3H,YAAAA,GAAE,IAAIsE,IAAI,CAACvD,CAAX;AACAA,YAAAA,GAAC,IAAIuD,IAAI,CAACvD,CAAV;AACAd,YAAAA,GAAE,IAAIqE,IAAI,CAACtD,CAAX;AACAA,YAAAA,GAAC,IAAIsD,IAAI,CAACtD,CAAV;AACH;;AACD,cAAIlB,GAAE,GAAGE,GAAT;AACA,cAAID,GAAE,GAAGE,GAAT;AACA,cAAM8H,OAAO,GAAGN,OAAO,GAAGA,OAAO,CAACC,GAAX,GAAiB,EAAxC;AACA,cAAIM,GAAG,GAAG,IAAV;;AACA,cAAID,OAAO,KAAK,GAAZ,IAAmBA,OAAO,KAAK,GAA/B,IAAsCA,OAAO,KAAK,GAAlD,IAAyDA,OAAO,KAAK,GAAzE,EAA8E;AAC1EC,YAAAA,GAAG,GAAG1D,IAAI,CAACwD,qBAAX;AACH;;AACD,cAAIE,GAAJ,EAAS;AACLlI,YAAAA,GAAE,GAAGkI,GAAG,CAAC,CAAD,CAAR;AACAjI,YAAAA,GAAE,GAAGiI,GAAG,CAAC,CAAD,CAAR;AACH;;AACD,cAAMH,GAAE,GAAGT,SAAS,CAACtH,GAAD,EAAKC,GAAL,EAASC,GAAT,EAAaC,GAAb,EAAiBc,GAAjB,EAAoBC,GAApB,EAAuBsD,IAAvB,EAA6BpE,CAA7B,CAApB;;AACAE,UAAAA,GAAG,GAAGA,GAAG,CAACQ,MAAJ,CAAWiH,GAAX,CAAN;AACAvD,UAAAA,IAAI,CAACwD,qBAAL,GAA6B,CAAC/G,GAAC,IAAIA,GAAC,GAAGf,GAAR,CAAF,EAAegB,GAAC,IAAIA,GAAC,GAAGf,GAAR,CAAhB,CAA7B;AACH;;AACD;AACH;;AACD,SAAK,GAAL;AACA,SAAK,GAAL;AAAU;AACN,YAAM0H,OAAK,GAAGH,GAAG,CAACE,GAAJ,KAAY,GAA1B;;AACA,YAAIF,GAAG,CAACpD,IAAJ,CAAS1D,MAAT,IAAmB,CAAvB,EAA0B;AACtB,cAAIZ,GAAE,GAAG,CAAC0H,GAAG,CAACpD,IAAJ,CAAS,CAAT,CAAV;;AACA,cAAIrE,GAAE,GAAG,CAACyH,GAAG,CAACpD,IAAJ,CAAS,CAAT,CAAV;;AACA,cAAIrD,GAAC,GAAG,CAACyG,GAAG,CAACpD,IAAJ,CAAS,CAAT,CAAT;;AACA,cAAIpD,GAAC,GAAG,CAACwG,GAAG,CAACpD,IAAJ,CAAS,CAAT,CAAT;;AACA,cAAIuD,OAAJ,EAAW;AACP7H,YAAAA,GAAE,IAAIwE,IAAI,CAACvD,CAAX;AACAA,YAAAA,GAAC,IAAIuD,IAAI,CAACvD,CAAV;AACAhB,YAAAA,GAAE,IAAIuE,IAAI,CAACtD,CAAX;AACAA,YAAAA,GAAC,IAAIsD,IAAI,CAACtD,CAAV;AACH;;AACD,cAAMiH,OAAO,GAAG,KAAK,IAAI/H,CAAC,CAACoB,SAAF,GAAc,GAAvB,CAAhB;AACA,cAAM4G,OAAO,GAAG,OAAO,IAAIhI,CAAC,CAACoB,SAAF,GAAc,IAAzB,CAAhB;AACAlB,UAAAA,GAAG,CAAC8D,IAAJ,CAAS;AAAEC,YAAAA,EAAE,EAAE,MAAN;AAAcC,YAAAA,IAAI,EAAE,CAACE,IAAI,CAACvD,CAAL,GAAS2B,UAAU,CAACuF,OAAD,EAAU/H,CAAV,CAApB,EAAkCoE,IAAI,CAACtD,CAAL,GAAS0B,UAAU,CAACuF,OAAD,EAAU/H,CAAV,CAArD;AAApB,WAAT;AACA,cAAIoH,CAAC,GAAG,CAACvG,GAAC,GAAG2B,UAAU,CAACuF,OAAD,EAAU/H,CAAV,CAAf,EAA6Bc,GAAC,GAAG0B,UAAU,CAACuF,OAAD,EAAU/H,CAAV,CAA3C,CAAR;AACAE,UAAAA,GAAG,CAAC8D,IAAJ,CAAS;AACLC,YAAAA,EAAE,EAAE,UADC;AACWC,YAAAA,IAAI,EAAE,CAClBtE,GAAE,GAAG4C,UAAU,CAACuF,OAAD,EAAU/H,CAAV,CADG,EACWH,GAAE,GAAG2C,UAAU,CAACuF,OAAD,EAAU/H,CAAV,CAD1B,EAElBoH,CAAC,CAAC,CAAD,CAFiB,EAEZA,CAAC,CAAC,CAAD,CAFW;AADjB,WAAT;AAMAlH,UAAAA,GAAG,CAAC8D,IAAJ,CAAS;AAAEC,YAAAA,EAAE,EAAE,MAAN;AAAcC,YAAAA,IAAI,EAAE,CAACE,IAAI,CAACvD,CAAL,GAAS2B,UAAU,CAACwF,OAAD,EAAUhI,CAAV,CAApB,EAAkCoE,IAAI,CAACtD,CAAL,GAAS0B,UAAU,CAACwF,OAAD,EAAUhI,CAAV,CAArD;AAApB,WAAT;AACAoH,UAAAA,CAAC,GAAG,CAACvG,GAAC,GAAG2B,UAAU,CAACwF,OAAD,EAAUhI,CAAV,CAAf,EAA6Bc,GAAC,GAAG0B,UAAU,CAACwF,OAAD,EAAUhI,CAAV,CAA3C,CAAJ;AACAE,UAAAA,GAAG,CAAC8D,IAAJ,CAAS;AACLC,YAAAA,EAAE,EAAE,UADC;AACWC,YAAAA,IAAI,EAAE,CAClBtE,GAAE,GAAG4C,UAAU,CAACwF,OAAD,EAAUhI,CAAV,CADG,EACWH,GAAE,GAAG2C,UAAU,CAACwF,OAAD,EAAUhI,CAAV,CAD1B,EAElBoH,CAAC,CAAC,CAAD,CAFiB,EAEZA,CAAC,CAAC,CAAD,CAFW;AADjB,WAAT;AAMAhD,UAAAA,IAAI,CAACiD,WAAL,CAAiBD,CAAC,CAAC,CAAD,CAAlB,EAAuBA,CAAC,CAAC,CAAD,CAAxB;AACAhD,UAAAA,IAAI,CAAC6D,mBAAL,GAA2B,CAACpH,GAAC,IAAIA,GAAC,GAAGjB,GAAR,CAAF,EAAekB,GAAC,IAAIA,GAAC,GAAGjB,GAAR,CAAhB,CAA3B;AACH;;AACD;AACH;;AACD,SAAK,GAAL;AACA,SAAK,GAAL;AAAU;AACN,YAAM4H,OAAK,GAAGH,GAAG,CAACE,GAAJ,KAAY,GAA1B;;AACA,YAAIF,GAAG,CAACpD,IAAJ,CAAS1D,MAAT,IAAmB,CAAvB,EAA0B;AACtB,cAAIK,GAAC,GAAG,CAACyG,GAAG,CAACpD,IAAJ,CAAS,CAAT,CAAT;;AACA,cAAIpD,GAAC,GAAG,CAACwG,GAAG,CAACpD,IAAJ,CAAS,CAAT,CAAT;;AACA,cAAIuD,OAAJ,EAAW;AACP5G,YAAAA,GAAC,IAAIuD,IAAI,CAACvD,CAAV;AACAC,YAAAA,GAAC,IAAIsD,IAAI,CAACtD,CAAV;AACH;;AACD,cAAIlB,IAAE,GAAGiB,GAAT;AACA,cAAIhB,IAAE,GAAGiB,GAAT;;AACA,cAAM+G,QAAO,GAAGN,OAAO,GAAGA,OAAO,CAACC,GAAX,GAAiB,EAAxC;;AACA,cAAIM,IAAG,GAAG,IAAV;;AACA,cAAID,QAAO,KAAK,GAAZ,IAAmBA,QAAO,KAAK,GAA/B,IAAsCA,QAAO,KAAK,GAAlD,IAAyDA,QAAO,KAAK,GAAzE,EAA8E;AAC1EC,YAAAA,IAAG,GAAG1D,IAAI,CAAC6D,mBAAX;AACH;;AACD,cAAIH,IAAJ,EAAS;AACLlI,YAAAA,IAAE,GAAGkI,IAAG,CAAC,CAAD,CAAR;AACAjI,YAAAA,IAAE,GAAGiI,IAAG,CAAC,CAAD,CAAR;AACH;;AACD,cAAMC,QAAO,GAAG,KAAK,IAAI/H,CAAC,CAACoB,SAAF,GAAc,GAAvB,CAAhB;;AACA,cAAM4G,QAAO,GAAG,OAAO,IAAIhI,CAAC,CAACoB,SAAF,GAAc,IAAzB,CAAhB;;AACAlB,UAAAA,GAAG,CAAC8D,IAAJ,CAAS;AAAEC,YAAAA,EAAE,EAAE,MAAN;AAAcC,YAAAA,IAAI,EAAE,CAACE,IAAI,CAACvD,CAAL,GAAS2B,UAAU,CAACuF,QAAD,EAAU/H,CAAV,CAApB,EAAkCoE,IAAI,CAACtD,CAAL,GAAS0B,UAAU,CAACuF,QAAD,EAAU/H,CAAV,CAArD;AAApB,WAAT;AACA,cAAIoH,EAAC,GAAG,CAACvG,GAAC,GAAG2B,UAAU,CAACuF,QAAD,EAAU/H,CAAV,CAAf,EAA6Bc,GAAC,GAAG0B,UAAU,CAACuF,QAAD,EAAU/H,CAAV,CAA3C,CAAR;AACAE,UAAAA,GAAG,CAAC8D,IAAJ,CAAS;AACLC,YAAAA,EAAE,EAAE,UADC;AACWC,YAAAA,IAAI,EAAE,CAClBtE,IAAE,GAAG4C,UAAU,CAACuF,QAAD,EAAU/H,CAAV,CADG,EACWH,IAAE,GAAG2C,UAAU,CAACuF,QAAD,EAAU/H,CAAV,CAD1B,EAElBoH,EAAC,CAAC,CAAD,CAFiB,EAEZA,EAAC,CAAC,CAAD,CAFW;AADjB,WAAT;AAMAlH,UAAAA,GAAG,CAAC8D,IAAJ,CAAS;AAAEC,YAAAA,EAAE,EAAE,MAAN;AAAcC,YAAAA,IAAI,EAAE,CAACE,IAAI,CAACvD,CAAL,GAAS2B,UAAU,CAACwF,QAAD,EAAUhI,CAAV,CAApB,EAAkCoE,IAAI,CAACtD,CAAL,GAAS0B,UAAU,CAACwF,QAAD,EAAUhI,CAAV,CAArD;AAApB,WAAT;AACAoH,UAAAA,EAAC,GAAG,CAACvG,GAAC,GAAG2B,UAAU,CAACwF,QAAD,EAAUhI,CAAV,CAAf,EAA6Bc,GAAC,GAAG0B,UAAU,CAACwF,QAAD,EAAUhI,CAAV,CAA3C,CAAJ;AACAE,UAAAA,GAAG,CAAC8D,IAAJ,CAAS;AACLC,YAAAA,EAAE,EAAE,UADC;AACWC,YAAAA,IAAI,EAAE,CAClBtE,IAAE,GAAG4C,UAAU,CAACwF,QAAD,EAAUhI,CAAV,CADG,EACWH,IAAE,GAAG2C,UAAU,CAACwF,QAAD,EAAUhI,CAAV,CAD1B,EAElBoH,EAAC,CAAC,CAAD,CAFiB,EAEZA,EAAC,CAAC,CAAD,CAFW;AADjB,WAAT;AAMAhD,UAAAA,IAAI,CAACiD,WAAL,CAAiBD,EAAC,CAAC,CAAD,CAAlB,EAAuBA,EAAC,CAAC,CAAD,CAAxB;AACAhD,UAAAA,IAAI,CAAC6D,mBAAL,GAA2B,CAACpH,GAAC,IAAIA,GAAC,GAAGjB,IAAR,CAAF,EAAekB,GAAC,IAAIA,GAAC,GAAGjB,IAAR,CAAhB,CAA3B;AACH;;AACD;AACH;;AACD,SAAK,GAAL;AACA,SAAK,GAAL;AAAU;AACN,YAAM4H,OAAK,GAAGH,GAAG,CAACE,GAAJ,KAAY,GAA1B;;AACA,YAAIF,GAAG,CAACpD,IAAJ,CAAS1D,MAAT,IAAmB,CAAvB,EAA0B;AACtB,cAAM2B,EAAE,GAAG,CAACmF,GAAG,CAACpD,IAAJ,CAAS,CAAT,CAAZ;AACA,cAAM7B,EAAE,GAAG,CAACiF,GAAG,CAACpD,IAAJ,CAAS,CAAT,CAAZ;AACA,cAAMqB,KAAK,GAAG,CAAC+B,GAAG,CAACpD,IAAJ,CAAS,CAAT,CAAf;AACA,cAAMgE,YAAY,GAAG,CAACZ,GAAG,CAACpD,IAAJ,CAAS,CAAT,CAAtB;AACA,cAAMiE,SAAS,GAAG,CAACb,GAAG,CAACpD,IAAJ,CAAS,CAAT,CAAnB;;AACA,cAAIrD,IAAC,GAAG,CAACyG,GAAG,CAACpD,IAAJ,CAAS,CAAT,CAAT;;AACA,cAAIpD,IAAC,GAAG,CAACwG,GAAG,CAACpD,IAAJ,CAAS,CAAT,CAAT;;AACA,cAAIuD,OAAJ,EAAW;AACP5G,YAAAA,IAAC,IAAIuD,IAAI,CAACvD,CAAV;AACAC,YAAAA,IAAC,IAAIsD,IAAI,CAACtD,CAAV;AACH;;AACD,cAAID,IAAC,KAAKuD,IAAI,CAACvD,CAAX,IAAgBC,IAAC,KAAKsD,IAAI,CAACtD,CAA/B,EAAkC;AAC9B;AACH;;AACD,cAAIqB,EAAE,KAAK,CAAP,IAAYE,EAAE,KAAK,CAAvB,EAA0B;AACtBnC,YAAAA,GAAG,GAAGA,GAAG,CAACQ,MAAJ,CAAWP,WAAW,CAACiE,IAAI,CAACvD,CAAN,EAASuD,IAAI,CAACtD,CAAd,EAAiBD,IAAjB,EAAoBC,IAApB,EAAuBd,CAAvB,CAAtB,CAAN;AACAoE,YAAAA,IAAI,CAACiD,WAAL,CAAiBxG,IAAjB,EAAoBC,IAApB;AACH,WAHD,MAIK;AACD,iBAAK,IAAIL,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AACxB,kBAAM2H,YAAY,GAAG,IAAIjJ,iBAAJ,CAAsB,CAACiF,IAAI,CAACvD,CAAN,EAASuD,IAAI,CAACtD,CAAd,CAAtB,EAAwC,CAACD,IAAD,EAAIC,IAAJ,CAAxC,EAAgD,CAACqB,EAAD,EAAKE,EAAL,CAAhD,EAA0DkD,KAA1D,EAAiE2C,YAAY,GAAG,IAAH,GAAU,KAAvF,EAA8FC,SAAS,GAAG,IAAH,GAAU,KAAjH,CAArB;AACA,kBAAIE,OAAO,GAAGD,YAAY,CAACE,cAAb,EAAd;;AACA,qBAAOD,OAAP,EAAgB;AACZ,oBAAMV,IAAE,GAAGT,SAAS,CAACmB,OAAO,CAACxF,GAAR,CAAY,CAAZ,CAAD,EAAiBwF,OAAO,CAACxF,GAAR,CAAY,CAAZ,CAAjB,EAAiCwF,OAAO,CAACE,GAAR,CAAY,CAAZ,CAAjC,EAAiDF,OAAO,CAACE,GAAR,CAAY,CAAZ,CAAjD,EAAiEF,OAAO,CAACG,EAAR,CAAW,CAAX,CAAjE,EAAgFH,OAAO,CAACG,EAAR,CAAW,CAAX,CAAhF,EAA+FpE,IAA/F,EAAqGpE,CAArG,CAApB;;AACAE,gBAAAA,GAAG,GAAGA,GAAG,CAACQ,MAAJ,CAAWiH,IAAX,CAAN;AACAU,gBAAAA,OAAO,GAAGD,YAAY,CAACE,cAAb,EAAV;AACH;AACJ;AACJ;AACJ;;AACD;AACH;;AACD;AACI;AAlPR;;AAoPA,SAAOpI,GAAP;AACH","sourcesContent":["import { RoughPath, PathFitter, RoughArcConverter } from './path.js';\nimport { getFiller } from './fillers/filler.js';\nimport { Random } from './math.js';\nconst helper = {\n    randOffset,\n    randOffsetWithRange,\n    ellipse,\n    doubleLineOps\n};\nexport function line(x1, y1, x2, y2, o) {\n    return { type: 'path', ops: _doubleLine(x1, y1, x2, y2, o) };\n}\nexport function linearPath(points, close, o) {\n    const len = (points || []).length;\n    if (len > 2) {\n        let ops = [];\n        for (let i = 0; i < (len - 1); i++) {\n            ops = ops.concat(_doubleLine(points[i][0], points[i][1], points[i + 1][0], points[i + 1][1], o));\n        }\n        if (close) {\n            ops = ops.concat(_doubleLine(points[len - 1][0], points[len - 1][1], points[0][0], points[0][1], o));\n        }\n        return { type: 'path', ops };\n    }\n    else if (len === 2) {\n        return line(points[0][0], points[0][1], points[1][0], points[1][1], o);\n    }\n    return { type: 'path', ops: [] };\n}\nexport function polygon(points, o) {\n    return linearPath(points, true, o);\n}\nexport function rectangle(x, y, width, height, o) {\n    const points = [\n        [x, y], [x + width, y], [x + width, y + height], [x, y + height]\n    ];\n    return polygon(points, o);\n}\nexport function curve(points, o) {\n    const o1 = _curveWithOffset(points, 1 * (1 + o.roughness * 0.2), o);\n    const o2 = _curveWithOffset(points, 1.5 * (1 + o.roughness * 0.22), o);\n    return { type: 'path', ops: o1.concat(o2) };\n}\nexport function ellipse(x, y, width, height, o) {\n    const params = generateEllipseParams(width, height, o);\n    return ellipseWithParams(x, y, o, params).opset;\n}\nexport function generateEllipseParams(width, height, o) {\n    const psq = Math.sqrt(Math.PI * 2 * Math.sqrt((Math.pow(width / 2, 2) + Math.pow(height / 2, 2)) / 2));\n    const stepCount = Math.max(o.curveStepCount, (o.curveStepCount / Math.sqrt(200)) * psq);\n    const increment = (Math.PI * 2) / stepCount;\n    let rx = Math.abs(width / 2);\n    let ry = Math.abs(height / 2);\n    const curveFitRandomness = 1 - o.curveFitting;\n    rx += _offsetOpt(rx * curveFitRandomness, o);\n    ry += _offsetOpt(ry * curveFitRandomness, o);\n    return { increment, rx, ry };\n}\nexport function ellipseWithParams(x, y, o, ellipseParams) {\n    const [ap1, cp1] = _computeEllipsePoints(ellipseParams.increment, x, y, ellipseParams.rx, ellipseParams.ry, 1, ellipseParams.increment * _offset(0.1, _offset(0.4, 1, o), o), o);\n    const [ap2] = _computeEllipsePoints(ellipseParams.increment, x, y, ellipseParams.rx, ellipseParams.ry, 1.5, 0, o);\n    const o1 = _curve(ap1, null, o);\n    const o2 = _curve(ap2, null, o);\n    return {\n        estimatedPoints: cp1,\n        opset: { type: 'path', ops: o1.concat(o2) }\n    };\n}\nexport function arc(x, y, width, height, start, stop, closed, roughClosure, o) {\n    const cx = x;\n    const cy = y;\n    let rx = Math.abs(width / 2);\n    let ry = Math.abs(height / 2);\n    rx += _offsetOpt(rx * 0.01, o);\n    ry += _offsetOpt(ry * 0.01, o);\n    let strt = start;\n    let stp = stop;\n    while (strt < 0) {\n        strt += Math.PI * 2;\n        stp += Math.PI * 2;\n    }\n    if ((stp - strt) > (Math.PI * 2)) {\n        strt = 0;\n        stp = Math.PI * 2;\n    }\n    const ellipseInc = (Math.PI * 2) / o.curveStepCount;\n    const arcInc = Math.min(ellipseInc / 2, (stp - strt) / 2);\n    const o1 = _arc(arcInc, cx, cy, rx, ry, strt, stp, 1, o);\n    const o2 = _arc(arcInc, cx, cy, rx, ry, strt, stp, 1.5, o);\n    let ops = o1.concat(o2);\n    if (closed) {\n        if (roughClosure) {\n            ops = ops.concat(_doubleLine(cx, cy, cx + rx * Math.cos(strt), cy + ry * Math.sin(strt), o));\n            ops = ops.concat(_doubleLine(cx, cy, cx + rx * Math.cos(stp), cy + ry * Math.sin(stp), o));\n        }\n        else {\n            ops.push({ op: 'lineTo', data: [cx, cy] });\n            ops.push({ op: 'lineTo', data: [cx + rx * Math.cos(strt), cy + ry * Math.sin(strt)] });\n        }\n    }\n    return { type: 'path', ops };\n}\nexport function svgPath(path, o) {\n    path = (path || '').replace(/\\n/g, ' ').replace(/(-\\s)/g, '-').replace('/(\\s\\s)/g', ' ');\n    let p = new RoughPath(path);\n    if (o.simplification) {\n        const fitter = new PathFitter(p.linearPoints, p.closed);\n        const d = fitter.fit(o.simplification);\n        p = new RoughPath(d);\n    }\n    let ops = [];\n    const segments = p.segments || [];\n    for (let i = 0; i < segments.length; i++) {\n        const s = segments[i];\n        const prev = i > 0 ? segments[i - 1] : null;\n        const opList = _processSegment(p, s, prev, o);\n        if (opList && opList.length) {\n            ops = ops.concat(opList);\n        }\n    }\n    return { type: 'path', ops };\n}\n// Fills\nexport function solidFillPolygon(points, o) {\n    const ops = [];\n    if (points.length) {\n        const offset = o.maxRandomnessOffset || 0;\n        const len = points.length;\n        if (len > 2) {\n            ops.push({ op: 'move', data: [points[0][0] + _offsetOpt(offset, o), points[0][1] + _offsetOpt(offset, o)] });\n            for (let i = 1; i < len; i++) {\n                ops.push({ op: 'lineTo', data: [points[i][0] + _offsetOpt(offset, o), points[i][1] + _offsetOpt(offset, o)] });\n            }\n        }\n    }\n    return { type: 'fillPath', ops };\n}\nexport function patternFillPolygon(points, o) {\n    return getFiller(o, helper).fillPolygon(points, o);\n}\nexport function patternFillArc(x, y, width, height, start, stop, o) {\n    const cx = x;\n    const cy = y;\n    let rx = Math.abs(width / 2);\n    let ry = Math.abs(height / 2);\n    rx += _offsetOpt(rx * 0.01, o);\n    ry += _offsetOpt(ry * 0.01, o);\n    let strt = start;\n    let stp = stop;\n    while (strt < 0) {\n        strt += Math.PI * 2;\n        stp += Math.PI * 2;\n    }\n    if ((stp - strt) > (Math.PI * 2)) {\n        strt = 0;\n        stp = Math.PI * 2;\n    }\n    const increment = (stp - strt) / o.curveStepCount;\n    const points = [];\n    for (let angle = strt; angle <= stp; angle = angle + increment) {\n        points.push([cx + rx * Math.cos(angle), cy + ry * Math.sin(angle)]);\n    }\n    points.push([cx + rx * Math.cos(stp), cy + ry * Math.sin(stp)]);\n    points.push([cx, cy]);\n    return patternFillPolygon(points, o);\n}\nexport function randOffset(x, o) {\n    return _offsetOpt(x, o);\n}\nexport function randOffsetWithRange(min, max, o) {\n    return _offset(min, max, o);\n}\nexport function doubleLineOps(x1, y1, x2, y2, o) {\n    return _doubleLine(x1, y1, x2, y2, o);\n}\n// Private helpers\nfunction random(ops) {\n    if (!ops.randomizer) {\n        ops.randomizer = new Random(ops.seed || 0);\n    }\n    return ops.randomizer.next();\n}\nfunction _offset(min, max, ops) {\n    return ops.roughness * ops.roughnessGain * ((random(ops) * (max - min)) + min);\n}\nfunction _offsetOpt(x, ops) {\n    return _offset(-x, x, ops);\n}\nfunction _doubleLine(x1, y1, x2, y2, o) {\n    const o1 = _line(x1, y1, x2, y2, o, true, false);\n    const o2 = _line(x1, y1, x2, y2, o, true, true);\n    return o1.concat(o2);\n}\nfunction _line(x1, y1, x2, y2, o, move, overlay) {\n    const lengthSq = Math.pow((x1 - x2), 2) + Math.pow((y1 - y2), 2);\n    const length = Math.sqrt(lengthSq);\n    if (length < 200) {\n        o.roughnessGain = 1;\n    }\n    else if (length > 500) {\n        o.roughnessGain = 0.4;\n    }\n    else {\n        o.roughnessGain = (-0.0016668) * length + 1.233334;\n    }\n    let offset = o.maxRandomnessOffset || 0;\n    if ((offset * offset * 100) > lengthSq) {\n        offset = length / 10;\n    }\n    const halfOffset = offset / 2;\n    const divergePoint = 0.2 + random(o) * 0.2;\n    let midDispX = o.bowing * o.maxRandomnessOffset * (y2 - y1) / 200;\n    let midDispY = o.bowing * o.maxRandomnessOffset * (x1 - x2) / 200;\n    midDispX = _offsetOpt(midDispX, o);\n    midDispY = _offsetOpt(midDispY, o);\n    const ops = [];\n    const randomHalf = () => _offsetOpt(halfOffset, o);\n    const randomFull = () => _offsetOpt(offset, o);\n    if (move) {\n        if (overlay) {\n            ops.push({\n                op: 'move', data: [\n                    x1 + randomHalf(),\n                    y1 + randomHalf()\n                ]\n            });\n        }\n        else {\n            ops.push({\n                op: 'move', data: [\n                    x1 + _offsetOpt(offset, o),\n                    y1 + _offsetOpt(offset, o)\n                ]\n            });\n        }\n    }\n    if (overlay) {\n        ops.push({\n            op: 'bcurveTo', data: [\n                midDispX + x1 + (x2 - x1) * divergePoint + randomHalf(),\n                midDispY + y1 + (y2 - y1) * divergePoint + randomHalf(),\n                midDispX + x1 + 2 * (x2 - x1) * divergePoint + randomHalf(),\n                midDispY + y1 + 2 * (y2 - y1) * divergePoint + randomHalf(),\n                x2 + randomHalf(),\n                y2 + randomHalf()\n            ]\n        });\n    }\n    else {\n        ops.push({\n            op: 'bcurveTo', data: [\n                midDispX + x1 + (x2 - x1) * divergePoint + randomFull(),\n                midDispY + y1 + (y2 - y1) * divergePoint + randomFull(),\n                midDispX + x1 + 2 * (x2 - x1) * divergePoint + randomFull(),\n                midDispY + y1 + 2 * (y2 - y1) * divergePoint + randomFull(),\n                x2 + randomFull(),\n                y2 + randomFull()\n            ]\n        });\n    }\n    return ops;\n}\nfunction _curveWithOffset(points, offset, o) {\n    const ps = [];\n    ps.push([\n        points[0][0] + _offsetOpt(offset, o),\n        points[0][1] + _offsetOpt(offset, o),\n    ]);\n    ps.push([\n        points[0][0] + _offsetOpt(offset, o),\n        points[0][1] + _offsetOpt(offset, o),\n    ]);\n    for (let i = 1; i < points.length; i++) {\n        ps.push([\n            points[i][0] + _offsetOpt(offset, o),\n            points[i][1] + _offsetOpt(offset, o),\n        ]);\n        if (i === (points.length - 1)) {\n            ps.push([\n                points[i][0] + _offsetOpt(offset, o),\n                points[i][1] + _offsetOpt(offset, o),\n            ]);\n        }\n    }\n    return _curve(ps, null, o);\n}\nfunction _curve(points, closePoint, o) {\n    const len = points.length;\n    let ops = [];\n    if (len > 3) {\n        const b = [];\n        const s = 1 - o.curveTightness;\n        ops.push({ op: 'move', data: [points[1][0], points[1][1]] });\n        for (let i = 1; (i + 2) < len; i++) {\n            const cachedVertArray = points[i];\n            b[0] = [cachedVertArray[0], cachedVertArray[1]];\n            b[1] = [cachedVertArray[0] + (s * points[i + 1][0] - s * points[i - 1][0]) / 6, cachedVertArray[1] + (s * points[i + 1][1] - s * points[i - 1][1]) / 6];\n            b[2] = [points[i + 1][0] + (s * points[i][0] - s * points[i + 2][0]) / 6, points[i + 1][1] + (s * points[i][1] - s * points[i + 2][1]) / 6];\n            b[3] = [points[i + 1][0], points[i + 1][1]];\n            ops.push({ op: 'bcurveTo', data: [b[1][0], b[1][1], b[2][0], b[2][1], b[3][0], b[3][1]] });\n        }\n        if (closePoint && closePoint.length === 2) {\n            const ro = o.maxRandomnessOffset;\n            ops.push({ op: 'lineTo', data: [closePoint[0] + _offsetOpt(ro, o), closePoint[1] + _offsetOpt(ro, o)] });\n        }\n    }\n    else if (len === 3) {\n        ops.push({ op: 'move', data: [points[1][0], points[1][1]] });\n        ops.push({\n            op: 'bcurveTo', data: [\n                points[1][0], points[1][1],\n                points[2][0], points[2][1],\n                points[2][0], points[2][1]\n            ]\n        });\n    }\n    else if (len === 2) {\n        ops = ops.concat(_doubleLine(points[0][0], points[0][1], points[1][0], points[1][1], o));\n    }\n    return ops;\n}\nfunction _computeEllipsePoints(increment, cx, cy, rx, ry, offset, overlap, o) {\n    const corePoints = [];\n    const allPoints = [];\n    const radOffset = _offsetOpt(0.5, o) - (Math.PI / 2);\n    allPoints.push([\n        _offsetOpt(offset, o) + cx + 0.9 * rx * Math.cos(radOffset - increment),\n        _offsetOpt(offset, o) + cy + 0.9 * ry * Math.sin(radOffset - increment)\n    ]);\n    for (let angle = radOffset; angle < (Math.PI * 2 + radOffset - 0.01); angle = angle + increment) {\n        const p = [\n            _offsetOpt(offset, o) + cx + rx * Math.cos(angle),\n            _offsetOpt(offset, o) + cy + ry * Math.sin(angle)\n        ];\n        corePoints.push(p);\n        allPoints.push(p);\n    }\n    allPoints.push([\n        _offsetOpt(offset, o) + cx + rx * Math.cos(radOffset + Math.PI * 2 + overlap * 0.5),\n        _offsetOpt(offset, o) + cy + ry * Math.sin(radOffset + Math.PI * 2 + overlap * 0.5)\n    ]);\n    allPoints.push([\n        _offsetOpt(offset, o) + cx + 0.98 * rx * Math.cos(radOffset + overlap),\n        _offsetOpt(offset, o) + cy + 0.98 * ry * Math.sin(radOffset + overlap)\n    ]);\n    allPoints.push([\n        _offsetOpt(offset, o) + cx + 0.9 * rx * Math.cos(radOffset + overlap * 0.5),\n        _offsetOpt(offset, o) + cy + 0.9 * ry * Math.sin(radOffset + overlap * 0.5)\n    ]);\n    return [allPoints, corePoints];\n}\nfunction _arc(increment, cx, cy, rx, ry, strt, stp, offset, o) {\n    const radOffset = strt + _offsetOpt(0.1, o);\n    const points = [];\n    points.push([\n        _offsetOpt(offset, o) + cx + 0.9 * rx * Math.cos(radOffset - increment),\n        _offsetOpt(offset, o) + cy + 0.9 * ry * Math.sin(radOffset - increment)\n    ]);\n    for (let angle = radOffset; angle <= stp; angle = angle + increment) {\n        points.push([\n            _offsetOpt(offset, o) + cx + rx * Math.cos(angle),\n            _offsetOpt(offset, o) + cy + ry * Math.sin(angle)\n        ]);\n    }\n    points.push([\n        cx + rx * Math.cos(stp),\n        cy + ry * Math.sin(stp)\n    ]);\n    points.push([\n        cx + rx * Math.cos(stp),\n        cy + ry * Math.sin(stp)\n    ]);\n    return _curve(points, null, o);\n}\nfunction _bezierTo(x1, y1, x2, y2, x, y, path, o) {\n    const ops = [];\n    const ros = [o.maxRandomnessOffset || 1, (o.maxRandomnessOffset || 1) + 0.5];\n    let f = [0, 0];\n    for (let i = 0; i < 2; i++) {\n        if (i === 0) {\n            ops.push({ op: 'move', data: [path.x, path.y] });\n        }\n        else {\n            ops.push({ op: 'move', data: [path.x + _offsetOpt(ros[0], o), path.y + _offsetOpt(ros[0], o)] });\n        }\n        f = [x + _offsetOpt(ros[i], o), y + _offsetOpt(ros[i], o)];\n        ops.push({\n            op: 'bcurveTo', data: [\n                x1 + _offsetOpt(ros[i], o), y1 + _offsetOpt(ros[i], o),\n                x2 + _offsetOpt(ros[i], o), y2 + _offsetOpt(ros[i], o),\n                f[0], f[1]\n            ]\n        });\n    }\n    path.setPosition(f[0], f[1]);\n    return ops;\n}\nfunction _processSegment(path, seg, prevSeg, o) {\n    let ops = [];\n    switch (seg.key) {\n        case 'M':\n        case 'm': {\n            const delta = seg.key === 'm';\n            if (seg.data.length >= 2) {\n                let x = +seg.data[0];\n                let y = +seg.data[1];\n                if (delta) {\n                    x += path.x;\n                    y += path.y;\n                }\n                const ro = 1 * (o.maxRandomnessOffset || 0);\n                x = x + _offsetOpt(ro, o);\n                y = y + _offsetOpt(ro, o);\n                path.setPosition(x, y);\n                ops.push({ op: 'move', data: [x, y] });\n            }\n            break;\n        }\n        case 'L':\n        case 'l': {\n            const delta = seg.key === 'l';\n            if (seg.data.length >= 2) {\n                let x = +seg.data[0];\n                let y = +seg.data[1];\n                if (delta) {\n                    x += path.x;\n                    y += path.y;\n                }\n                ops = ops.concat(_doubleLine(path.x, path.y, x, y, o));\n                path.setPosition(x, y);\n            }\n            break;\n        }\n        case 'H':\n        case 'h': {\n            const delta = seg.key === 'h';\n            if (seg.data.length) {\n                let x = +seg.data[0];\n                if (delta) {\n                    x += path.x;\n                }\n                ops = ops.concat(_doubleLine(path.x, path.y, x, path.y, o));\n                path.setPosition(x, path.y);\n            }\n            break;\n        }\n        case 'V':\n        case 'v': {\n            const delta = seg.key === 'v';\n            if (seg.data.length) {\n                let y = +seg.data[0];\n                if (delta) {\n                    y += path.y;\n                }\n                ops = ops.concat(_doubleLine(path.x, path.y, path.x, y, o));\n                path.setPosition(path.x, y);\n            }\n            break;\n        }\n        case 'Z':\n        case 'z': {\n            if (path.first) {\n                ops = ops.concat(_doubleLine(path.x, path.y, path.first[0], path.first[1], o));\n                path.setPosition(path.first[0], path.first[1]);\n                path.first = null;\n            }\n            break;\n        }\n        case 'C':\n        case 'c': {\n            const delta = seg.key === 'c';\n            if (seg.data.length >= 6) {\n                let x1 = +seg.data[0];\n                let y1 = +seg.data[1];\n                let x2 = +seg.data[2];\n                let y2 = +seg.data[3];\n                let x = +seg.data[4];\n                let y = +seg.data[5];\n                if (delta) {\n                    x1 += path.x;\n                    x2 += path.x;\n                    x += path.x;\n                    y1 += path.y;\n                    y2 += path.y;\n                    y += path.y;\n                }\n                const ob = _bezierTo(x1, y1, x2, y2, x, y, path, o);\n                ops = ops.concat(ob);\n                path.bezierReflectionPoint = [x + (x - x2), y + (y - y2)];\n            }\n            break;\n        }\n        case 'S':\n        case 's': {\n            const delta = seg.key === 's';\n            if (seg.data.length >= 4) {\n                let x2 = +seg.data[0];\n                let y2 = +seg.data[1];\n                let x = +seg.data[2];\n                let y = +seg.data[3];\n                if (delta) {\n                    x2 += path.x;\n                    x += path.x;\n                    y2 += path.y;\n                    y += path.y;\n                }\n                let x1 = x2;\n                let y1 = y2;\n                const prevKey = prevSeg ? prevSeg.key : '';\n                let ref = null;\n                if (prevKey === 'c' || prevKey === 'C' || prevKey === 's' || prevKey === 'S') {\n                    ref = path.bezierReflectionPoint;\n                }\n                if (ref) {\n                    x1 = ref[0];\n                    y1 = ref[1];\n                }\n                const ob = _bezierTo(x1, y1, x2, y2, x, y, path, o);\n                ops = ops.concat(ob);\n                path.bezierReflectionPoint = [x + (x - x2), y + (y - y2)];\n            }\n            break;\n        }\n        case 'Q':\n        case 'q': {\n            const delta = seg.key === 'q';\n            if (seg.data.length >= 4) {\n                let x1 = +seg.data[0];\n                let y1 = +seg.data[1];\n                let x = +seg.data[2];\n                let y = +seg.data[3];\n                if (delta) {\n                    x1 += path.x;\n                    x += path.x;\n                    y1 += path.y;\n                    y += path.y;\n                }\n                const offset1 = 1 * (1 + o.roughness * 0.2);\n                const offset2 = 1.5 * (1 + o.roughness * 0.22);\n                ops.push({ op: 'move', data: [path.x + _offsetOpt(offset1, o), path.y + _offsetOpt(offset1, o)] });\n                let f = [x + _offsetOpt(offset1, o), y + _offsetOpt(offset1, o)];\n                ops.push({\n                    op: 'qcurveTo', data: [\n                        x1 + _offsetOpt(offset1, o), y1 + _offsetOpt(offset1, o),\n                        f[0], f[1]\n                    ]\n                });\n                ops.push({ op: 'move', data: [path.x + _offsetOpt(offset2, o), path.y + _offsetOpt(offset2, o)] });\n                f = [x + _offsetOpt(offset2, o), y + _offsetOpt(offset2, o)];\n                ops.push({\n                    op: 'qcurveTo', data: [\n                        x1 + _offsetOpt(offset2, o), y1 + _offsetOpt(offset2, o),\n                        f[0], f[1]\n                    ]\n                });\n                path.setPosition(f[0], f[1]);\n                path.quadReflectionPoint = [x + (x - x1), y + (y - y1)];\n            }\n            break;\n        }\n        case 'T':\n        case 't': {\n            const delta = seg.key === 't';\n            if (seg.data.length >= 2) {\n                let x = +seg.data[0];\n                let y = +seg.data[1];\n                if (delta) {\n                    x += path.x;\n                    y += path.y;\n                }\n                let x1 = x;\n                let y1 = y;\n                const prevKey = prevSeg ? prevSeg.key : '';\n                let ref = null;\n                if (prevKey === 'q' || prevKey === 'Q' || prevKey === 't' || prevKey === 'T') {\n                    ref = path.quadReflectionPoint;\n                }\n                if (ref) {\n                    x1 = ref[0];\n                    y1 = ref[1];\n                }\n                const offset1 = 1 * (1 + o.roughness * 0.2);\n                const offset2 = 1.5 * (1 + o.roughness * 0.22);\n                ops.push({ op: 'move', data: [path.x + _offsetOpt(offset1, o), path.y + _offsetOpt(offset1, o)] });\n                let f = [x + _offsetOpt(offset1, o), y + _offsetOpt(offset1, o)];\n                ops.push({\n                    op: 'qcurveTo', data: [\n                        x1 + _offsetOpt(offset1, o), y1 + _offsetOpt(offset1, o),\n                        f[0], f[1]\n                    ]\n                });\n                ops.push({ op: 'move', data: [path.x + _offsetOpt(offset2, o), path.y + _offsetOpt(offset2, o)] });\n                f = [x + _offsetOpt(offset2, o), y + _offsetOpt(offset2, o)];\n                ops.push({\n                    op: 'qcurveTo', data: [\n                        x1 + _offsetOpt(offset2, o), y1 + _offsetOpt(offset2, o),\n                        f[0], f[1]\n                    ]\n                });\n                path.setPosition(f[0], f[1]);\n                path.quadReflectionPoint = [x + (x - x1), y + (y - y1)];\n            }\n            break;\n        }\n        case 'A':\n        case 'a': {\n            const delta = seg.key === 'a';\n            if (seg.data.length >= 7) {\n                const rx = +seg.data[0];\n                const ry = +seg.data[1];\n                const angle = +seg.data[2];\n                const largeArcFlag = +seg.data[3];\n                const sweepFlag = +seg.data[4];\n                let x = +seg.data[5];\n                let y = +seg.data[6];\n                if (delta) {\n                    x += path.x;\n                    y += path.y;\n                }\n                if (x === path.x && y === path.y) {\n                    break;\n                }\n                if (rx === 0 || ry === 0) {\n                    ops = ops.concat(_doubleLine(path.x, path.y, x, y, o));\n                    path.setPosition(x, y);\n                }\n                else {\n                    for (let i = 0; i < 1; i++) {\n                        const arcConverter = new RoughArcConverter([path.x, path.y], [x, y], [rx, ry], angle, largeArcFlag ? true : false, sweepFlag ? true : false);\n                        let segment = arcConverter.getNextSegment();\n                        while (segment) {\n                            const ob = _bezierTo(segment.cp1[0], segment.cp1[1], segment.cp2[0], segment.cp2[1], segment.to[0], segment.to[1], path, o);\n                            ops = ops.concat(ob);\n                            segment = arcConverter.getNextSegment();\n                        }\n                    }\n                }\n            }\n            break;\n        }\n        default:\n            break;\n    }\n    return ops;\n}\n"]},"metadata":{},"sourceType":"module"}