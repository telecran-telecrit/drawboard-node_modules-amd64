{"ast":null,"code":"var _jsxFileName = \"/home/pro/Solutions/drawboard-light/src/components/Popover.tsx\";\nimport React, { useLayoutEffect, useRef } from \"react\";\nimport \"./Popover.css\";\nexport function Popover(_ref) {\n  var children = _ref.children,\n      left = _ref.left,\n      top = _ref.top,\n      onCloseRequest = _ref.onCloseRequest,\n      _ref$fitInViewport = _ref.fitInViewport,\n      fitInViewport = _ref$fitInViewport === void 0 ? false : _ref$fitInViewport;\n  var popoverRef = useRef(null); // ensure the popover doesn't overflow the viewport\n\n  useLayoutEffect(function () {\n    if (fitInViewport && popoverRef.current) {\n      var element = popoverRef.current;\n\n      var _element$getBoundingC = element.getBoundingClientRect(),\n          x = _element$getBoundingC.x,\n          y = _element$getBoundingC.y,\n          width = _element$getBoundingC.width,\n          height = _element$getBoundingC.height;\n\n      var viewportWidth = window.innerWidth;\n\n      if (x + width > viewportWidth) {\n        element.style.left = \"\".concat(viewportWidth - width, \"px\");\n      }\n\n      var viewportHeight = window.innerHeight;\n\n      if (y + height > viewportHeight) {\n        element.style.top = \"\".concat(viewportHeight - height, \"px\");\n      }\n    }\n  }, [fitInViewport]);\n  return React.createElement(\"div\", {\n    className: \"popover\",\n    style: {\n      top: top,\n      left: left\n    },\n    ref: popoverRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"cover\",\n    onClick: onCloseRequest,\n    onContextMenu: function onContextMenu(event) {\n      event.preventDefault();\n\n      if (onCloseRequest) {\n        onCloseRequest();\n      }\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }), children);\n}","map":{"version":3,"sources":["/home/pro/Solutions/drawboard-light/src/components/Popover.tsx"],"names":["React","useLayoutEffect","useRef","Popover","children","left","top","onCloseRequest","fitInViewport","popoverRef","current","element","getBoundingClientRect","x","y","width","height","viewportWidth","window","innerWidth","style","viewportHeight","innerHeight","event","preventDefault"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,eAAhB,EAAiCC,MAAjC,QAA+C,OAA/C;AACA,OAAO,eAAP;AAUA,OAAO,SAASC,OAAT,OAMG;AAAA,MALRC,QAKQ,QALRA,QAKQ;AAAA,MAJRC,IAIQ,QAJRA,IAIQ;AAAA,MAHRC,GAGQ,QAHRA,GAGQ;AAAA,MAFRC,cAEQ,QAFRA,cAEQ;AAAA,gCADRC,aACQ;AAAA,MADRA,aACQ,mCADQ,KACR;AACR,MAAMC,UAAU,GAAGP,MAAM,CAAiB,IAAjB,CAAzB,CADQ,CAGR;;AACAD,EAAAA,eAAe,CAAC,YAAM;AACpB,QAAIO,aAAa,IAAIC,UAAU,CAACC,OAAhC,EAAyC;AACvC,UAAMC,OAAO,GAAGF,UAAU,CAACC,OAA3B;;AADuC,kCAEPC,OAAO,CAACC,qBAAR,EAFO;AAAA,UAE/BC,CAF+B,yBAE/BA,CAF+B;AAAA,UAE5BC,CAF4B,yBAE5BA,CAF4B;AAAA,UAEzBC,KAFyB,yBAEzBA,KAFyB;AAAA,UAElBC,MAFkB,yBAElBA,MAFkB;;AAIvC,UAAMC,aAAa,GAAGC,MAAM,CAACC,UAA7B;;AACA,UAAIN,CAAC,GAAGE,KAAJ,GAAYE,aAAhB,EAA+B;AAC7BN,QAAAA,OAAO,CAACS,KAAR,CAAcf,IAAd,aAAwBY,aAAa,GAAGF,KAAxC;AACD;;AACD,UAAMM,cAAc,GAAGH,MAAM,CAACI,WAA9B;;AACA,UAAIR,CAAC,GAAGE,MAAJ,GAAaK,cAAjB,EAAiC;AAC/BV,QAAAA,OAAO,CAACS,KAAR,CAAcd,GAAd,aAAuBe,cAAc,GAAGL,MAAxC;AACD;AACF;AACF,GAdc,EAcZ,CAACR,aAAD,CAdY,CAAf;AAgBA,SACE;AAAK,IAAA,SAAS,EAAC,SAAf;AAAyB,IAAA,KAAK,EAAE;AAAEF,MAAAA,GAAG,EAAEA,GAAP;AAAYD,MAAAA,IAAI,EAAEA;AAAlB,KAAhC;AAA0D,IAAA,GAAG,EAAEI,UAA/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AACE,IAAA,SAAS,EAAC,OADZ;AAEE,IAAA,OAAO,EAAEF,cAFX;AAGE,IAAA,aAAa,EAAE,uBAAAgB,KAAK,EAAI;AACtBA,MAAAA,KAAK,CAACC,cAAN;;AACA,UAAIjB,cAAJ,EAAoB;AAClBA,QAAAA,cAAc;AACf;AACF,KARH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAWGH,QAXH,CADF;AAeD","sourcesContent":["import React, { useLayoutEffect, useRef } from \"react\";\nimport \"./Popover.css\";\n\ntype Props = {\n  top?: number;\n  left?: number;\n  children?: React.ReactNode;\n  onCloseRequest?(): void;\n  fitInViewport?: boolean;\n};\n\nexport function Popover({\n  children,\n  left,\n  top,\n  onCloseRequest,\n  fitInViewport = false,\n}: Props) {\n  const popoverRef = useRef<HTMLDivElement>(null);\n\n  // ensure the popover doesn't overflow the viewport\n  useLayoutEffect(() => {\n    if (fitInViewport && popoverRef.current) {\n      const element = popoverRef.current;\n      const { x, y, width, height } = element.getBoundingClientRect();\n\n      const viewportWidth = window.innerWidth;\n      if (x + width > viewportWidth) {\n        element.style.left = `${viewportWidth - width}px`;\n      }\n      const viewportHeight = window.innerHeight;\n      if (y + height > viewportHeight) {\n        element.style.top = `${viewportHeight - height}px`;\n      }\n    }\n  }, [fitInViewport]);\n\n  return (\n    <div className=\"popover\" style={{ top: top, left: left }} ref={popoverRef}>\n      <div\n        className=\"cover\"\n        onClick={onCloseRequest}\n        onContextMenu={event => {\n          event.preventDefault();\n          if (onCloseRequest) {\n            onCloseRequest();\n          }\n        }}\n      />\n      {children}\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}