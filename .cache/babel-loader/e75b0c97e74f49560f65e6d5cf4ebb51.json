{"ast":null,"code":"import { normalizeScroll } from \"./scene\";\nexport function getCenter(pointers) {\n  const allCoords = Array.from(pointers.values());\n  return {\n    x: normalizeScroll(sum(allCoords, coords => coords.x) / allCoords.length),\n    y: normalizeScroll(sum(allCoords, coords => coords.y) / allCoords.length)\n  };\n}\nexport function getDistance([a, b]) {\n  return Math.hypot(a.x - b.x, a.y - b.y);\n}\n\nfunction sum(array, mapper) {\n  return array.reduce((acc, item) => acc + mapper(item), 0);\n}","map":{"version":3,"sources":["/home/pro/Solutions/drawboard-light/src/gesture.ts"],"names":["normalizeScroll","getCenter","pointers","allCoords","Array","from","values","x","sum","coords","length","y","getDistance","a","b","Math","hypot","array","mapper","reduce","acc","item"],"mappings":"AACA,SAASA,eAAT,QAAgC,SAAhC;AAEA,OAAO,SAASC,SAAT,CAAmBC,QAAnB,EAAyD;AAC9D,QAAMC,SAAS,GAAGC,KAAK,CAACC,IAAN,CAAWH,QAAQ,CAACI,MAAT,EAAX,CAAlB;AACA,SAAO;AACLC,IAAAA,CAAC,EAAEP,eAAe,CAACQ,GAAG,CAACL,SAAD,EAAaM,MAAD,IAAYA,MAAM,CAACF,CAA/B,CAAH,GAAuCJ,SAAS,CAACO,MAAlD,CADb;AAELC,IAAAA,CAAC,EAAEX,eAAe,CAACQ,GAAG,CAACL,SAAD,EAAaM,MAAD,IAAYA,MAAM,CAACE,CAA/B,CAAH,GAAuCR,SAAS,CAACO,MAAlD;AAFb,GAAP;AAID;AAED,OAAO,SAASE,WAAT,CAAqB,CAACC,CAAD,EAAIC,CAAJ,CAArB,EAAuD;AAC5D,SAAOC,IAAI,CAACC,KAAL,CAAWH,CAAC,CAACN,CAAF,GAAMO,CAAC,CAACP,CAAnB,EAAsBM,CAAC,CAACF,CAAF,GAAMG,CAAC,CAACH,CAA9B,CAAP;AACD;;AAED,SAASH,GAAT,CAAgBS,KAAhB,EAAqCC,MAArC,EAA0E;AACxE,SAAOD,KAAK,CAACE,MAAN,CAAa,CAACC,GAAD,EAAMC,IAAN,KAAeD,GAAG,GAAGF,MAAM,CAACG,IAAD,CAAxC,EAAgD,CAAhD,CAAP;AACD","sourcesContent":["import { PointerCoords } from \"./types\";\nimport { normalizeScroll } from \"./scene\";\n\nexport function getCenter(pointers: Map<number, PointerCoords>) {\n  const allCoords = Array.from(pointers.values());\n  return {\n    x: normalizeScroll(sum(allCoords, (coords) => coords.x) / allCoords.length),\n    y: normalizeScroll(sum(allCoords, (coords) => coords.y) / allCoords.length),\n  };\n}\n\nexport function getDistance([a, b]: readonly PointerCoords[]) {\n  return Math.hypot(a.x - b.x, a.y - b.y);\n}\n\nfunction sum<T>(array: readonly T[], mapper: (item: T) => number): number {\n  return array.reduce((acc, item) => acc + mapper(item), 0);\n}\n"]},"metadata":{},"sourceType":"module"}