{"ast":null,"code":"import _slicedToArray from \"/home/pro/Solutions/drawboard-light/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport rough from \"roughjs/bin/rough\";\nimport { getCommonBounds } from \"../element/bounds\";\nimport { renderScene, renderSceneToSvg } from \"../renderer/renderScene\";\nimport { distance, SVG_NS } from \"../utils\";\nimport { normalizeScroll } from \"./scroll\";\nexport function exportToCanvas(elements, appState, _ref) {\n  var exportBackground = _ref.exportBackground,\n      _ref$exportPadding = _ref.exportPadding,\n      exportPadding = _ref$exportPadding === void 0 ? 10 : _ref$exportPadding,\n      viewBackgroundColor = _ref.viewBackgroundColor,\n      _ref$scale = _ref.scale,\n      scale = _ref$scale === void 0 ? 1 : _ref$scale;\n  var createCanvas = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : function (width, height) {\n    var tempCanvas = document.createElement(\"canvas\");\n    tempCanvas.width = width * scale;\n    tempCanvas.height = height * scale;\n    return tempCanvas;\n  };\n  return function () {\n    var _tempCanvas$getContex;\n\n    // calculate smallest area to fit the contents in\n    var _getCommonBounds = getCommonBounds(elements),\n        _getCommonBounds2 = _slicedToArray(_getCommonBounds, 4),\n        minX = _getCommonBounds2[0],\n        minY = _getCommonBounds2[1],\n        maxX = _getCommonBounds2[2],\n        maxY = _getCommonBounds2[3];\n\n    var width = distance(minX, maxX) + exportPadding * 2;\n    var height = distance(minY, maxY) + exportPadding * 2;\n    var tempCanvas = createCanvas(width, height);\n    (_tempCanvas$getContex = tempCanvas.getContext(\"2d\")) === null || _tempCanvas$getContex === void 0 ? void 0 : _tempCanvas$getContex.scale(scale, scale);\n    renderScene(elements, appState, null, rough.canvas(tempCanvas), tempCanvas, {\n      viewBackgroundColor: exportBackground ? viewBackgroundColor : null,\n      scrollX: normalizeScroll(-minX + exportPadding),\n      scrollY: normalizeScroll(-minY + exportPadding),\n      zoom: 1,\n      remotePointerViewportCoords: {}\n    }, {\n      renderScrollbars: false,\n      renderSelection: false,\n      renderOptimizations: false\n    });\n    return tempCanvas;\n  }();\n}\nexport function exportToSvg(elements, _ref2) {\n  var exportBackground = _ref2.exportBackground,\n      _ref2$exportPadding = _ref2.exportPadding,\n      exportPadding = _ref2$exportPadding === void 0 ? 10 : _ref2$exportPadding,\n      viewBackgroundColor = _ref2.viewBackgroundColor;\n\n  // calculate canvas dimensions\n  var _getCommonBounds3 = getCommonBounds(elements),\n      _getCommonBounds4 = _slicedToArray(_getCommonBounds3, 4),\n      minX = _getCommonBounds4[0],\n      minY = _getCommonBounds4[1],\n      maxX = _getCommonBounds4[2],\n      maxY = _getCommonBounds4[3];\n\n  var width = distance(minX, maxX) + exportPadding * 2;\n  var height = distance(minY, maxY) + exportPadding * 2; // initialze SVG root\n\n  var svgRoot = document.createElementNS(SVG_NS, \"svg\");\n  svgRoot.setAttribute(\"version\", \"1.1\");\n  svgRoot.setAttribute(\"xmlns\", SVG_NS);\n  svgRoot.setAttribute(\"viewBox\", \"0 0 \".concat(width, \" \").concat(height));\n  svgRoot.innerHTML = \"\\n  <defs>\\n    <style>\\n      @font-face {\\n        font-family: \\\"Virgil\\\";\\n        src: url(\\\"https://excalidraw.com/FG_Virgil.ttf\\\");\\n      }\\n      @font-face {\\n        font-family: \\\"Cascadia\\\";\\n        src: url(\\\"https://excalidraw.com/Cascadia.ttf\\\");\\n      }\\n    </style>\\n  </defs>\\n  \"; // render backgroiund rect\n\n  if (exportBackground && viewBackgroundColor) {\n    var rect = svgRoot.ownerDocument.createElementNS(SVG_NS, \"rect\");\n    rect.setAttribute(\"x\", \"0\");\n    rect.setAttribute(\"y\", \"0\");\n    rect.setAttribute(\"width\", \"\".concat(width));\n    rect.setAttribute(\"height\", \"\".concat(height));\n    rect.setAttribute(\"fill\", viewBackgroundColor);\n    svgRoot.appendChild(rect);\n  }\n\n  var rsvg = rough.svg(svgRoot);\n  renderSceneToSvg(elements, rsvg, svgRoot, {\n    offsetX: -minX + exportPadding,\n    offsetY: -minY + exportPadding\n  });\n  return svgRoot;\n}","map":{"version":3,"sources":["/home/pro/Solutions/drawboard-light/src/scene/export.ts"],"names":["rough","getCommonBounds","renderScene","renderSceneToSvg","distance","SVG_NS","normalizeScroll","exportToCanvas","elements","appState","exportBackground","exportPadding","viewBackgroundColor","scale","createCanvas","width","height","tempCanvas","document","createElement","minX","minY","maxX","maxY","getContext","canvas","scrollX","scrollY","zoom","remotePointerViewportCoords","renderScrollbars","renderSelection","renderOptimizations","exportToSvg","svgRoot","createElementNS","setAttribute","innerHTML","rect","ownerDocument","appendChild","rsvg","svg","offsetX","offsetY"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,mBAAlB;AAEA,SAASC,eAAT,QAAgC,mBAAhC;AACA,SAASC,WAAT,EAAsBC,gBAAtB,QAA8C,yBAA9C;AACA,SAASC,QAAT,EAAmBC,MAAnB,QAAiC,UAAjC;AACA,SAASC,eAAT,QAAgC,UAAhC;AAGA,OAAO,SAASC,cAAT,CACLC,QADK,EAELC,QAFK;AAAA,MAIHC,gBAJG,QAIHA,gBAJG;AAAA,gCAKHC,aALG;AAAA,MAKHA,aALG,mCAKa,EALb;AAAA,MAMHC,mBANG,QAMHA,mBANG;AAAA,wBAOHC,KAPG;AAAA,MAOHA,KAPG,2BAOK,CAPL;AAAA,MAcLC,YAdK,uEAckD,UACrDC,KADqD,EAErDC,MAFqD,EAGrD;AACA,QAAMC,UAAU,GAAGC,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAnB;AACAF,IAAAA,UAAU,CAACF,KAAX,GAAmBA,KAAK,GAAGF,KAA3B;AACAI,IAAAA,UAAU,CAACD,MAAX,GAAoBA,MAAM,GAAGH,KAA7B;AACA,WAAOI,UAAP;AACD,GAtBI;AAAA,qBAuBL;AAAA;;AACA;AADA,2BAEiChB,eAAe,CAACO,QAAD,CAFhD;AAAA;AAAA,QAEOY,IAFP;AAAA,QAEaC,IAFb;AAAA,QAEmBC,IAFnB;AAAA,QAEyBC,IAFzB;;AAGA,QAAMR,KAAK,GAAGX,QAAQ,CAACgB,IAAD,EAAOE,IAAP,CAAR,GAAuBX,aAAa,GAAG,CAArD;AACA,QAAMK,MAAM,GAAGZ,QAAQ,CAACiB,IAAD,EAAOE,IAAP,CAAR,GAAuBZ,aAAa,GAAG,CAAtD;AAEA,QAAMM,UAAe,GAAGH,YAAY,CAACC,KAAD,EAAQC,MAAR,CAApC;AACA,6BAAAC,UAAU,CAACO,UAAX,CAAsB,IAAtB,iFAA6BX,KAA7B,CAAmCA,KAAnC,EAA0CA,KAA1C;AAEAX,IAAAA,WAAW,CACTM,QADS,EAETC,QAFS,EAGT,IAHS,EAITT,KAAK,CAACyB,MAAN,CAAaR,UAAb,CAJS,EAKTA,UALS,EAMT;AACEL,MAAAA,mBAAmB,EAAEF,gBAAgB,GAAGE,mBAAH,GAAyB,IADhE;AAEEc,MAAAA,OAAO,EAAEpB,eAAe,CAAC,CAACc,IAAD,GAAQT,aAAT,CAF1B;AAGEgB,MAAAA,OAAO,EAAErB,eAAe,CAAC,CAACe,IAAD,GAAQV,aAAT,CAH1B;AAIEiB,MAAAA,IAAI,EAAE,CAJR;AAKEC,MAAAA,2BAA2B,EAAE;AAL/B,KANS,EAaT;AACEC,MAAAA,gBAAgB,EAAE,KADpB;AAEEC,MAAAA,eAAe,EAAE,KAFnB;AAGEC,MAAAA,mBAAmB,EAAE;AAHvB,KAbS,CAAX;AAmBA,WAAOf,UAAP;AACD,GApDM;AAAA;AAsDP,OAAO,SAASgB,WAAT,CACLzB,QADK,SAWU;AAAA,MARbE,gBAQa,SARbA,gBAQa;AAAA,kCAPbC,aAOa;AAAA,MAPbA,aAOa,oCAPG,EAOH;AAAA,MANbC,mBAMa,SANbA,mBAMa;;AACf;AADe,0BAEkBX,eAAe,CAACO,QAAD,CAFjC;AAAA;AAAA,MAERY,IAFQ;AAAA,MAEFC,IAFE;AAAA,MAEIC,IAFJ;AAAA,MAEUC,IAFV;;AAGf,MAAMR,KAAK,GAAGX,QAAQ,CAACgB,IAAD,EAAOE,IAAP,CAAR,GAAuBX,aAAa,GAAG,CAArD;AACA,MAAMK,MAAM,GAAGZ,QAAQ,CAACiB,IAAD,EAAOE,IAAP,CAAR,GAAuBZ,aAAa,GAAG,CAAtD,CAJe,CAMf;;AACA,MAAMuB,OAAO,GAAGhB,QAAQ,CAACiB,eAAT,CAAyB9B,MAAzB,EAAiC,KAAjC,CAAhB;AACA6B,EAAAA,OAAO,CAACE,YAAR,CAAqB,SAArB,EAAgC,KAAhC;AACAF,EAAAA,OAAO,CAACE,YAAR,CAAqB,OAArB,EAA8B/B,MAA9B;AACA6B,EAAAA,OAAO,CAACE,YAAR,CAAqB,SAArB,gBAAuCrB,KAAvC,cAAgDC,MAAhD;AAEAkB,EAAAA,OAAO,CAACG,SAAR,mTAZe,CA2Bf;;AACA,MAAI3B,gBAAgB,IAAIE,mBAAxB,EAA6C;AAC3C,QAAM0B,IAAI,GAAGJ,OAAO,CAACK,aAAR,CAAuBJ,eAAvB,CAAuC9B,MAAvC,EAA+C,MAA/C,CAAb;AACAiC,IAAAA,IAAI,CAACF,YAAL,CAAkB,GAAlB,EAAuB,GAAvB;AACAE,IAAAA,IAAI,CAACF,YAAL,CAAkB,GAAlB,EAAuB,GAAvB;AACAE,IAAAA,IAAI,CAACF,YAAL,CAAkB,OAAlB,YAA8BrB,KAA9B;AACAuB,IAAAA,IAAI,CAACF,YAAL,CAAkB,QAAlB,YAA+BpB,MAA/B;AACAsB,IAAAA,IAAI,CAACF,YAAL,CAAkB,MAAlB,EAA0BxB,mBAA1B;AACAsB,IAAAA,OAAO,CAACM,WAAR,CAAoBF,IAApB;AACD;;AAED,MAAMG,IAAI,GAAGzC,KAAK,CAAC0C,GAAN,CAAUR,OAAV,CAAb;AACA/B,EAAAA,gBAAgB,CAACK,QAAD,EAAWiC,IAAX,EAAiBP,OAAjB,EAA0B;AACxCS,IAAAA,OAAO,EAAE,CAACvB,IAAD,GAAQT,aADuB;AAExCiC,IAAAA,OAAO,EAAE,CAACvB,IAAD,GAAQV;AAFuB,GAA1B,CAAhB;AAIA,SAAOuB,OAAP;AACD","sourcesContent":["import rough from \"roughjs/bin/rough\";\nimport { ExcalidrawElement } from \"../element/types\";\nimport { getCommonBounds } from \"../element/bounds\";\nimport { renderScene, renderSceneToSvg } from \"../renderer/renderScene\";\nimport { distance, SVG_NS } from \"../utils\";\nimport { normalizeScroll } from \"./scroll\";\nimport { AppState } from \"../types\";\n\nexport function exportToCanvas(\n  elements: readonly ExcalidrawElement[],\n  appState: AppState,\n  {\n    exportBackground,\n    exportPadding = 10,\n    viewBackgroundColor,\n    scale = 1,\n  }: {\n    exportBackground: boolean;\n    exportPadding?: number;\n    scale?: number;\n    viewBackgroundColor: string;\n  },\n  createCanvas: (width: number, height: number) => any = function(\n    width,\n    height,\n  ) {\n    const tempCanvas = document.createElement(\"canvas\");\n    tempCanvas.width = width * scale;\n    tempCanvas.height = height * scale;\n    return tempCanvas;\n  },\n) {\n  // calculate smallest area to fit the contents in\n  const [minX, minY, maxX, maxY] = getCommonBounds(elements);\n  const width = distance(minX, maxX) + exportPadding * 2;\n  const height = distance(minY, maxY) + exportPadding * 2;\n\n  const tempCanvas: any = createCanvas(width, height);\n  tempCanvas.getContext(\"2d\")?.scale(scale, scale);\n\n  renderScene(\n    elements,\n    appState,\n    null,\n    rough.canvas(tempCanvas),\n    tempCanvas,\n    {\n      viewBackgroundColor: exportBackground ? viewBackgroundColor : null,\n      scrollX: normalizeScroll(-minX + exportPadding),\n      scrollY: normalizeScroll(-minY + exportPadding),\n      zoom: 1,\n      remotePointerViewportCoords: {},\n    },\n    {\n      renderScrollbars: false,\n      renderSelection: false,\n      renderOptimizations: false,\n    },\n  );\n  return tempCanvas;\n}\n\nexport function exportToSvg(\n  elements: readonly ExcalidrawElement[],\n  {\n    exportBackground,\n    exportPadding = 10,\n    viewBackgroundColor,\n  }: {\n    exportBackground: boolean;\n    exportPadding?: number;\n    viewBackgroundColor: string;\n  },\n): SVGSVGElement {\n  // calculate canvas dimensions\n  const [minX, minY, maxX, maxY] = getCommonBounds(elements);\n  const width = distance(minX, maxX) + exportPadding * 2;\n  const height = distance(minY, maxY) + exportPadding * 2;\n\n  // initialze SVG root\n  const svgRoot = document.createElementNS(SVG_NS, \"svg\");\n  svgRoot.setAttribute(\"version\", \"1.1\");\n  svgRoot.setAttribute(\"xmlns\", SVG_NS);\n  svgRoot.setAttribute(\"viewBox\", `0 0 ${width} ${height}`);\n\n  svgRoot.innerHTML = `\n  <defs>\n    <style>\n      @font-face {\n        font-family: \"Virgil\";\n        src: url(\"https://excalidraw.com/FG_Virgil.ttf\");\n      }\n      @font-face {\n        font-family: \"Cascadia\";\n        src: url(\"https://excalidraw.com/Cascadia.ttf\");\n      }\n    </style>\n  </defs>\n  `;\n\n  // render backgroiund rect\n  if (exportBackground && viewBackgroundColor) {\n    const rect = svgRoot.ownerDocument!.createElementNS(SVG_NS, \"rect\");\n    rect.setAttribute(\"x\", \"0\");\n    rect.setAttribute(\"y\", \"0\");\n    rect.setAttribute(\"width\", `${width}`);\n    rect.setAttribute(\"height\", `${height}`);\n    rect.setAttribute(\"fill\", viewBackgroundColor);\n    svgRoot.appendChild(rect);\n  }\n\n  const rsvg = rough.svg(svgRoot);\n  renderSceneToSvg(elements, rsvg, svgRoot, {\n    offsetX: -minX + exportPadding,\n    offsetY: -minY + exportPadding,\n  });\n  return svgRoot;\n}\n"]},"metadata":{},"sourceType":"module"}