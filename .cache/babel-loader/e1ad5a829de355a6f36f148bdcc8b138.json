{"ast":null,"code":"import _regeneratorRuntime from \"/home/pro/Solutions/drawboard-light/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/pro/Solutions/drawboard-light/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { cleanAppStateForExport } from \"../appState\";\nimport { fileOpen, fileSave } from \"browser-nativefs\";\nimport { loadFromBlob } from \"./blob\";\nexport function serializeAsJSON(elements, appState) {\n  return JSON.stringify({\n    type: \"excalidraw\",\n    version: 1,\n    source: window.location.origin,\n    elements: elements,\n    appState: cleanAppStateForExport(appState)\n  }, null, 2);\n}\nexport function saveAsJSON(_x, _x2) {\n  return _saveAsJSON.apply(this, arguments);\n}\n\nfunction _saveAsJSON() {\n  _saveAsJSON = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(elements, appState) {\n    var serialized, name;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            serialized = serializeAsJSON(elements, appState);\n            name = \"\".concat(appState.name, \".excalidraw\");\n            _context.next = 4;\n            return fileSave(new Blob([serialized], {\n              type: \"application/json\"\n            }), {\n              fileName: name,\n              description: \"Excalidraw file\"\n            }, window.handle);\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _saveAsJSON.apply(this, arguments);\n}\n\nexport function loadFromJSON() {\n  return _loadFromJSON.apply(this, arguments);\n}\n\nfunction _loadFromJSON() {\n  _loadFromJSON = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2() {\n    var blob;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return fileOpen({\n              description: \"Excalidraw files\",\n              extensions: [\"json\", \"excalidraw\"],\n              mimeTypes: [\"application/json\"]\n            });\n\n          case 2:\n            blob = _context2.sent;\n            return _context2.abrupt(\"return\", loadFromBlob(blob));\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _loadFromJSON.apply(this, arguments);\n}","map":{"version":3,"sources":["/home/pro/Solutions/drawboard-light/src/data/json.ts"],"names":["cleanAppStateForExport","fileOpen","fileSave","loadFromBlob","serializeAsJSON","elements","appState","JSON","stringify","type","version","source","window","location","origin","saveAsJSON","serialized","name","Blob","fileName","description","handle","loadFromJSON","extensions","mimeTypes","blob"],"mappings":";;AAEA,SAASA,sBAAT,QAAuC,aAAvC;AAEA,SAASC,QAAT,EAAmBC,QAAnB,QAAmC,kBAAnC;AACA,SAASC,YAAT,QAA6B,QAA7B;AAEA,OAAO,SAASC,eAAT,CACLC,QADK,EAELC,QAFK,EAGG;AACR,SAAOC,IAAI,CAACC,SAAL,CACL;AACEC,IAAAA,IAAI,EAAE,YADR;AAEEC,IAAAA,OAAO,EAAE,CAFX;AAGEC,IAAAA,MAAM,EAAEC,MAAM,CAACC,QAAP,CAAgBC,MAH1B;AAIET,IAAAA,QAAQ,EAARA,QAJF;AAKEC,IAAAA,QAAQ,EAAEN,sBAAsB,CAACM,QAAD;AALlC,GADK,EAQL,IARK,EASL,CATK,CAAP;AAWD;AAED,gBAAsBS,UAAtB;AAAA;AAAA;;;;;2BAAO,iBACLV,QADK,EAELC,QAFK;AAAA;AAAA;AAAA;AAAA;AAAA;AAICU,YAAAA,UAJD,GAIcZ,eAAe,CAACC,QAAD,EAAWC,QAAX,CAJ7B;AAMCW,YAAAA,IAND,aAMWX,QAAQ,CAACW,IANpB;AAAA;AAAA,mBAOCf,QAAQ,CACZ,IAAIgB,IAAJ,CAAS,CAACF,UAAD,CAAT,EAAuB;AAAEP,cAAAA,IAAI,EAAE;AAAR,aAAvB,CADY,EAEZ;AACEU,cAAAA,QAAQ,EAAEF,IADZ;AAEEG,cAAAA,WAAW,EAAE;AAFf,aAFY,EAMXR,MAAD,CAAgBS,MANJ,CAPT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAgBP,gBAAsBC,YAAtB;AAAA;AAAA;;;;;2BAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACcrB,QAAQ,CAAC;AAC1BmB,cAAAA,WAAW,EAAE,kBADa;AAE1BG,cAAAA,UAAU,EAAE,CAAC,MAAD,EAAS,YAAT,CAFc;AAG1BC,cAAAA,SAAS,EAAE,CAAC,kBAAD;AAHe,aAAD,CADtB;;AAAA;AACCC,YAAAA,IADD;AAAA,8CAMEtB,YAAY,CAACsB,IAAD,CANd;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import { ExcalidrawElement } from \"../element/types\";\nimport { AppState } from \"../types\";\nimport { cleanAppStateForExport } from \"../appState\";\n\nimport { fileOpen, fileSave } from \"browser-nativefs\";\nimport { loadFromBlob } from \"./blob\";\n\nexport function serializeAsJSON(\n  elements: readonly ExcalidrawElement[],\n  appState: AppState,\n): string {\n  return JSON.stringify(\n    {\n      type: \"excalidraw\",\n      version: 1,\n      source: window.location.origin,\n      elements,\n      appState: cleanAppStateForExport(appState),\n    },\n    null,\n    2,\n  );\n}\n\nexport async function saveAsJSON(\n  elements: readonly ExcalidrawElement[],\n  appState: AppState,\n) {\n  const serialized = serializeAsJSON(elements, appState);\n\n  const name = `${appState.name}.excalidraw`;\n  await fileSave(\n    new Blob([serialized], { type: \"application/json\" }),\n    {\n      fileName: name,\n      description: \"Excalidraw file\",\n    },\n    (window as any).handle,\n  );\n}\nexport async function loadFromJSON() {\n  const blob = await fileOpen({\n    description: \"Excalidraw files\",\n    extensions: [\"json\", \"excalidraw\"],\n    mimeTypes: [\"application/json\"],\n  });\n  return loadFromBlob(blob);\n}\n"]},"metadata":{},"sourceType":"module"}