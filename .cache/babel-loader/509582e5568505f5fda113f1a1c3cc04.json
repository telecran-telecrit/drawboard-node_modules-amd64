{"ast":null,"code":"import { getElementAbsoluteCoords, hitTest } from \"../element\";\nexport const hasBackground = type => type === \"rectangle\" || type === \"ellipse\" || type === \"diamond\" || type === \"line\";\nexport const hasStroke = type => type === \"rectangle\" || type === \"ellipse\" || type === \"diamond\" || type === \"arrow\" || type === \"line\";\nexport const hasText = type => type === \"text\";\nexport function getElementAtPosition(elements, appState, x, y, zoom) {\n  let hitElement = null; // We need to to hit testing from front (end of the array) to back (beginning of the array)\n\n  for (let i = elements.length - 1; i >= 0; --i) {\n    if (elements[i].isDeleted) {\n      continue;\n    }\n\n    if (hitTest(elements[i], appState, x, y, zoom)) {\n      hitElement = elements[i];\n      break;\n    }\n  }\n\n  return hitElement;\n}\nexport function getElementContainingPosition(elements, x, y) {\n  let hitElement = null; // We need to to hit testing from front (end of the array) to back (beginning of the array)\n\n  for (let i = elements.length - 1; i >= 0; --i) {\n    if (elements[i].isDeleted) {\n      continue;\n    }\n\n    const [x1, y1, x2, y2] = getElementAbsoluteCoords(elements[i]);\n\n    if (x1 < x && x < x2 && y1 < y && y < y2) {\n      hitElement = elements[i];\n      break;\n    }\n  }\n\n  return hitElement;\n}","map":{"version":3,"sources":["/home/pro/Solutions/drawboard-light/src/scene/comparisons.ts"],"names":["getElementAbsoluteCoords","hitTest","hasBackground","type","hasStroke","hasText","getElementAtPosition","elements","appState","x","y","zoom","hitElement","i","length","isDeleted","getElementContainingPosition","x1","y1","x2","y2"],"mappings":"AAKA,SAASA,wBAAT,EAAmCC,OAAnC,QAAkD,YAAlD;AAGA,OAAO,MAAMC,aAAa,GAAIC,IAAD,IAC3BA,IAAI,KAAK,WAAT,IACAA,IAAI,KAAK,SADT,IAEAA,IAAI,KAAK,SAFT,IAGAA,IAAI,KAAK,MAJJ;AAMP,OAAO,MAAMC,SAAS,GAAID,IAAD,IACvBA,IAAI,KAAK,WAAT,IACAA,IAAI,KAAK,SADT,IAEAA,IAAI,KAAK,SAFT,IAGAA,IAAI,KAAK,OAHT,IAIAA,IAAI,KAAK,MALJ;AAOP,OAAO,MAAME,OAAO,GAAIF,IAAD,IAAkBA,IAAI,KAAK,MAA3C;AAEP,OAAO,SAASG,oBAAT,CACLC,QADK,EAELC,QAFK,EAGLC,CAHK,EAILC,CAJK,EAKLC,IALK,EAML;AACA,MAAIC,UAAU,GAAG,IAAjB,CADA,CAEA;;AACA,OAAK,IAAIC,CAAC,GAAGN,QAAQ,CAACO,MAAT,GAAkB,CAA/B,EAAkCD,CAAC,IAAI,CAAvC,EAA0C,EAAEA,CAA5C,EAA+C;AAC7C,QAAIN,QAAQ,CAACM,CAAD,CAAR,CAAYE,SAAhB,EAA2B;AACzB;AACD;;AACD,QAAId,OAAO,CAACM,QAAQ,CAACM,CAAD,CAAT,EAAcL,QAAd,EAAwBC,CAAxB,EAA2BC,CAA3B,EAA8BC,IAA9B,CAAX,EAAgD;AAC9CC,MAAAA,UAAU,GAAGL,QAAQ,CAACM,CAAD,CAArB;AACA;AACD;AACF;;AAED,SAAOD,UAAP;AACD;AAED,OAAO,SAASI,4BAAT,CACLT,QADK,EAELE,CAFK,EAGLC,CAHK,EAIL;AACA,MAAIE,UAAU,GAAG,IAAjB,CADA,CAEA;;AACA,OAAK,IAAIC,CAAC,GAAGN,QAAQ,CAACO,MAAT,GAAkB,CAA/B,EAAkCD,CAAC,IAAI,CAAvC,EAA0C,EAAEA,CAA5C,EAA+C;AAC7C,QAAIN,QAAQ,CAACM,CAAD,CAAR,CAAYE,SAAhB,EAA2B;AACzB;AACD;;AACD,UAAM,CAACE,EAAD,EAAKC,EAAL,EAASC,EAAT,EAAaC,EAAb,IAAmBpB,wBAAwB,CAACO,QAAQ,CAACM,CAAD,CAAT,CAAjD;;AACA,QAAII,EAAE,GAAGR,CAAL,IAAUA,CAAC,GAAGU,EAAd,IAAoBD,EAAE,GAAGR,CAAzB,IAA8BA,CAAC,GAAGU,EAAtC,EAA0C;AACxCR,MAAAA,UAAU,GAAGL,QAAQ,CAACM,CAAD,CAArB;AACA;AACD;AACF;;AACD,SAAOD,UAAP;AACD","sourcesContent":["import {\n  ExcalidrawElement,\n  NonDeletedExcalidrawElement,\n} from \"../element/types\";\n\nimport { getElementAbsoluteCoords, hitTest } from \"../element\";\nimport { AppState } from \"../types\";\n\nexport const hasBackground = (type: string) =>\n  type === \"rectangle\" ||\n  type === \"ellipse\" ||\n  type === \"diamond\" ||\n  type === \"line\";\n\nexport const hasStroke = (type: string) =>\n  type === \"rectangle\" ||\n  type === \"ellipse\" ||\n  type === \"diamond\" ||\n  type === \"arrow\" ||\n  type === \"line\";\n\nexport const hasText = (type: string) => type === \"text\";\n\nexport function getElementAtPosition(\n  elements: readonly NonDeletedExcalidrawElement[],\n  appState: AppState,\n  x: number,\n  y: number,\n  zoom: number,\n) {\n  let hitElement = null;\n  // We need to to hit testing from front (end of the array) to back (beginning of the array)\n  for (let i = elements.length - 1; i >= 0; --i) {\n    if (elements[i].isDeleted) {\n      continue;\n    }\n    if (hitTest(elements[i], appState, x, y, zoom)) {\n      hitElement = elements[i];\n      break;\n    }\n  }\n\n  return hitElement;\n}\n\nexport function getElementContainingPosition(\n  elements: readonly ExcalidrawElement[],\n  x: number,\n  y: number,\n) {\n  let hitElement = null;\n  // We need to to hit testing from front (end of the array) to back (beginning of the array)\n  for (let i = elements.length - 1; i >= 0; --i) {\n    if (elements[i].isDeleted) {\n      continue;\n    }\n    const [x1, y1, x2, y2] = getElementAbsoluteCoords(elements[i]);\n    if (x1 < x && x < x2 && y1 < y && y < y2) {\n      hitElement = elements[i];\n      break;\n    }\n  }\n  return hitElement;\n}\n"]},"metadata":{},"sourceType":"module"}