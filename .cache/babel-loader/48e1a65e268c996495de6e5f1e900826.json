{"ast":null,"code":"import { getDefaultAppState } from \"../appState\";\nimport { restore } from \"./restore\";\nimport { t } from \"../i18n\";\nexport async function loadFromBlob(blob) {\n  const updateAppState = contents => {\n    const defaultAppState = getDefaultAppState();\n    let elements = [];\n    let appState = defaultAppState;\n\n    try {\n      const data = JSON.parse(contents);\n\n      if (data.type !== \"excalidraw\") {\n        throw new Error(t(\"alerts.couldNotLoadInvalidFile\"));\n      }\n\n      elements = data.elements || [];\n      appState = { ...defaultAppState,\n        ...data.appState\n      };\n    } catch {\n      throw new Error(t(\"alerts.couldNotLoadInvalidFile\"));\n    }\n\n    return {\n      elements,\n      appState\n    };\n  };\n\n  if (blob.handle) {\n    window.handle = blob.handle;\n  }\n\n  let contents;\n\n  if (\"text\" in Blob) {\n    contents = await blob.text();\n  } else {\n    contents = await new Promise(resolve => {\n      const reader = new FileReader();\n      reader.readAsText(blob, \"utf8\");\n\n      reader.onloadend = () => {\n        if (reader.readyState === FileReader.DONE) {\n          resolve(reader.result);\n        }\n      };\n    });\n  }\n\n  const {\n    elements,\n    appState\n  } = updateAppState(contents);\n  return restore(elements, appState, {\n    scrollToContent: true\n  });\n}","map":{"version":3,"sources":["/home/pro/Solutions/drawboard-light/src/data/blob.ts"],"names":["getDefaultAppState","restore","t","loadFromBlob","blob","updateAppState","contents","defaultAppState","elements","appState","data","JSON","parse","type","Error","handle","window","Blob","text","Promise","resolve","reader","FileReader","readAsText","onloadend","readyState","DONE","result","scrollToContent"],"mappings":"AAAA,SAASA,kBAAT,QAAmC,aAAnC;AACA,SAASC,OAAT,QAAwB,WAAxB;AACA,SAASC,CAAT,QAAkB,SAAlB;AAEA,OAAO,eAAeC,YAAf,CAA4BC,IAA5B,EAAuC;AAC5C,QAAMC,cAAc,GAAIC,QAAD,IAAsB;AAC3C,UAAMC,eAAe,GAAGP,kBAAkB,EAA1C;AACA,QAAIQ,QAAQ,GAAG,EAAf;AACA,QAAIC,QAAQ,GAAGF,eAAf;;AACA,QAAI;AACF,YAAMG,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWN,QAAX,CAAb;;AACA,UAAII,IAAI,CAACG,IAAL,KAAc,YAAlB,EAAgC;AAC9B,cAAM,IAAIC,KAAJ,CAAUZ,CAAC,CAAC,gCAAD,CAAX,CAAN;AACD;;AACDM,MAAAA,QAAQ,GAAGE,IAAI,CAACF,QAAL,IAAiB,EAA5B;AACAC,MAAAA,QAAQ,GAAG,EAAE,GAAGF,eAAL;AAAsB,WAAGG,IAAI,CAACD;AAA9B,OAAX;AACD,KAPD,CAOE,MAAM;AACN,YAAM,IAAIK,KAAJ,CAAUZ,CAAC,CAAC,gCAAD,CAAX,CAAN;AACD;;AACD,WAAO;AAAEM,MAAAA,QAAF;AAAYC,MAAAA;AAAZ,KAAP;AACD,GAfD;;AAiBA,MAAIL,IAAI,CAACW,MAAT,EAAiB;AACdC,IAAAA,MAAD,CAAgBD,MAAhB,GAAyBX,IAAI,CAACW,MAA9B;AACD;;AACD,MAAIT,QAAJ;;AACA,MAAI,UAAUW,IAAd,EAAoB;AAClBX,IAAAA,QAAQ,GAAG,MAAMF,IAAI,CAACc,IAAL,EAAjB;AACD,GAFD,MAEO;AACLZ,IAAAA,QAAQ,GAAG,MAAM,IAAIa,OAAJ,CAAaC,OAAD,IAAa;AACxC,YAAMC,MAAM,GAAG,IAAIC,UAAJ,EAAf;AACAD,MAAAA,MAAM,CAACE,UAAP,CAAkBnB,IAAlB,EAAwB,MAAxB;;AACAiB,MAAAA,MAAM,CAACG,SAAP,GAAmB,MAAM;AACvB,YAAIH,MAAM,CAACI,UAAP,KAAsBH,UAAU,CAACI,IAArC,EAA2C;AACzCN,UAAAA,OAAO,CAACC,MAAM,CAACM,MAAR,CAAP;AACD;AACF,OAJD;AAKD,KARgB,CAAjB;AASD;;AAED,QAAM;AAAEnB,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,MAAyBJ,cAAc,CAACC,QAAD,CAA7C;AACA,SAAOL,OAAO,CAACO,QAAD,EAAWC,QAAX,EAAqB;AAAEmB,IAAAA,eAAe,EAAE;AAAnB,GAArB,CAAd;AACD","sourcesContent":["import { getDefaultAppState } from \"../appState\";\nimport { restore } from \"./restore\";\nimport { t } from \"../i18n\";\n\nexport async function loadFromBlob(blob: any) {\n  const updateAppState = (contents: string) => {\n    const defaultAppState = getDefaultAppState();\n    let elements = [];\n    let appState = defaultAppState;\n    try {\n      const data = JSON.parse(contents);\n      if (data.type !== \"excalidraw\") {\n        throw new Error(t(\"alerts.couldNotLoadInvalidFile\"));\n      }\n      elements = data.elements || [];\n      appState = { ...defaultAppState, ...data.appState };\n    } catch {\n      throw new Error(t(\"alerts.couldNotLoadInvalidFile\"));\n    }\n    return { elements, appState };\n  };\n\n  if (blob.handle) {\n    (window as any).handle = blob.handle;\n  }\n  let contents;\n  if (\"text\" in Blob) {\n    contents = await blob.text();\n  } else {\n    contents = await new Promise((resolve) => {\n      const reader = new FileReader();\n      reader.readAsText(blob, \"utf8\");\n      reader.onloadend = () => {\n        if (reader.readyState === FileReader.DONE) {\n          resolve(reader.result as string);\n        }\n      };\n    });\n  }\n\n  const { elements, appState } = updateAppState(contents);\n  return restore(elements, appState, { scrollToContent: true });\n}\n"]},"metadata":{},"sourceType":"module"}