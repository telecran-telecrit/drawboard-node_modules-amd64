{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { getGlobalObject, supportsReportingObserver } from '@sentry/utils';\n/** JSDoc */\n\nvar ReportTypes;\n\n(function (ReportTypes) {\n  /** JSDoc */\n  ReportTypes[\"Crash\"] = \"crash\";\n  /** JSDoc */\n\n  ReportTypes[\"Deprecation\"] = \"deprecation\";\n  /** JSDoc */\n\n  ReportTypes[\"Intervention\"] = \"intervention\";\n})(ReportTypes || (ReportTypes = {}));\n/** Reporting API integration - https://w3c.github.io/reporting/ */\n\n\nvar ReportingObserver =\n/** @class */\nfunction () {\n  /**\n   * @inheritDoc\n   */\n  function ReportingObserver(_options) {\n    if (_options === void 0) {\n      _options = {\n        types: [ReportTypes.Crash, ReportTypes.Deprecation, ReportTypes.Intervention]\n      };\n    }\n\n    this._options = _options;\n    /**\n     * @inheritDoc\n     */\n\n    this.name = ReportingObserver.id;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  ReportingObserver.prototype.setupOnce = function (_, getCurrentHub) {\n    // tslint:disable:no-unsafe-any\n    if (!supportsReportingObserver()) {\n      return;\n    }\n\n    this._getCurrentHub = getCurrentHub;\n    var observer = new (getGlobalObject().ReportingObserver)(this.handler.bind(this), {\n      buffered: true,\n      types: this._options.types\n    });\n    observer.observe();\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  ReportingObserver.prototype.handler = function (reports) {\n    var e_1, _a;\n\n    var hub = this._getCurrentHub && this._getCurrentHub();\n\n    if (!hub || !hub.getIntegration(ReportingObserver)) {\n      return;\n    }\n\n    var _loop_1 = function (report) {\n      hub.withScope(function (scope) {\n        scope.setExtra('url', report.url);\n        var label = \"ReportingObserver [\" + report.type + \"]\";\n        var details = 'No details available';\n\n        if (report.body) {\n          // Object.keys doesn't work on ReportBody, as all properties are inheirted\n          var plainBody = {}; // tslint:disable-next-line:forin\n\n          for (var prop in report.body) {\n            plainBody[prop] = report.body[prop];\n          }\n\n          scope.setExtra('body', plainBody);\n\n          if (report.type === ReportTypes.Crash) {\n            var body = report.body; // A fancy way to create a message out of crashId OR reason OR both OR fallback\n\n            details = [body.crashId || '', body.reason || ''].join(' ').trim() || details;\n          } else {\n            var body = report.body;\n            details = body.message || details;\n          }\n        }\n\n        hub.captureMessage(label + \": \" + details);\n      });\n    };\n\n    try {\n      for (var reports_1 = tslib_1.__values(reports), reports_1_1 = reports_1.next(); !reports_1_1.done; reports_1_1 = reports_1.next()) {\n        var report = reports_1_1.value;\n\n        _loop_1(report);\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (reports_1_1 && !reports_1_1.done && (_a = reports_1.return)) _a.call(reports_1);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  ReportingObserver.id = 'ReportingObserver';\n  return ReportingObserver;\n}();\n\nexport { ReportingObserver };","map":{"version":3,"sources":["../src/reportingobserver.ts"],"names":[],"mappings":";AACA,SAAS,eAAT,EAA0B,yBAA1B,QAA2D,eAA3D;AAUA;;AACA,IAAK,WAAL;;AAAA,CAAA,UAAK,WAAL,EAAgB;AACd;AACA,EAAA,WAAA,CAAA,OAAA,CAAA,GAAA,OAAA;AACA;;AACA,EAAA,WAAA,CAAA,aAAA,CAAA,GAAA,aAAA;AACA;;AACA,EAAA,WAAA,CAAA,cAAA,CAAA,GAAA,cAAA;AACD,CAPD,EAAK,WAAW,KAAX,WAAW,GAAA,EAAA,CAAhB;AAwCA;;;AACA,IAAA,iBAAA;AAAA;AAAA,YAAA;AAeE;;;AAGA,WAAA,iBAAA,CACmB,QADnB,EAKG;AAJgB,QAAA,QAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,QAAA,GAAA;AAGf,QAAA,KAAK,EAAE,CAAC,WAAW,CAAC,KAAb,EAAoB,WAAW,CAAC,WAAhC,EAA6C,WAAW,CAAC,YAAzD;AAHQ,OAAA;AAIhB;;AAJgB,SAAA,QAAA,GAAA,QAAA;AAlBnB;;;;AAGgB,SAAA,IAAA,GAAe,iBAAiB,CAAC,EAAjC;AAoBZ;AAEJ;;;;;AAGO,EAAA,iBAAA,CAAA,SAAA,CAAA,SAAA,GAAP,UAAiB,CAAjB,EAAwD,aAAxD,EAAgF;AAC9E;AAEA,QAAI,CAAC,yBAAyB,EAA9B,EAAkC;AAChC;AACD;;AAED,SAAK,cAAL,GAAsB,aAAtB;AAEA,QAAM,QAAQ,GAAG,KAAK,eAAe,EAAhB,CAAyB,iBAA7B,EAA+C,KAAK,OAAL,CAAa,IAAb,CAAkB,IAAlB,CAA/C,EAAwE;AACvF,MAAA,QAAQ,EAAE,IAD6E;AAEvF,MAAA,KAAK,EAAE,KAAK,QAAL,CAAc;AAFkE,KAAxE,CAAjB;AAKA,IAAA,QAAQ,CAAC,OAAT;AACD,GAfM;AAiBP;;;;;AAGO,EAAA,iBAAA,CAAA,SAAA,CAAA,OAAA,GAAP,UAAe,OAAf,EAAgC;;;AAC9B,QAAM,GAAG,GAAG,KAAK,cAAL,IAAuB,KAAK,cAAL,EAAnC;;AACA,QAAI,CAAC,GAAD,IAAQ,CAAC,GAAG,CAAC,cAAJ,CAAmB,iBAAnB,CAAb,EAAoD;AAClD;AACD;;4BACU,M,EAAM;AACf,MAAA,GAAG,CAAC,SAAJ,CAAc,UAAA,KAAA,EAAK;AACjB,QAAA,KAAK,CAAC,QAAN,CAAe,KAAf,EAAsB,MAAM,CAAC,GAA7B;AAEA,YAAM,KAAK,GAAG,wBAAsB,MAAM,CAAC,IAA7B,GAAiC,GAA/C;AACA,YAAI,OAAO,GAAG,sBAAd;;AAEA,YAAI,MAAM,CAAC,IAAX,EAAiB;AACf;AACA,cAAM,SAAS,GAEX,EAFJ,CAFe,CAMf;;AACA,eAAK,IAAM,IAAX,IAAmB,MAAM,CAAC,IAA1B,EAAgC;AAC9B,YAAA,SAAS,CAAC,IAAD,CAAT,GAAkB,MAAM,CAAC,IAAP,CAAY,IAAZ,CAAlB;AACD;;AAED,UAAA,KAAK,CAAC,QAAN,CAAe,MAAf,EAAuB,SAAvB;;AAEA,cAAI,MAAM,CAAC,IAAP,KAAgB,WAAW,CAAC,KAAhC,EAAuC;AACrC,gBAAM,IAAI,GAAG,MAAM,CAAC,IAApB,CADqC,CAErC;;AACA,YAAA,OAAO,GAAG,CAAC,IAAI,CAAC,OAAL,IAAgB,EAAjB,EAAqB,IAAI,CAAC,MAAL,IAAe,EAApC,EAAwC,IAAxC,CAA6C,GAA7C,EAAkD,IAAlD,MAA4D,OAAtE;AACD,WAJD,MAIO;AACL,gBAAM,IAAI,GAAG,MAAM,CAAC,IAApB;AACA,YAAA,OAAO,GAAG,IAAI,CAAC,OAAL,IAAgB,OAA1B;AACD;AACF;;AAED,QAAA,GAAG,CAAC,cAAJ,CAAsB,KAAK,GAAA,IAAL,GAAU,OAAhC;AACD,OA9BD;;;;AADF,WAAqB,IAAA,SAAA,GAAA,OAAA,CAAA,QAAA,CAAA,OAAA,CAAA,EAAO,WAAA,GAAA,SAAA,CAAA,IAAA,EAA5B,EAA4B,CAAA,WAAA,CAAA,IAA5B,EAA4B,WAAA,GAAA,SAAA,CAAA,IAAA,EAA5B,EAA4B;AAAvB,YAAM,MAAM,GAAA,WAAA,CAAA,KAAZ;;gBAAM,M;AAgCV;;;;;;;;;;;;AACF,GAtCM;AA5CP;;;;;AAGc,EAAA,iBAAA,CAAA,EAAA,GAAa,mBAAb;AAgFhB,SAAA,iBAAA;AAAC,CAxFD,EAAA;;SAAa,iB","sourcesContent":["import { EventProcessor, Hub, Integration } from '@sentry/types';\nimport { getGlobalObject, supportsReportingObserver } from '@sentry/utils';\n\n/** JSDoc */\ninterface Report {\n  [key: string]: any;\n  type: ReportTypes;\n  url: string;\n  body?: ReportBody;\n}\n\n/** JSDoc */\nenum ReportTypes {\n  /** JSDoc */\n  Crash = 'crash',\n  /** JSDoc */\n  Deprecation = 'deprecation',\n  /** JSDoc */\n  Intervention = 'intervention',\n}\n\n/** JSDoc */\ntype ReportBody = CrashReportBody | DeprecationReportBody | InterventionReportBody;\n\n/** JSDoc */\ninterface CrashReportBody {\n  [key: string]: any;\n  crashId: string;\n  reason?: string;\n}\n\n/** JSDoc */\ninterface DeprecationReportBody {\n  [key: string]: any;\n  id: string;\n  anticipatedRemoval?: Date;\n  message: string;\n  sourceFile?: string;\n  lineNumber?: number;\n  columnNumber?: number;\n}\n\n/** JSDoc */\ninterface InterventionReportBody {\n  [key: string]: any;\n  id: string;\n  message: string;\n  sourceFile?: string;\n  lineNumber?: number;\n  columnNumber?: number;\n}\n\n/** Reporting API integration - https://w3c.github.io/reporting/ */\nexport class ReportingObserver implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public readonly name: string = ReportingObserver.id;\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'ReportingObserver';\n\n  /**\n   * Returns current hub.\n   */\n  private _getCurrentHub?: () => Hub;\n\n  /**\n   * @inheritDoc\n   */\n  public constructor(\n    private readonly _options: {\n      types?: ReportTypes[];\n    } = {\n      types: [ReportTypes.Crash, ReportTypes.Deprecation, ReportTypes.Intervention],\n    },\n  ) {}\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(_: (callback: EventProcessor) => void, getCurrentHub: () => Hub): void {\n    // tslint:disable:no-unsafe-any\n\n    if (!supportsReportingObserver()) {\n      return;\n    }\n\n    this._getCurrentHub = getCurrentHub;\n\n    const observer = new (getGlobalObject<any>()).ReportingObserver(this.handler.bind(this), {\n      buffered: true,\n      types: this._options.types,\n    });\n\n    observer.observe();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public handler(reports: Report[]): void {\n    const hub = this._getCurrentHub && this._getCurrentHub();\n    if (!hub || !hub.getIntegration(ReportingObserver)) {\n      return;\n    }\n    for (const report of reports) {\n      hub.withScope(scope => {\n        scope.setExtra('url', report.url);\n\n        const label = `ReportingObserver [${report.type}]`;\n        let details = 'No details available';\n\n        if (report.body) {\n          // Object.keys doesn't work on ReportBody, as all properties are inheirted\n          const plainBody: {\n            [key: string]: any;\n          } = {};\n\n          // tslint:disable-next-line:forin\n          for (const prop in report.body) {\n            plainBody[prop] = report.body[prop];\n          }\n\n          scope.setExtra('body', plainBody);\n\n          if (report.type === ReportTypes.Crash) {\n            const body = report.body as CrashReportBody;\n            // A fancy way to create a message out of crashId OR reason OR both OR fallback\n            details = [body.crashId || '', body.reason || ''].join(' ').trim() || details;\n          } else {\n            const body = report.body as DeprecationReportBody | InterventionReportBody;\n            details = body.message || details;\n          }\n        }\n\n        hub.captureMessage(`${label}: ${details}`);\n      });\n    }\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}