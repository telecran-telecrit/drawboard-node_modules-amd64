{"ast":null,"code":"import * as tslib_1 from \"tslib\";\n/** This function adds duration since Sentry was initialized till the time event was sent */\n\nvar SessionTiming =\n/** @class */\nfunction () {\n  function SessionTiming() {\n    /**\n     * @inheritDoc\n     */\n    this.name = SessionTiming.id;\n    /** Exact time Client was initialized expressed in milliseconds since Unix Epoch. */\n\n    this._startTime = Date.now();\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  SessionTiming.prototype.setupOnce = function (addGlobalEventProcessor, getCurrentHub) {\n    addGlobalEventProcessor(function (event) {\n      var self = getCurrentHub().getIntegration(SessionTiming);\n\n      if (self) {\n        return self.process(event);\n      }\n\n      return event;\n    });\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  SessionTiming.prototype.process = function (event) {\n    var _a;\n\n    var now = Date.now();\n    return tslib_1.__assign({}, event, {\n      extra: tslib_1.__assign({}, event.extra, (_a = {}, _a['session:start'] = this._startTime, _a['session:duration'] = now - this._startTime, _a['session:end'] = now, _a))\n    });\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  SessionTiming.id = 'SessionTiming';\n  return SessionTiming;\n}();\n\nexport { SessionTiming };","map":{"version":3,"sources":["../src/sessiontiming.ts"],"names":[],"mappings":";AAEA;;AACA,IAAA,aAAA;AAAA;AAAA,YAAA;AAAA,WAAA,aAAA,GAAA;AACE;;;AAGO,SAAA,IAAA,GAAe,aAAa,CAAC,EAA7B;AAMP;;AACmB,SAAA,UAAA,GAAqB,IAAI,CAAC,GAAL,EAArB;AA+BpB;AA7BC;;;;;AAGO,EAAA,aAAA,CAAA,SAAA,CAAA,SAAA,GAAP,UAAiB,uBAAjB,EAA8E,aAA9E,EAAsG;AACpG,IAAA,uBAAuB,CAAC,UAAA,KAAA,EAAK;AAC3B,UAAM,IAAI,GAAG,aAAa,GAAG,cAAhB,CAA+B,aAA/B,CAAb;;AACA,UAAI,IAAJ,EAAU;AACR,eAAO,IAAI,CAAC,OAAL,CAAa,KAAb,CAAP;AACD;;AACD,aAAO,KAAP;AACD,KANsB,CAAvB;AAOD,GARM;AAUP;;;;;AAGO,EAAA,aAAA,CAAA,SAAA,CAAA,OAAA,GAAP,UAAe,KAAf,EAA2B;;;AACzB,QAAM,GAAG,GAAG,IAAI,CAAC,GAAL,EAAZ;AAEA,WAAA,OAAA,CAAA,QAAA,CAAA,EAAA,EACK,KADL,EACU;AACR,MAAA,KAAK,EAAA,OAAA,CAAA,QAAA,CAAA,EAAA,EACA,KAAK,CAAC,KADN,GACW,EAAA,GAAA,EAAA,EAAA,EAAA,CACb,eADa,CAAA,GACK,KAAK,UADV,EACoB,EAAA,CACjC,kBADiC,CAAA,GACZ,GAAG,GAAG,KAAK,UAFnB,EAE6B,EAAA,CAC1C,aAD0C,CAAA,GAC1B,GAHH,EAGM,EAJjB;AADG,KADV,CAAA;AASD,GAZM;AAxBP;;;;;AAGc,EAAA,aAAA,CAAA,EAAA,GAAa,eAAb;AAkChB,SAAA,aAAA;AAAC,CA1CD,EAAA;;SAAa,a","sourcesContent":["import { Event, EventProcessor, Hub, Integration } from '@sentry/types';\n\n/** This function adds duration since Sentry was initialized till the time event was sent */\nexport class SessionTiming implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public name: string = SessionTiming.id;\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'SessionTiming';\n\n  /** Exact time Client was initialized expressed in milliseconds since Unix Epoch. */\n  protected readonly _startTime: number = Date.now();\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(addGlobalEventProcessor: (callback: EventProcessor) => void, getCurrentHub: () => Hub): void {\n    addGlobalEventProcessor(event => {\n      const self = getCurrentHub().getIntegration(SessionTiming);\n      if (self) {\n        return self.process(event);\n      }\n      return event;\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public process(event: Event): Event {\n    const now = Date.now();\n\n    return {\n      ...event,\n      extra: {\n        ...event.extra,\n        ['session:start']: this._startTime,\n        ['session:duration']: now - this._startTime,\n        ['session:end']: now,\n      },\n    };\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}