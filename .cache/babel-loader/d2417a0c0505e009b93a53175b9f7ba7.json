{"ast":null,"code":"var _jsxFileName = \"/home/pro/Solutions/drawboard-light/src/actions/actionFinalize.tsx\";\nimport { KEYS } from \"../keys\";\nimport { isInvisiblySmallElement } from \"../element\";\nimport { resetCursor } from \"../utils\";\nimport React from \"react\";\nimport { ToolButton } from \"../components/ToolButton\";\nimport { done } from \"../components/icons\";\nimport { t } from \"../i18n\";\nimport { register } from \"./register\";\nimport { mutateElement } from \"../element/mutateElement\";\nimport { isPathALoop } from \"../math\";\nexport const actionFinalize = register({\n  name: \"finalize\",\n  perform: (elements, appState) => {\n    let newElements = elements;\n\n    if (window.document.activeElement instanceof HTMLElement) {\n      window.document.activeElement.blur();\n    }\n\n    if (appState.multiElement) {\n      // pen and mouse have hover\n      if (appState.lastPointerDownWith !== \"touch\") {\n        const {\n          points,\n          lastCommittedPoint\n        } = appState.multiElement;\n\n        if (!lastCommittedPoint || points[points.length - 1] !== lastCommittedPoint) {\n          mutateElement(appState.multiElement, {\n            points: appState.multiElement.points.slice(0, -1)\n          });\n        }\n      }\n\n      if (isInvisiblySmallElement(appState.multiElement)) {\n        newElements = newElements.slice(0, -1);\n      } // If the multi point line closes the loop,\n      // set the last point to first point.\n      // This ensures that loop remains closed at different scales.\n\n\n      if (appState.multiElement.type === \"line\") {\n        if (isPathALoop(appState.multiElement.points)) {\n          const linePoints = appState.multiElement.points;\n          const firstPoint = linePoints[0];\n          mutateElement(appState.multiElement, {\n            points: linePoints.map((point, i) => i === linePoints.length - 1 ? [firstPoint[0], firstPoint[1]] : point)\n          });\n        }\n      }\n\n      if (!appState.elementLocked) {\n        appState.selectedElementIds[appState.multiElement.id] = true;\n      }\n    }\n\n    if (!appState.elementLocked || !appState.multiElement) {\n      resetCursor();\n    }\n\n    return {\n      elements: newElements,\n      appState: { ...appState,\n        elementType: appState.elementLocked && appState.multiElement ? appState.elementType : \"selection\",\n        draggingElement: null,\n        multiElement: null,\n        editingElement: null,\n        selectedElementIds: {}\n      },\n      commitToHistory: false\n    };\n  },\n  keyTest: (event, appState) => event.key === KEYS.ESCAPE && !appState.draggingElement && appState.multiElement === null || (event.key === KEYS.ESCAPE || event.key === KEYS.ENTER) && appState.multiElement !== null,\n  PanelComponent: ({\n    appState,\n    updateData\n  }) => /*#__PURE__*/React.createElement(ToolButton, {\n    type: \"button\",\n    icon: done,\n    title: t(\"buttons.done\"),\n    \"aria-label\": t(\"buttons.done\"),\n    onClick: updateData,\n    visible: appState.multiElement != null,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 5\n    }\n  })\n});","map":{"version":3,"sources":["/home/pro/Solutions/drawboard-light/src/actions/actionFinalize.tsx"],"names":["KEYS","isInvisiblySmallElement","resetCursor","React","ToolButton","done","t","register","mutateElement","isPathALoop","actionFinalize","name","perform","elements","appState","newElements","window","document","activeElement","HTMLElement","blur","multiElement","lastPointerDownWith","points","lastCommittedPoint","length","slice","type","linePoints","firstPoint","map","point","i","elementLocked","selectedElementIds","id","elementType","draggingElement","editingElement","commitToHistory","keyTest","event","key","ESCAPE","ENTER","PanelComponent","updateData"],"mappings":"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","sourcesContent":["import { KEYS } from \"../keys\";\nimport { isInvisiblySmallElement } from \"../element\";\nimport { resetCursor } from \"../utils\";\nimport React from \"react\";\nimport { ToolButton } from \"../components/ToolButton\";\nimport { done } from \"../components/icons\";\nimport { t } from \"../i18n\";\nimport { register } from \"./register\";\nimport { mutateElement } from \"../element/mutateElement\";\nimport { isPathALoop } from \"../math\";\n\nexport const actionFinalize = register({\n  name: \"finalize\",\n  perform: (elements, appState) => {\n    let newElements = elements;\n    if (window.document.activeElement instanceof HTMLElement) {\n      window.document.activeElement.blur();\n    }\n    if (appState.multiElement) {\n      // pen and mouse have hover\n      if (appState.lastPointerDownWith !== \"touch\") {\n        const { points, lastCommittedPoint } = appState.multiElement;\n        if (\n          !lastCommittedPoint ||\n          points[points.length - 1] !== lastCommittedPoint\n        ) {\n          mutateElement(appState.multiElement, {\n            points: appState.multiElement.points.slice(0, -1),\n          });\n        }\n      }\n      if (isInvisiblySmallElement(appState.multiElement)) {\n        newElements = newElements.slice(0, -1);\n      }\n\n      // If the multi point line closes the loop,\n      // set the last point to first point.\n      // This ensures that loop remains closed at different scales.\n      if (appState.multiElement.type === \"line\") {\n        if (isPathALoop(appState.multiElement.points)) {\n          const linePoints = appState.multiElement.points;\n          const firstPoint = linePoints[0];\n          mutateElement(appState.multiElement, {\n            points: linePoints.map((point, i) =>\n              i === linePoints.length - 1\n                ? ([firstPoint[0], firstPoint[1]] as const)\n                : point,\n            ),\n          });\n        }\n      }\n\n      if (!appState.elementLocked) {\n        appState.selectedElementIds[appState.multiElement.id] = true;\n      }\n    }\n    if (!appState.elementLocked || !appState.multiElement) {\n      resetCursor();\n    }\n    return {\n      elements: newElements,\n      appState: {\n        ...appState,\n        elementType:\n          appState.elementLocked && appState.multiElement\n            ? appState.elementType\n            : \"selection\",\n        draggingElement: null,\n        multiElement: null,\n        editingElement: null,\n        selectedElementIds: {},\n      },\n      commitToHistory: false,\n    };\n  },\n  keyTest: (event, appState) =>\n    (event.key === KEYS.ESCAPE &&\n      !appState.draggingElement &&\n      appState.multiElement === null) ||\n    ((event.key === KEYS.ESCAPE || event.key === KEYS.ENTER) &&\n      appState.multiElement !== null),\n  PanelComponent: ({ appState, updateData }) => (\n    <ToolButton\n      type=\"button\"\n      icon={done}\n      title={t(\"buttons.done\")}\n      aria-label={t(\"buttons.done\")}\n      onClick={updateData}\n      visible={appState.multiElement != null}\n    />\n  ),\n});\n"]},"metadata":{},"sourceType":"module"}