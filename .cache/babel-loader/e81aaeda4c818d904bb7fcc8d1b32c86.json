{"ast":null,"code":"import _slicedToArray from \"/home/pro/Solutions/drawboard-light/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/pro/Solutions/drawboard-light/src/components/ExportDialog.tsx\";\nimport \"./ExportDialog.css\";\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { Modal } from \"./Modal\";\nimport { ToolButton } from \"./ToolButton\";\nimport { clipboard, exportFile, link } from \"./icons\";\nimport { Island } from \"./Island\";\nimport { exportToCanvas } from \"../scene/export\";\nimport Stack from \"./Stack\";\nimport { t } from \"../i18n\";\nimport { KEYS } from \"../keys\";\nimport { probablySupportsClipboardBlob } from \"../clipboard\";\nimport { getSelectedElements, isSomeElementSelected } from \"../scene\";\nimport useIsMobile from \"../is-mobile\";\nvar scales = [1, 2, 3];\nvar defaultScale = scales.includes(devicePixelRatio) ? devicePixelRatio : 1;\n\nfunction ExportModal(_ref) {\n  var elements = _ref.elements,\n      appState = _ref.appState,\n      _ref$exportPadding = _ref.exportPadding,\n      exportPadding = _ref$exportPadding === void 0 ? 10 : _ref$exportPadding,\n      actionManager = _ref.actionManager,\n      onExportToPng = _ref.onExportToPng,\n      onExportToSvg = _ref.onExportToSvg,\n      onExportToClipboard = _ref.onExportToClipboard,\n      onExportToBackend = _ref.onExportToBackend,\n      onCloseRequest = _ref.onCloseRequest;\n  var someElementIsSelected = isSomeElementSelected(elements, appState);\n\n  var _useState = useState(defaultScale),\n      _useState2 = _slicedToArray(_useState, 2),\n      scale = _useState2[0],\n      setScale = _useState2[1];\n\n  var _useState3 = useState(someElementIsSelected),\n      _useState4 = _slicedToArray(_useState3, 2),\n      exportSelected = _useState4[0],\n      setExportSelected = _useState4[1];\n\n  var previewRef = useRef(null);\n  var exportBackground = appState.exportBackground,\n      viewBackgroundColor = appState.viewBackgroundColor;\n  var pngButton = useRef(null);\n  var closeButton = useRef(null);\n  var onlySelectedInput = useRef(null);\n  var exportedElements = exportSelected ? getSelectedElements(elements, appState) : elements;\n  useEffect(function () {\n    setExportSelected(someElementIsSelected);\n  }, [someElementIsSelected]);\n  useEffect(function () {\n    var previewNode = previewRef.current;\n    var canvas = exportToCanvas(exportedElements, appState, {\n      exportBackground: exportBackground,\n      viewBackgroundColor: viewBackgroundColor,\n      exportPadding: exportPadding,\n      scale: scale\n    });\n    previewNode === null || previewNode === void 0 ? void 0 : previewNode.appendChild(canvas);\n    return function () {\n      previewNode === null || previewNode === void 0 ? void 0 : previewNode.removeChild(canvas);\n    };\n  }, [appState, exportedElements, exportBackground, exportPadding, viewBackgroundColor, scale]);\n  useEffect(function () {\n    var _pngButton$current;\n\n    (_pngButton$current = pngButton.current) === null || _pngButton$current === void 0 ? void 0 : _pngButton$current.focus();\n  }, []);\n\n  function handleKeyDown(event) {\n    if (event.key === KEYS.TAB) {\n      var _document = document,\n          activeElement = _document.activeElement;\n\n      if (event.shiftKey) {\n        if (activeElement === pngButton.current) {\n          var _closeButton$current;\n\n          (_closeButton$current = closeButton.current) === null || _closeButton$current === void 0 ? void 0 : _closeButton$current.focus();\n          event.preventDefault();\n        }\n      } else {\n        if (activeElement === closeButton.current) {\n          var _pngButton$current2;\n\n          (_pngButton$current2 = pngButton.current) === null || _pngButton$current2 === void 0 ? void 0 : _pngButton$current2.focus();\n          event.preventDefault();\n        }\n\n        if (activeElement === onlySelectedInput.current) {\n          var _closeButton$current2;\n\n          (_closeButton$current2 = closeButton.current) === null || _closeButton$current2 === void 0 ? void 0 : _closeButton$current2.focus();\n          event.preventDefault();\n        }\n      }\n    }\n  }\n\n  return React.createElement(\"div\", {\n    className: \"ExportDialog__dialog\",\n    onKeyDown: handleKeyDown,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  }, React.createElement(Island, {\n    padding: 4,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    className: \"ExportDialog__close\",\n    onClick: onCloseRequest,\n    \"aria-label\": t(\"buttons.close\"),\n    ref: closeButton,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  }, \"\\u2573\"), React.createElement(\"h2\", {\n    id: \"export-title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125\n    },\n    __self: this\n  }, t(\"buttons.export\")), React.createElement(\"div\", {\n    className: \"ExportDialog__preview\",\n    ref: previewRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"ExportDialog__actions\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127\n    },\n    __self: this\n  }, React.createElement(Stack.Col, {\n    gap: 1,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128\n    },\n    __self: this\n  }, React.createElement(Stack.Row, {\n    gap: 2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129\n    },\n    __self: this\n  }, React.createElement(ToolButton, {\n    type: \"button\",\n    label: \"PNG\",\n    title: t(\"buttons.exportToPng\"),\n    \"aria-label\": t(\"buttons.exportToPng\"),\n    onClick: function onClick() {\n      return onExportToPng(exportedElements, scale);\n    },\n    ref: pngButton,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130\n    },\n    __self: this\n  }), React.createElement(ToolButton, {\n    type: \"button\",\n    label: \"SVG\",\n    title: t(\"buttons.exportToSvg\"),\n    \"aria-label\": t(\"buttons.exportToSvg\"),\n    onClick: function onClick() {\n      return onExportToSvg(exportedElements, scale);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138\n    },\n    __self: this\n  }), probablySupportsClipboardBlob && React.createElement(ToolButton, {\n    type: \"button\",\n    icon: clipboard,\n    title: t(\"buttons.copyToClipboard\"),\n    \"aria-label\": t(\"buttons.copyToClipboard\"),\n    onClick: function onClick() {\n      return onExportToClipboard(exportedElements, scale);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146\n    },\n    __self: this\n  }), React.createElement(ToolButton, {\n    type: \"button\",\n    icon: link,\n    title: t(\"buttons.getShareableLink\"),\n    \"aria-label\": t(\"buttons.getShareableLink\"),\n    onClick: function onClick() {\n      return onExportToBackend(exportedElements);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154\n    },\n    __self: this\n  }))), actionManager.renderAction(\"changeProjectName\"), React.createElement(Stack.Col, {\n    gap: 1,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"ExportDialog__scales\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166\n    },\n    __self: this\n  }, React.createElement(Stack.Row, {\n    gap: 2,\n    align: \"baseline\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167\n    },\n    __self: this\n  }, scales.map(function (s) {\n    return React.createElement(ToolButton, {\n      key: s,\n      size: \"s\",\n      type: \"radio\",\n      icon: \"x\".concat(s),\n      name: \"export-canvas-scale\",\n      \"aria-label\": \"Scale \".concat(s, \" x\"),\n      id: \"export-canvas-scale\",\n      checked: s === scale,\n      onChange: function onChange() {\n        return setScale(s);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    });\n  }))), actionManager.renderAction(\"changeExportBackground\"), someElementIsSelected && React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"checkbox\",\n    checked: exportSelected,\n    onChange: function onChange(event) {\n      return setExportSelected(event.currentTarget.checked);\n    },\n    ref: onlySelectedInput,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187\n    },\n    __self: this\n  }), \" \", t(\"labels.onlySelected\")))))));\n}\n\nexport function ExportDialog(_ref2) {\n  var elements = _ref2.elements,\n      appState = _ref2.appState,\n      _ref2$exportPadding = _ref2.exportPadding,\n      exportPadding = _ref2$exportPadding === void 0 ? 10 : _ref2$exportPadding,\n      actionManager = _ref2.actionManager,\n      onExportToPng = _ref2.onExportToPng,\n      onExportToSvg = _ref2.onExportToSvg,\n      onExportToClipboard = _ref2.onExportToClipboard,\n      onExportToBackend = _ref2.onExportToBackend;\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      modalIsShown = _useState6[0],\n      setModalIsShown = _useState6[1];\n\n  var triggerButton = useRef(null);\n  var handleClose = React.useCallback(function () {\n    var _triggerButton$curren;\n\n    setModalIsShown(false);\n    (_triggerButton$curren = triggerButton.current) === null || _triggerButton$curren === void 0 ? void 0 : _triggerButton$curren.focus();\n  }, []);\n  return React.createElement(React.Fragment, null, React.createElement(ToolButton, {\n    onClick: function onClick() {\n      return setModalIsShown(true);\n    },\n    icon: exportFile,\n    type: \"button\",\n    \"aria-label\": t(\"buttons.export\"),\n    showAriaLabel: useIsMobile(),\n    title: t(\"buttons.export\"),\n    ref: triggerButton,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 235\n    },\n    __self: this\n  }), modalIsShown && React.createElement(Modal, {\n    maxWidth: 800,\n    onCloseRequest: handleClose,\n    labelledBy: \"export-title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 245\n    },\n    __self: this\n  }, React.createElement(ExportModal, {\n    elements: elements,\n    appState: appState,\n    exportPadding: exportPadding,\n    actionManager: actionManager,\n    onExportToPng: onExportToPng,\n    onExportToSvg: onExportToSvg,\n    onExportToClipboard: onExportToClipboard,\n    onExportToBackend: onExportToBackend,\n    onCloseRequest: handleClose,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 250\n    },\n    __self: this\n  })));\n}","map":{"version":3,"sources":["/home/pro/Solutions/drawboard-light/src/components/ExportDialog.tsx"],"names":["React","useState","useEffect","useRef","Modal","ToolButton","clipboard","exportFile","link","Island","exportToCanvas","Stack","t","KEYS","probablySupportsClipboardBlob","getSelectedElements","isSomeElementSelected","useIsMobile","scales","defaultScale","includes","devicePixelRatio","ExportModal","elements","appState","exportPadding","actionManager","onExportToPng","onExportToSvg","onExportToClipboard","onExportToBackend","onCloseRequest","someElementIsSelected","scale","setScale","exportSelected","setExportSelected","previewRef","exportBackground","viewBackgroundColor","pngButton","closeButton","onlySelectedInput","exportedElements","previewNode","current","canvas","appendChild","removeChild","focus","handleKeyDown","event","key","TAB","document","activeElement","shiftKey","preventDefault","renderAction","map","s","currentTarget","checked","ExportDialog","modalIsShown","setModalIsShown","triggerButton","handleClose","useCallback"],"mappings":"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","sourcesContent":["import \"./ExportDialog.css\";\n\nimport React, { useState, useEffect, useRef } from \"react\";\n\nimport { Modal } from \"./Modal\";\nimport { ToolButton } from \"./ToolButton\";\nimport { clipboard, exportFile, link } from \"./icons\";\nimport { Island } from \"./Island\";\nimport { ExcalidrawElement } from \"../element/types\";\nimport { AppState } from \"../types\";\nimport { exportToCanvas } from \"../scene/export\";\nimport { ActionsManagerInterface } from \"../actions/types\";\nimport Stack from \"./Stack\";\nimport { t } from \"../i18n\";\n\nimport { KEYS } from \"../keys\";\n\nimport { probablySupportsClipboardBlob } from \"../clipboard\";\nimport { getSelectedElements, isSomeElementSelected } from \"../scene\";\nimport useIsMobile from \"../is-mobile\";\n\nconst scales = [1, 2, 3];\nconst defaultScale = scales.includes(devicePixelRatio) ? devicePixelRatio : 1;\n\nexport type ExportCB = (\n  elements: readonly ExcalidrawElement[],\n  scale?: number,\n) => void;\n\nfunction ExportModal({\n  elements,\n  appState,\n  exportPadding = 10,\n  actionManager,\n  onExportToPng,\n  onExportToSvg,\n  onExportToClipboard,\n  onExportToBackend,\n  onCloseRequest,\n}: {\n  appState: AppState;\n  elements: readonly ExcalidrawElement[];\n  exportPadding?: number;\n  actionManager: ActionsManagerInterface;\n  onExportToPng: ExportCB;\n  onExportToSvg: ExportCB;\n  onExportToClipboard: ExportCB;\n  onExportToBackend: ExportCB;\n  onCloseRequest: () => void;\n}) {\n  const someElementIsSelected = isSomeElementSelected(elements, appState);\n  const [scale, setScale] = useState(defaultScale);\n  const [exportSelected, setExportSelected] = useState(someElementIsSelected);\n  const previewRef = useRef<HTMLDivElement>(null);\n  const { exportBackground, viewBackgroundColor } = appState;\n  const pngButton = useRef<HTMLButtonElement>(null);\n  const closeButton = useRef<HTMLButtonElement>(null);\n  const onlySelectedInput = useRef<HTMLInputElement>(null);\n\n  const exportedElements = exportSelected\n    ? getSelectedElements(elements, appState)\n    : elements;\n\n  useEffect(() => {\n    setExportSelected(someElementIsSelected);\n  }, [someElementIsSelected]);\n\n  useEffect(() => {\n    const previewNode = previewRef.current;\n    const canvas = exportToCanvas(exportedElements, appState, {\n      exportBackground,\n      viewBackgroundColor,\n      exportPadding,\n      scale,\n    });\n    previewNode?.appendChild(canvas);\n    return () => {\n      previewNode?.removeChild(canvas);\n    };\n  }, [\n    appState,\n    exportedElements,\n    exportBackground,\n    exportPadding,\n    viewBackgroundColor,\n    scale,\n  ]);\n\n  useEffect(() => {\n    pngButton.current?.focus();\n  }, []);\n\n  function handleKeyDown(event: React.KeyboardEvent) {\n    if (event.key === KEYS.TAB) {\n      const { activeElement } = document;\n      if (event.shiftKey) {\n        if (activeElement === pngButton.current) {\n          closeButton.current?.focus();\n          event.preventDefault();\n        }\n      } else {\n        if (activeElement === closeButton.current) {\n          pngButton.current?.focus();\n          event.preventDefault();\n        }\n        if (activeElement === onlySelectedInput.current) {\n          closeButton.current?.focus();\n          event.preventDefault();\n        }\n      }\n    }\n  }\n\n  return (\n    <div className=\"ExportDialog__dialog\" onKeyDown={handleKeyDown}>\n      <Island padding={4}>\n        <button\n          className=\"ExportDialog__close\"\n          onClick={onCloseRequest}\n          aria-label={t(\"buttons.close\")}\n          ref={closeButton}\n        >\n          ╳\n        </button>\n        <h2 id=\"export-title\">{t(\"buttons.export\")}</h2>\n        <div className=\"ExportDialog__preview\" ref={previewRef}></div>\n        <div className=\"ExportDialog__actions\">\n          <Stack.Col gap={1}>\n            <Stack.Row gap={2}>\n              <ToolButton\n                type=\"button\"\n                label=\"PNG\"\n                title={t(\"buttons.exportToPng\")}\n                aria-label={t(\"buttons.exportToPng\")}\n                onClick={() => onExportToPng(exportedElements, scale)}\n                ref={pngButton}\n              />\n              <ToolButton\n                type=\"button\"\n                label=\"SVG\"\n                title={t(\"buttons.exportToSvg\")}\n                aria-label={t(\"buttons.exportToSvg\")}\n                onClick={() => onExportToSvg(exportedElements, scale)}\n              />\n              {probablySupportsClipboardBlob && (\n                <ToolButton\n                  type=\"button\"\n                  icon={clipboard}\n                  title={t(\"buttons.copyToClipboard\")}\n                  aria-label={t(\"buttons.copyToClipboard\")}\n                  onClick={() => onExportToClipboard(exportedElements, scale)}\n                />\n              )}\n              <ToolButton\n                type=\"button\"\n                icon={link}\n                title={t(\"buttons.getShareableLink\")}\n                aria-label={t(\"buttons.getShareableLink\")}\n                onClick={() => onExportToBackend(exportedElements)}\n              />\n            </Stack.Row>\n          </Stack.Col>\n\n          {actionManager.renderAction(\"changeProjectName\")}\n          <Stack.Col gap={1}>\n            <div className=\"ExportDialog__scales\">\n              <Stack.Row gap={2} align=\"baseline\">\n                {scales.map(s => (\n                  <ToolButton\n                    key={s}\n                    size=\"s\"\n                    type=\"radio\"\n                    icon={`x${s}`}\n                    name=\"export-canvas-scale\"\n                    aria-label={`Scale ${s} x`}\n                    id=\"export-canvas-scale\"\n                    checked={s === scale}\n                    onChange={() => setScale(s)}\n                  />\n                ))}\n              </Stack.Row>\n            </div>\n            {actionManager.renderAction(\"changeExportBackground\")}\n            {someElementIsSelected && (\n              <div>\n                <label>\n                  <input\n                    type=\"checkbox\"\n                    checked={exportSelected}\n                    onChange={event =>\n                      setExportSelected(event.currentTarget.checked)\n                    }\n                    ref={onlySelectedInput}\n                  />{\" \"}\n                  {t(\"labels.onlySelected\")}\n                </label>\n              </div>\n            )}\n          </Stack.Col>\n        </div>\n      </Island>\n    </div>\n  );\n}\n\nexport function ExportDialog({\n  elements,\n  appState,\n  exportPadding = 10,\n  actionManager,\n  onExportToPng,\n  onExportToSvg,\n  onExportToClipboard,\n  onExportToBackend,\n}: {\n  appState: AppState;\n  elements: readonly ExcalidrawElement[];\n  exportPadding?: number;\n  actionManager: ActionsManagerInterface;\n  onExportToPng: ExportCB;\n  onExportToSvg: ExportCB;\n  onExportToClipboard: ExportCB;\n  onExportToBackend: ExportCB;\n}) {\n  const [modalIsShown, setModalIsShown] = useState(false);\n  const triggerButton = useRef<HTMLButtonElement>(null);\n\n  const handleClose = React.useCallback(() => {\n    setModalIsShown(false);\n    triggerButton.current?.focus();\n  }, []);\n\n  return (\n    <>\n      <ToolButton\n        onClick={() => setModalIsShown(true)}\n        icon={exportFile}\n        type=\"button\"\n        aria-label={t(\"buttons.export\")}\n        showAriaLabel={useIsMobile()}\n        title={t(\"buttons.export\")}\n        ref={triggerButton}\n      />\n      {modalIsShown && (\n        <Modal\n          maxWidth={800}\n          onCloseRequest={handleClose}\n          labelledBy=\"export-title\"\n        >\n          <ExportModal\n            elements={elements}\n            appState={appState}\n            exportPadding={exportPadding}\n            actionManager={actionManager}\n            onExportToPng={onExportToPng}\n            onExportToSvg={onExportToSvg}\n            onExportToClipboard={onExportToClipboard}\n            onExportToBackend={onExportToBackend}\n            onCloseRequest={handleClose}\n          />\n        </Modal>\n      )}\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}