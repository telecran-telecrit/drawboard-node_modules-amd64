{"ast":null,"code":"var _jsxFileName = \"/home/pro/Solutions/drawboard-light/src/components/Actions.tsx\";\nimport React from \"react\";\nimport { hasBackground, hasStroke, hasText, getTargetElement } from \"../scene\";\nimport { t } from \"../i18n\";\nimport { SHAPES } from \"../shapes\";\nimport { ToolButton } from \"./ToolButton\";\nimport { capitalizeString, setCursorForShape } from \"../utils\";\nimport Stack from \"./Stack\";\nimport useIsMobile from \"../is-mobile\";\nimport { getNonDeletedElements } from \"../element\";\nexport function SelectedShapeActions({\n  appState,\n  elements,\n  renderAction,\n  elementType\n}) {\n  const targetElements = getTargetElement(getNonDeletedElements(elements), appState);\n  const isEditing = Boolean(appState.editingElement);\n  const isMobile = useIsMobile();\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"panelColumn\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 5\n    }\n  }, renderAction(\"changeStrokeColor\"), (hasBackground(elementType) || targetElements.some(element => hasBackground(element.type))) && /*#__PURE__*/React.createElement(React.Fragment, null, renderAction(\"changeBackgroundColor\"), renderAction(\"changeFillStyle\")), (hasStroke(elementType) || targetElements.some(element => hasStroke(element.type))) && /*#__PURE__*/React.createElement(React.Fragment, null, renderAction(\"changeStrokeWidth\"), renderAction(\"changeSloppiness\")), (hasText(elementType) || targetElements.some(element => hasText(element.type))) && /*#__PURE__*/React.createElement(React.Fragment, null, renderAction(\"changeFontSize\"), renderAction(\"changeFontFamily\"), renderAction(\"changeTextAlign\")), renderAction(\"changeOpacity\"), /*#__PURE__*/React.createElement(\"fieldset\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"legend\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }\n  }, t(\"labels.layers\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"buttonList\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }\n  }, renderAction(\"sendToBack\"), renderAction(\"sendBackward\"), renderAction(\"bringToFront\"), renderAction(\"bringForward\"))), !isMobile && !isEditing && targetElements.length > 0 && /*#__PURE__*/React.createElement(\"fieldset\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"legend\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 11\n    }\n  }, t(\"labels.actions\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"buttonList\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 11\n    }\n  }, renderAction(\"duplicateSelection\"), renderAction(\"deleteSelectedElements\"))));\n}\nexport function ShapesSwitcher({\n  elementType,\n  setAppState\n}) {\n  return /*#__PURE__*/React.createElement(React.Fragment, null, SHAPES.map(({\n    value,\n    icon\n  }, index) => {\n    const label = t(`toolBar.${value}`);\n    const shortcut = `${capitalizeString(value)[0]} ${t(\"shortcutsDialog.or\")} ${index + 1}`;\n    return /*#__PURE__*/React.createElement(ToolButton, {\n      key: value,\n      type: \"radio\",\n      icon: icon,\n      checked: elementType === value,\n      name: \"editor-current-shape\",\n      title: `${capitalizeString(label)} â€” ${shortcut}`,\n      keyBindingLabel: `${index + 1}`,\n      \"aria-label\": capitalizeString(label),\n      \"aria-keyshortcuts\": `${label[0]} ${index + 1}`,\n      \"data-testid\": value,\n      onChange: () => {\n        setAppState({\n          elementType: value,\n          multiElement: null,\n          selectedElementIds: {}\n        });\n        setCursorForShape(value);\n        setAppState({});\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 11\n      }\n    });\n  }));\n}\nexport function ZoomActions({\n  renderAction,\n  zoom\n}) {\n  return /*#__PURE__*/React.createElement(Stack.Col, {\n    gap: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Stack.Row, {\n    gap: 1,\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }\n  }, renderAction(\"zoomIn\"), renderAction(\"zoomOut\"), renderAction(\"resetZoom\"), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      marginInlineStart: 4\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 9\n    }\n  }, (zoom * 100).toFixed(0), \"%\")));\n}","map":{"version":3,"sources":["/home/pro/Solutions/drawboard-light/src/components/Actions.tsx"],"names":["React","hasBackground","hasStroke","hasText","getTargetElement","t","SHAPES","ToolButton","capitalizeString","setCursorForShape","Stack","useIsMobile","getNonDeletedElements","SelectedShapeActions","appState","elements","renderAction","elementType","targetElements","isEditing","Boolean","editingElement","isMobile","some","element","type","length","ShapesSwitcher","setAppState","map","value","icon","index","label","shortcut","multiElement","selectedElementIds","ZoomActions","zoom","marginInlineStart","toFixed"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { AppState } from \"../types\";\nimport { ExcalidrawElement } from \"../element/types\";\nimport { ActionManager } from \"../actions/manager\";\nimport { hasBackground, hasStroke, hasText, getTargetElement } from \"../scene\";\nimport { t } from \"../i18n\";\nimport { SHAPES } from \"../shapes\";\nimport { ToolButton } from \"./ToolButton\";\nimport { capitalizeString, setCursorForShape } from \"../utils\";\nimport Stack from \"./Stack\";\nimport useIsMobile from \"../is-mobile\";\nimport { getNonDeletedElements } from \"../element\";\n\nexport function SelectedShapeActions({\n  appState,\n  elements,\n  renderAction,\n  elementType,\n}: {\n  appState: AppState;\n  elements: readonly ExcalidrawElement[];\n  renderAction: ActionManager[\"renderAction\"];\n  elementType: ExcalidrawElement[\"type\"];\n}) {\n  const targetElements = getTargetElement(\n    getNonDeletedElements(elements),\n    appState,\n  );\n  const isEditing = Boolean(appState.editingElement);\n  const isMobile = useIsMobile();\n\n  return (\n    <div className=\"panelColumn\">\n      {renderAction(\"changeStrokeColor\")}\n      {(hasBackground(elementType) ||\n        targetElements.some((element) => hasBackground(element.type))) && (\n        <>\n          {renderAction(\"changeBackgroundColor\")}\n\n          {renderAction(\"changeFillStyle\")}\n        </>\n      )}\n\n      {(hasStroke(elementType) ||\n        targetElements.some((element) => hasStroke(element.type))) && (\n        <>\n          {renderAction(\"changeStrokeWidth\")}\n\n          {renderAction(\"changeSloppiness\")}\n        </>\n      )}\n\n      {(hasText(elementType) ||\n        targetElements.some((element) => hasText(element.type))) && (\n        <>\n          {renderAction(\"changeFontSize\")}\n\n          {renderAction(\"changeFontFamily\")}\n\n          {renderAction(\"changeTextAlign\")}\n        </>\n      )}\n\n      {renderAction(\"changeOpacity\")}\n\n      <fieldset>\n        <legend>{t(\"labels.layers\")}</legend>\n        <div className=\"buttonList\">\n          {renderAction(\"sendToBack\")}\n          {renderAction(\"sendBackward\")}\n          {renderAction(\"bringToFront\")}\n          {renderAction(\"bringForward\")}\n        </div>\n      </fieldset>\n      {!isMobile && !isEditing && targetElements.length > 0 && (\n        <fieldset>\n          <legend>{t(\"labels.actions\")}</legend>\n          <div className=\"buttonList\">\n            {renderAction(\"duplicateSelection\")}\n            {renderAction(\"deleteSelectedElements\")}\n          </div>\n        </fieldset>\n      )}\n    </div>\n  );\n}\n\nexport function ShapesSwitcher({\n  elementType,\n  setAppState,\n}: {\n  elementType: ExcalidrawElement[\"type\"];\n  setAppState: any;\n}) {\n  return (\n    <>\n      {SHAPES.map(({ value, icon }, index) => {\n        const label = t(`toolBar.${value}`);\n        const shortcut = `${capitalizeString(value)[0]} ${t(\n          \"shortcutsDialog.or\",\n        )} ${index + 1}`;\n        return (\n          <ToolButton\n            key={value}\n            type=\"radio\"\n            icon={icon}\n            checked={elementType === value}\n            name=\"editor-current-shape\"\n            title={`${capitalizeString(label)} â€” ${shortcut}`}\n            keyBindingLabel={`${index + 1}`}\n            aria-label={capitalizeString(label)}\n            aria-keyshortcuts={`${label[0]} ${index + 1}`}\n            data-testid={value}\n            onChange={() => {\n              setAppState({\n                elementType: value,\n                multiElement: null,\n                selectedElementIds: {},\n              });\n              setCursorForShape(value);\n              setAppState({});\n            }}\n          ></ToolButton>\n        );\n      })}\n    </>\n  );\n}\n\nexport function ZoomActions({\n  renderAction,\n  zoom,\n}: {\n  renderAction: ActionManager[\"renderAction\"];\n  zoom: number;\n}) {\n  return (\n    <Stack.Col gap={1}>\n      <Stack.Row gap={1} align=\"center\">\n        {renderAction(\"zoomIn\")}\n        {renderAction(\"zoomOut\")}\n        {renderAction(\"resetZoom\")}\n        <div style={{ marginInlineStart: 4 }}>{(zoom * 100).toFixed(0)}%</div>\n      </Stack.Row>\n    </Stack.Col>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}