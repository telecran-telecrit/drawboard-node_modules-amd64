{"ast":null,"code":"import { measureText } from \"../utils\";\nimport { randomInteger, randomId } from \"../random\";\nimport { newElementWith } from \"./mutateElement\";\n\nfunction _newElementBase(type, {\n  x,\n  y,\n  strokeColor,\n  backgroundColor,\n  fillStyle,\n  strokeWidth,\n  roughness,\n  opacity,\n  width = 0,\n  height = 0,\n  angle = 0,\n  ...rest\n}) {\n  var _rest$seed, _rest$versionNonce;\n\n  return {\n    id: rest.id || randomId(),\n    type,\n    x,\n    y,\n    width,\n    height,\n    angle,\n    strokeColor,\n    backgroundColor,\n    fillStyle,\n    strokeWidth,\n    roughness,\n    opacity,\n    seed: (_rest$seed = rest.seed) !== null && _rest$seed !== void 0 ? _rest$seed : randomInteger(),\n    version: rest.version || 1,\n    versionNonce: (_rest$versionNonce = rest.versionNonce) !== null && _rest$versionNonce !== void 0 ? _rest$versionNonce : 0,\n    isDeleted: false\n  };\n}\n\nexport function newElement(opts) {\n  return _newElementBase(opts.type, opts);\n}\nexport function newTextElement(opts) {\n  const metrics = measureText(opts.text, opts.font);\n  const textElement = newElementWith({ ..._newElementBase(\"text\", opts),\n    text: opts.text,\n    font: opts.font,\n    textAlign: opts.textAlign,\n    // Center the text\n    x: opts.x - metrics.width / 2,\n    y: opts.y - metrics.height / 2,\n    width: metrics.width,\n    height: metrics.height,\n    baseline: metrics.baseline\n  }, {});\n  return textElement;\n}\nexport function newLinearElement(opts) {\n  return { ..._newElementBase(opts.type, opts),\n    points: [],\n    lastCommittedPoint: opts.lastCommittedPoint || null\n  };\n} // Simplified deep clone for the purpose of cloning ExcalidrawElement only\n//  (doesn't clone Date, RegExp, Map, Set, Typed arrays etc.)\n//\n// Adapted from https://github.com/lukeed/klona\n\nfunction _duplicateElement(val, depth = 0) {\n  if (val == null || typeof val !== \"object\") {\n    return val;\n  }\n\n  if (Object.prototype.toString.call(val) === \"[object Object]\") {\n    const tmp = typeof val.constructor === \"function\" ? Object.create(Object.getPrototypeOf(val)) : {};\n\n    for (const key in val) {\n      if (val.hasOwnProperty(key)) {\n        // don't copy top-level shape property, which we want to regenerate\n        if (depth === 0 && (key === \"shape\" || key === \"canvas\")) {\n          continue;\n        }\n\n        tmp[key] = _duplicateElement(val[key], depth + 1);\n      }\n    }\n\n    return tmp;\n  }\n\n  if (Array.isArray(val)) {\n    let k = val.length;\n    const arr = new Array(k);\n\n    while (k--) {\n      arr[k] = _duplicateElement(val[k], depth + 1);\n    }\n\n    return arr;\n  }\n\n  return val;\n}\n\nexport function duplicateElement(element, overrides) {\n  let copy = _duplicateElement(element);\n\n  copy.id = randomId();\n  copy.seed = randomInteger();\n\n  if (overrides) {\n    copy = Object.assign(copy, overrides);\n  }\n\n  return copy;\n}","map":{"version":3,"sources":["/home/pro/Solutions/drawboard-light/src/element/newElement.ts"],"names":["measureText","randomInteger","randomId","newElementWith","_newElementBase","type","x","y","strokeColor","backgroundColor","fillStyle","strokeWidth","roughness","opacity","width","height","angle","rest","id","seed","version","versionNonce","isDeleted","newElement","opts","newTextElement","metrics","text","font","textElement","textAlign","baseline","newLinearElement","points","lastCommittedPoint","_duplicateElement","val","depth","Object","prototype","toString","call","tmp","constructor","create","getPrototypeOf","key","hasOwnProperty","Array","isArray","k","length","arr","duplicateElement","element","overrides","copy","assign"],"mappings":"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","sourcesContent":["import {\n  ExcalidrawElement,\n  ExcalidrawTextElement,\n  ExcalidrawLinearElement,\n  ExcalidrawGenericElement,\n  NonDeleted,\n  TextAlign,\n} from \"../element/types\";\nimport { measureText } from \"../utils\";\nimport { randomInteger, randomId } from \"../random\";\nimport { newElementWith } from \"./mutateElement\";\n\ntype ElementConstructorOpts = {\n  x: ExcalidrawGenericElement[\"x\"];\n  y: ExcalidrawGenericElement[\"y\"];\n  strokeColor: ExcalidrawGenericElement[\"strokeColor\"];\n  backgroundColor: ExcalidrawGenericElement[\"backgroundColor\"];\n  fillStyle: ExcalidrawGenericElement[\"fillStyle\"];\n  strokeWidth: ExcalidrawGenericElement[\"strokeWidth\"];\n  roughness: ExcalidrawGenericElement[\"roughness\"];\n  opacity: ExcalidrawGenericElement[\"opacity\"];\n  width?: ExcalidrawGenericElement[\"width\"];\n  height?: ExcalidrawGenericElement[\"height\"];\n  angle?: ExcalidrawGenericElement[\"angle\"];\n};\n\nfunction _newElementBase<T extends ExcalidrawElement>(\n  type: T[\"type\"],\n  {\n    x,\n    y,\n    strokeColor,\n    backgroundColor,\n    fillStyle,\n    strokeWidth,\n    roughness,\n    opacity,\n    width = 0,\n    height = 0,\n    angle = 0,\n    ...rest\n  }: ElementConstructorOpts & Partial<ExcalidrawGenericElement>,\n) {\n  return {\n    id: rest.id || randomId(),\n    type,\n    x,\n    y,\n    width,\n    height,\n    angle,\n    strokeColor,\n    backgroundColor,\n    fillStyle,\n    strokeWidth,\n    roughness,\n    opacity,\n    seed: rest.seed ?? randomInteger(),\n    version: rest.version || 1,\n    versionNonce: rest.versionNonce ?? 0,\n    isDeleted: false as false,\n  };\n}\n\nexport function newElement(\n  opts: {\n    type: ExcalidrawGenericElement[\"type\"];\n  } & ElementConstructorOpts,\n): NonDeleted<ExcalidrawGenericElement> {\n  return _newElementBase<ExcalidrawGenericElement>(opts.type, opts);\n}\n\nexport function newTextElement(\n  opts: {\n    text: string;\n    font: string;\n    textAlign: TextAlign;\n  } & ElementConstructorOpts,\n): NonDeleted<ExcalidrawTextElement> {\n  const metrics = measureText(opts.text, opts.font);\n  const textElement = newElementWith(\n    {\n      ..._newElementBase<ExcalidrawTextElement>(\"text\", opts),\n      text: opts.text,\n      font: opts.font,\n      textAlign: opts.textAlign,\n      // Center the text\n      x: opts.x - metrics.width / 2,\n      y: opts.y - metrics.height / 2,\n      width: metrics.width,\n      height: metrics.height,\n      baseline: metrics.baseline,\n    },\n    {},\n  );\n\n  return textElement;\n}\n\nexport function newLinearElement(\n  opts: {\n    type: ExcalidrawLinearElement[\"type\"];\n    lastCommittedPoint?: ExcalidrawLinearElement[\"lastCommittedPoint\"];\n  } & ElementConstructorOpts,\n): NonDeleted<ExcalidrawLinearElement> {\n  return {\n    ..._newElementBase<ExcalidrawLinearElement>(opts.type, opts),\n    points: [],\n    lastCommittedPoint: opts.lastCommittedPoint || null,\n  };\n}\n\n// Simplified deep clone for the purpose of cloning ExcalidrawElement only\n//  (doesn't clone Date, RegExp, Map, Set, Typed arrays etc.)\n//\n// Adapted from https://github.com/lukeed/klona\nfunction _duplicateElement(val: any, depth: number = 0) {\n  if (val == null || typeof val !== \"object\") {\n    return val;\n  }\n\n  if (Object.prototype.toString.call(val) === \"[object Object]\") {\n    const tmp =\n      typeof val.constructor === \"function\"\n        ? Object.create(Object.getPrototypeOf(val))\n        : {};\n    for (const key in val) {\n      if (val.hasOwnProperty(key)) {\n        // don't copy top-level shape property, which we want to regenerate\n        if (depth === 0 && (key === \"shape\" || key === \"canvas\")) {\n          continue;\n        }\n        tmp[key] = _duplicateElement(val[key], depth + 1);\n      }\n    }\n    return tmp;\n  }\n\n  if (Array.isArray(val)) {\n    let k = val.length;\n    const arr = new Array(k);\n    while (k--) {\n      arr[k] = _duplicateElement(val[k], depth + 1);\n    }\n    return arr;\n  }\n\n  return val;\n}\n\nexport function duplicateElement<TElement extends Mutable<ExcalidrawElement>>(\n  element: TElement,\n  overrides?: Partial<TElement>,\n): TElement {\n  let copy: TElement = _duplicateElement(element);\n  copy.id = randomId();\n  copy.seed = randomInteger();\n  if (overrides) {\n    copy = Object.assign(copy, overrides);\n  }\n  return copy;\n}\n"]},"metadata":{},"sourceType":"module"}