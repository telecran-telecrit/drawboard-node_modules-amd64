{"ast":null,"code":"import { invalidateShapeForElement } from \"../renderer/renderElement\";\nimport { globalSceneState } from \"../scene\";\nimport { getSizeFromPoints } from \"../points\";\nimport { randomInteger } from \"../random\";\n// This function tracks updates of text elements for the purposes for collaboration.\n// The version is used to compare updates when more than one user is working in\n// the same drawing. Note: this will trigger the component to update. Make sure you\n// are calling it either from a React event handler or within unstable_batchedUpdates().\nexport function mutateElement(element, updates) {\n  // casting to any because can't use `in` operator\n  // (see https://github.com/microsoft/TypeScript/issues/21732)\n  const {\n    points\n  } = updates;\n\n  if (typeof points !== \"undefined\") {\n    updates = { ...getSizeFromPoints(points),\n      ...updates\n    };\n  }\n\n  for (const key in updates) {\n    const value = updates[key];\n\n    if (typeof value !== \"undefined\") {\n      // @ts-ignore\n      element[key] = value;\n    }\n  }\n\n  if (typeof updates.height !== \"undefined\" || typeof updates.width !== \"undefined\" || typeof points !== \"undefined\") {\n    invalidateShapeForElement(element);\n  }\n\n  element.version++;\n  element.versionNonce = randomInteger();\n  globalSceneState.informMutation();\n}\nexport function newElementWith(element, updates) {\n  return { ...element,\n    version: element.version + 1,\n    versionNonce: randomInteger(),\n    ...updates\n  };\n}","map":{"version":3,"sources":["/home/pro/Solutions/drawboard-light/src/element/mutateElement.ts"],"names":["invalidateShapeForElement","globalSceneState","getSizeFromPoints","randomInteger","mutateElement","element","updates","points","key","value","height","width","version","versionNonce","informMutation","newElementWith"],"mappings":"AACA,SAASA,yBAAT,QAA0C,2BAA1C;AACA,SAASC,gBAAT,QAAiC,UAAjC;AACA,SAASC,iBAAT,QAAkC,WAAlC;AACA,SAASC,aAAT,QAA8B,WAA9B;AAOA;AACA;AACA;AACA;AACA,OAAO,SAASC,aAAT,CACLC,OADK,EAELC,OAFK,EAGL;AACA;AACA;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAaD,OAAnB;;AAEA,MAAI,OAAOC,MAAP,KAAkB,WAAtB,EAAmC;AACjCD,IAAAA,OAAO,GAAG,EAAE,GAAGJ,iBAAiB,CAACK,MAAD,CAAtB;AAAgC,SAAGD;AAAnC,KAAV;AACD;;AAED,OAAK,MAAME,GAAX,IAAkBF,OAAlB,EAA2B;AACzB,UAAMG,KAAK,GAAIH,OAAD,CAAiBE,GAAjB,CAAd;;AACA,QAAI,OAAOC,KAAP,KAAiB,WAArB,EAAkC;AAChC;AACAJ,MAAAA,OAAO,CAACG,GAAD,CAAP,GAAeC,KAAf;AACD;AACF;;AAED,MACE,OAAOH,OAAO,CAACI,MAAf,KAA0B,WAA1B,IACA,OAAOJ,OAAO,CAACK,KAAf,KAAyB,WADzB,IAEA,OAAOJ,MAAP,KAAkB,WAHpB,EAIE;AACAP,IAAAA,yBAAyB,CAACK,OAAD,CAAzB;AACD;;AAEDA,EAAAA,OAAO,CAACO,OAAR;AACAP,EAAAA,OAAO,CAACQ,YAAR,GAAuBV,aAAa,EAApC;AAEAF,EAAAA,gBAAgB,CAACa,cAAjB;AACD;AAED,OAAO,SAASC,cAAT,CACLV,OADK,EAELC,OAFK,EAGK;AACV,SAAO,EACL,GAAGD,OADE;AAELO,IAAAA,OAAO,EAAEP,OAAO,CAACO,OAAR,GAAkB,CAFtB;AAGLC,IAAAA,YAAY,EAAEV,aAAa,EAHtB;AAIL,OAAGG;AAJE,GAAP;AAMD","sourcesContent":["import { ExcalidrawElement } from \"./types\";\nimport { invalidateShapeForElement } from \"../renderer/renderElement\";\nimport { globalSceneState } from \"../scene\";\nimport { getSizeFromPoints } from \"../points\";\nimport { randomInteger } from \"../random\";\n\ntype ElementUpdate<TElement extends ExcalidrawElement> = Omit<\n  Partial<TElement>,\n  \"id\" | \"seed\"\n>;\n\n// This function tracks updates of text elements for the purposes for collaboration.\n// The version is used to compare updates when more than one user is working in\n// the same drawing. Note: this will trigger the component to update. Make sure you\n// are calling it either from a React event handler or within unstable_batchedUpdates().\nexport function mutateElement<TElement extends Mutable<ExcalidrawElement>>(\n  element: TElement,\n  updates: ElementUpdate<TElement>,\n) {\n  // casting to any because can't use `in` operator\n  // (see https://github.com/microsoft/TypeScript/issues/21732)\n  const { points } = updates as any;\n\n  if (typeof points !== \"undefined\") {\n    updates = { ...getSizeFromPoints(points), ...updates };\n  }\n\n  for (const key in updates) {\n    const value = (updates as any)[key];\n    if (typeof value !== \"undefined\") {\n      // @ts-ignore\n      element[key] = value;\n    }\n  }\n\n  if (\n    typeof updates.height !== \"undefined\" ||\n    typeof updates.width !== \"undefined\" ||\n    typeof points !== \"undefined\"\n  ) {\n    invalidateShapeForElement(element);\n  }\n\n  element.version++;\n  element.versionNonce = randomInteger();\n\n  globalSceneState.informMutation();\n}\n\nexport function newElementWith<TElement extends ExcalidrawElement>(\n  element: TElement,\n  updates: ElementUpdate<TElement>,\n): TElement {\n  return {\n    ...element,\n    version: element.version + 1,\n    versionNonce: randomInteger(),\n    ...updates,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}