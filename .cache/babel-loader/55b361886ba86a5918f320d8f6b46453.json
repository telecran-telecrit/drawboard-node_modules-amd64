{"ast":null,"code":"import _objectSpread from \"/home/pro/Solutions/drawboard-light/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/home/pro/Solutions/drawboard-light/src/actions/actionFinalize.tsx\";\nimport { KEYS } from \"../keys\";\nimport { isInvisiblySmallElement } from \"../element\";\nimport { resetCursor } from \"../utils\";\nimport React from \"react\";\nimport { ToolButton } from \"../components/ToolButton\";\nimport { done } from \"../components/icons\";\nimport { t } from \"../i18n\";\nimport { register } from \"./register\";\nimport { invalidateShapeForElement } from \"../renderer/renderElement\";\nexport var actionFinalize = register({\n  name: \"finalize\",\n  perform: function perform(elements, appState) {\n    var newElements = elements;\n\n    if (window.document.activeElement instanceof HTMLElement) {\n      window.document.activeElement.blur();\n    }\n\n    if (appState.multiElement) {\n      // pen and mouse have hover\n      if (appState.lastPointerDownWith !== \"touch\") {\n        appState.multiElement.points = appState.multiElement.points.slice(0, appState.multiElement.points.length - 1);\n      }\n\n      if (isInvisiblySmallElement(appState.multiElement)) {\n        newElements = newElements.slice(0, -1);\n      }\n\n      invalidateShapeForElement(appState.multiElement);\n\n      if (!appState.elementLocked) {\n        appState.selectedElementIds[appState.multiElement.id] = true;\n      }\n    }\n\n    if (!appState.elementLocked || !appState.multiElement) {\n      resetCursor();\n    }\n\n    return {\n      elements: newElements,\n      appState: _objectSpread({}, appState, {\n        elementType: appState.elementLocked && appState.multiElement ? appState.elementType : \"selection\",\n        draggingElement: null,\n        multiElement: null,\n        selectedElementIds: {}\n      })\n    };\n  },\n  keyTest: function keyTest(event, appState) {\n    return event.key === KEYS.ESCAPE && !appState.draggingElement && appState.multiElement === null || (event.key === KEYS.ESCAPE || event.key === KEYS.ENTER) && appState.multiElement !== null;\n  },\n  PanelComponent: function PanelComponent(_ref) {\n    var appState = _ref.appState,\n        updateData = _ref.updateData;\n    return React.createElement(ToolButton, {\n      type: \"button\",\n      icon: done,\n      title: t(\"buttons.done\"),\n      \"aria-label\": t(\"buttons.done\"),\n      onClick: updateData,\n      visible: appState.multiElement != null,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    });\n  }\n});","map":{"version":3,"sources":["/home/pro/Solutions/drawboard-light/src/actions/actionFinalize.tsx"],"names":["KEYS","isInvisiblySmallElement","resetCursor","React","ToolButton","done","t","register","invalidateShapeForElement","actionFinalize","name","perform","elements","appState","newElements","window","document","activeElement","HTMLElement","blur","multiElement","lastPointerDownWith","points","slice","length","elementLocked","selectedElementIds","id","elementType","draggingElement","keyTest","event","key","ESCAPE","ENTER","PanelComponent","updateData"],"mappings":"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","sourcesContent":["import { KEYS } from \"../keys\";\nimport { isInvisiblySmallElement } from \"../element\";\nimport { resetCursor } from \"../utils\";\nimport React from \"react\";\nimport { ToolButton } from \"../components/ToolButton\";\nimport { done } from \"../components/icons\";\nimport { t } from \"../i18n\";\nimport { register } from \"./register\";\nimport { invalidateShapeForElement } from \"../renderer/renderElement\";\n\nexport const actionFinalize = register({\n  name: \"finalize\",\n  perform: (elements, appState) => {\n    let newElements = elements;\n    if (window.document.activeElement instanceof HTMLElement) {\n      window.document.activeElement.blur();\n    }\n    if (appState.multiElement) {\n      // pen and mouse have hover\n      if (appState.lastPointerDownWith !== \"touch\") {\n        appState.multiElement.points = appState.multiElement.points.slice(\n          0,\n          appState.multiElement.points.length - 1,\n        );\n      }\n      if (isInvisiblySmallElement(appState.multiElement)) {\n        newElements = newElements.slice(0, -1);\n      }\n      invalidateShapeForElement(appState.multiElement);\n      if (!appState.elementLocked) {\n        appState.selectedElementIds[appState.multiElement.id] = true;\n      }\n    }\n    if (!appState.elementLocked || !appState.multiElement) {\n      resetCursor();\n    }\n    return {\n      elements: newElements,\n      appState: {\n        ...appState,\n        elementType:\n          appState.elementLocked && appState.multiElement\n            ? appState.elementType\n            : \"selection\",\n        draggingElement: null,\n        multiElement: null,\n        selectedElementIds: {},\n      },\n    };\n  },\n  keyTest: (event, appState) =>\n    (event.key === KEYS.ESCAPE &&\n      !appState.draggingElement &&\n      appState.multiElement === null) ||\n    ((event.key === KEYS.ESCAPE || event.key === KEYS.ENTER) &&\n      appState.multiElement !== null),\n  PanelComponent: ({ appState, updateData }) => (\n    <ToolButton\n      type=\"button\"\n      icon={done}\n      title={t(\"buttons.done\")}\n      aria-label={t(\"buttons.done\")}\n      onClick={updateData}\n      visible={appState.multiElement != null}\n    />\n  ),\n});\n"]},"metadata":{},"sourceType":"module"}