{"ast":null,"code":"// @license © 2020 Google LLC. Licensed under the Apache License, Version 2.0.\nconst t = async (e, i, r = []) => {\n  for await (const a of e) a.isFile ? r.push((await a.getFile())) : a.isDirectory && i && (await t((await a.getEntries()), i, r));\n\n  return r;\n};\n\nexport default (async (e = {}) => {\n  e.recursive = e.recursive || !1, e.multiple = e.multiple || !1;\n\n  try {\n    const i = await window.chooseFileSystemEntries({\n      type: \"open-directory\",\n      multiple: e.multiple\n    }),\n          r = await i.getEntries();\n    return await t(r, e.recursive);\n  } catch (i) {\n    if (!/not a valid enum value/.test(i.message)) throw i;\n\n    try {\n      const i = await window.chooseFileSystemEntries({\n        type: \"openDirectory\",\n        multiple: e.multiple\n      }),\n            r = await i.getEntries();\n      return await t(r, e.recursive);\n    } catch (t) {\n      throw t;\n    }\n  }\n});","map":{"version":3,"sources":["/home/pro/Solutions/drawboard-light/node_modules/browser-nativefs/dist/directory-open-nativefs.mjs"],"names":["t","e","i","r","a","isFile","push","getFile","isDirectory","getEntries","recursive","multiple","window","chooseFileSystemEntries","type","test","message"],"mappings":"AAAA;AACA,MAAMA,CAAC,GAAC,OAAMC,CAAN,EAAQC,CAAR,EAAUC,CAAC,GAAC,EAAZ,KAAiB;AAAC,aAAU,MAAMC,CAAhB,IAAqBH,CAArB,EAAuBG,CAAC,CAACC,MAAF,GAASF,CAAC,CAACG,IAAF,EAAO,MAAMF,CAAC,CAACG,OAAF,EAAb,EAAT,GAAmCH,CAAC,CAACI,WAAF,IAAeN,CAAf,KAAkB,MAAMF,CAAC,EAAC,MAAMI,CAAC,CAACK,UAAF,EAAP,GAAsBP,CAAtB,EAAwBC,CAAxB,CAAzB,CAAnC;;AAAuF,SAAOA,CAAP;AAAS,CAAjJ;;AAAkJ,gBAAe,OAAMF,CAAC,GAAC,EAAR,KAAa;AAACA,EAAAA,CAAC,CAACS,SAAF,GAAYT,CAAC,CAACS,SAAF,IAAa,CAAC,CAA1B,EAA4BT,CAAC,CAACU,QAAF,GAAWV,CAAC,CAACU,QAAF,IAAY,CAAC,CAApD;;AAAsD,MAAG;AAAC,UAAMT,CAAC,GAAC,MAAMU,MAAM,CAACC,uBAAP,CAA+B;AAACC,MAAAA,IAAI,EAAC,gBAAN;AAAuBH,MAAAA,QAAQ,EAACV,CAAC,CAACU;AAAlC,KAA/B,CAAd;AAAA,UAA0FR,CAAC,GAAC,MAAMD,CAAC,CAACO,UAAF,EAAlG;AAAiH,WAAO,MAAMT,CAAC,CAACG,CAAD,EAAGF,CAAC,CAACS,SAAL,CAAd;AAA8B,GAAnJ,CAAmJ,OAAMR,CAAN,EAAQ;AAAC,QAAG,CAAC,yBAAyBa,IAAzB,CAA8Bb,CAAC,CAACc,OAAhC,CAAJ,EAA6C,MAAMd,CAAN;;AAAQ,QAAG;AAAC,YAAMA,CAAC,GAAC,MAAMU,MAAM,CAACC,uBAAP,CAA+B;AAACC,QAAAA,IAAI,EAAC,eAAN;AAAsBH,QAAAA,QAAQ,EAACV,CAAC,CAACU;AAAjC,OAA/B,CAAd;AAAA,YAAyFR,CAAC,GAAC,MAAMD,CAAC,CAACO,UAAF,EAAjG;AAAgH,aAAO,MAAMT,CAAC,CAACG,CAAD,EAAGF,CAAC,CAACS,SAAL,CAAd;AAA8B,KAAlJ,CAAkJ,OAAMV,CAAN,EAAQ;AAAC,YAAMA,CAAN;AAAQ;AAAC;AAAC,CAAzc","sourcesContent":["// @license © 2020 Google LLC. Licensed under the Apache License, Version 2.0.\nconst t=async(e,i,r=[])=>{for await(const a of e)a.isFile?r.push(await a.getFile()):a.isDirectory&&i&&await t(await a.getEntries(),i,r);return r};export default async(e={})=>{e.recursive=e.recursive||!1,e.multiple=e.multiple||!1;try{const i=await window.chooseFileSystemEntries({type:\"open-directory\",multiple:e.multiple}),r=await i.getEntries();return await t(r,e.recursive)}catch(i){if(!/not a valid enum value/.test(i.message))throw i;try{const i=await window.chooseFileSystemEntries({type:\"openDirectory\",multiple:e.multiple}),r=await i.getEntries();return await t(r,e.recursive)}catch(t){throw t}}};"]},"metadata":{},"sourceType":"module"}