{"ast":null,"code":"var _jsxFileName = \"/home/pro/Solutions/drawboard-light/src/components/ProjectName.tsx\";\nimport \"./TextInput.scss\";\nimport React, { Component } from \"react\";\nimport { selectNode, removeSelection } from \"../utils\";\nexport class ProjectName extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.handleFocus = event => {\n      selectNode(event.currentTarget);\n    };\n\n    this.handleBlur = event => {\n      const value = event.currentTarget.innerText.trim();\n\n      if (value !== this.props.value) {\n        this.props.onChange(value);\n      }\n\n      removeSelection();\n    };\n\n    this.handleKeyDown = event => {\n      if (event.key === \"Enter\") {\n        event.preventDefault();\n\n        if (event.nativeEvent.isComposing || event.keyCode === 229) {\n          return;\n        }\n\n        event.currentTarget.blur();\n      }\n    };\n\n    this.makeEditable = editable => {\n      if (!editable) {\n        return;\n      }\n\n      try {\n        editable.contentEditable = \"plaintext-only\";\n      } catch {\n        editable.contentEditable = \"true\";\n      }\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"span\", {\n      suppressContentEditableWarning: true,\n      ref: this.makeEditable,\n      \"data-type\": \"wysiwyg\",\n      className: \"TextInput\",\n      role: \"textbox\",\n      \"aria-label\": this.props.label,\n      onBlur: this.handleBlur,\n      onKeyDown: this.handleKeyDown,\n      onFocus: this.handleFocus,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 7\n      }\n    }, this.props.value);\n  }\n\n}","map":{"version":3,"sources":["/home/pro/Solutions/drawboard-light/src/components/ProjectName.tsx"],"names":["React","Component","selectNode","removeSelection","ProjectName","handleFocus","event","currentTarget","handleBlur","value","innerText","trim","props","onChange","handleKeyDown","key","preventDefault","nativeEvent","isComposing","keyCode","blur","makeEditable","editable","contentEditable","render","label"],"mappings":";AAAA,OAAO,kBAAP;AAEA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,UAAT,EAAqBC,eAArB,QAA4C,UAA5C;AAQA,OAAO,MAAMC,WAAN,SAA0BH,SAA1B,CAA2C;AAAA;AAAA;;AAAA,SACxCI,WADwC,GACzBC,KAAD,IAA0C;AAC9DJ,MAAAA,UAAU,CAACI,KAAK,CAACC,aAAP,CAAV;AACD,KAH+C;;AAAA,SAKxCC,UALwC,GAK1BF,KAAD,IAA0C;AAC7D,YAAMG,KAAK,GAAGH,KAAK,CAACC,aAAN,CAAoBG,SAApB,CAA8BC,IAA9B,EAAd;;AACA,UAAIF,KAAK,KAAK,KAAKG,KAAL,CAAWH,KAAzB,EAAgC;AAC9B,aAAKG,KAAL,CAAWC,QAAX,CAAoBJ,KAApB;AACD;;AACDN,MAAAA,eAAe;AAChB,KAX+C;;AAAA,SAaxCW,aAbwC,GAavBR,KAAD,IAA6C;AACnE,UAAIA,KAAK,CAACS,GAAN,KAAc,OAAlB,EAA2B;AACzBT,QAAAA,KAAK,CAACU,cAAN;;AACA,YAAIV,KAAK,CAACW,WAAN,CAAkBC,WAAlB,IAAiCZ,KAAK,CAACa,OAAN,KAAkB,GAAvD,EAA4D;AAC1D;AACD;;AACDb,QAAAA,KAAK,CAACC,aAAN,CAAoBa,IAApB;AACD;AACF,KArB+C;;AAAA,SAsBxCC,YAtBwC,GAsBxBC,QAAD,IAAsC;AAC3D,UAAI,CAACA,QAAL,EAAe;AACb;AACD;;AACD,UAAI;AACFA,QAAAA,QAAQ,CAACC,eAAT,GAA2B,gBAA3B;AACD,OAFD,CAEE,MAAM;AACND,QAAAA,QAAQ,CAACC,eAAT,GAA2B,MAA3B;AACD;AACF,KA/B+C;AAAA;;AAiCzCC,EAAAA,MAAP,GAAgB;AACd,wBACE;AACE,MAAA,8BAA8B,MADhC;AAEE,MAAA,GAAG,EAAE,KAAKH,YAFZ;AAGE,mBAAU,SAHZ;AAIE,MAAA,SAAS,EAAC,WAJZ;AAKE,MAAA,IAAI,EAAC,SALP;AAME,oBAAY,KAAKT,KAAL,CAAWa,KANzB;AAOE,MAAA,MAAM,EAAE,KAAKjB,UAPf;AAQE,MAAA,SAAS,EAAE,KAAKM,aARlB;AASE,MAAA,OAAO,EAAE,KAAKT,WAThB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAWG,KAAKO,KAAL,CAAWH,KAXd,CADF;AAeD;;AAjD+C","sourcesContent":["import \"./TextInput.scss\";\n\nimport React, { Component } from \"react\";\nimport { selectNode, removeSelection } from \"../utils\";\n\ntype Props = {\n  value: string;\n  onChange: (value: string) => void;\n  label: string;\n};\n\nexport class ProjectName extends Component<Props> {\n  private handleFocus = (event: React.FocusEvent<HTMLElement>) => {\n    selectNode(event.currentTarget);\n  };\n\n  private handleBlur = (event: React.FocusEvent<HTMLElement>) => {\n    const value = event.currentTarget.innerText.trim();\n    if (value !== this.props.value) {\n      this.props.onChange(value);\n    }\n    removeSelection();\n  };\n\n  private handleKeyDown = (event: React.KeyboardEvent<HTMLElement>) => {\n    if (event.key === \"Enter\") {\n      event.preventDefault();\n      if (event.nativeEvent.isComposing || event.keyCode === 229) {\n        return;\n      }\n      event.currentTarget.blur();\n    }\n  };\n  private makeEditable = (editable: HTMLSpanElement | null) => {\n    if (!editable) {\n      return;\n    }\n    try {\n      editable.contentEditable = \"plaintext-only\";\n    } catch {\n      editable.contentEditable = \"true\";\n    }\n  };\n\n  public render() {\n    return (\n      <span\n        suppressContentEditableWarning\n        ref={this.makeEditable}\n        data-type=\"wysiwyg\"\n        className=\"TextInput\"\n        role=\"textbox\"\n        aria-label={this.props.label}\n        onBlur={this.handleBlur}\n        onKeyDown={this.handleKeyDown}\n        onFocus={this.handleFocus}\n      >\n        {this.props.value}\n      </span>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}