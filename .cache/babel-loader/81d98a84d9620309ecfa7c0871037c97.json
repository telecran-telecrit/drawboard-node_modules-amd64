{"ast":null,"code":"import { getCommonBounds } from \"../element\";\nimport { getGlobalCSSVariable } from \"../utils\";\nimport { getLanguage } from \"../i18n\";\nexport const SCROLLBAR_MARGIN = 4;\nexport const SCROLLBAR_WIDTH = 6;\nexport const SCROLLBAR_COLOR = \"rgba(0,0,0,0.3)\";\nexport function getScrollBars(elements, viewportWidth, viewportHeight, {\n  scrollX,\n  scrollY,\n  zoom\n}) {\n  // This is the bounding box of all the elements\n  const [elementsMinX, elementsMinY, elementsMaxX, elementsMaxY] = getCommonBounds(elements); // Apply zoom\n\n  const viewportWidthWithZoom = viewportWidth / zoom;\n  const viewportHeightWithZoom = viewportHeight / zoom;\n  const viewportWidthDiff = viewportWidth - viewportWidthWithZoom;\n  const viewportHeightDiff = viewportHeight - viewportHeightWithZoom;\n  const safeArea = {\n    top: parseInt(getGlobalCSSVariable(\"sat\")),\n    bottom: parseInt(getGlobalCSSVariable(\"sab\")),\n    left: parseInt(getGlobalCSSVariable(\"sal\")),\n    right: parseInt(getGlobalCSSVariable(\"sar\"))\n  };\n  const isRTL = getLanguage().rtl; // The viewport is the rectangle currently visible for the user\n\n  const viewportMinX = -scrollX + viewportWidthDiff / 2 + safeArea.left;\n  const viewportMinY = -scrollY + viewportHeightDiff / 2 + safeArea.top;\n  const viewportMaxX = viewportMinX + viewportWidthWithZoom - safeArea.right;\n  const viewportMaxY = viewportMinY + viewportHeightWithZoom - safeArea.bottom; // The scene is the bounding box of both the elements and viewport\n\n  const sceneMinX = Math.min(elementsMinX, viewportMinX);\n  const sceneMinY = Math.min(elementsMinY, viewportMinY);\n  const sceneMaxX = Math.max(elementsMaxX, viewportMaxX);\n  const sceneMaxY = Math.max(elementsMaxY, viewportMaxY); // The scrollbar represents where the viewport is in relationship to the scene\n\n  return {\n    horizontal: viewportMinX === sceneMinX && viewportMaxX === sceneMaxX ? null : {\n      x: Math.max(safeArea.left, SCROLLBAR_MARGIN) + (viewportMinX - sceneMinX) / (sceneMaxX - sceneMinX) * viewportWidth,\n      y: viewportHeight - SCROLLBAR_WIDTH - Math.max(SCROLLBAR_MARGIN, safeArea.bottom),\n      width: (viewportMaxX - viewportMinX) / (sceneMaxX - sceneMinX) * viewportWidth - Math.max(SCROLLBAR_MARGIN * 2, safeArea.left + safeArea.right),\n      height: SCROLLBAR_WIDTH\n    },\n    vertical: viewportMinY === sceneMinY && viewportMaxY === sceneMaxY ? null : {\n      x: isRTL ? Math.max(safeArea.left, SCROLLBAR_MARGIN) : viewportWidth - SCROLLBAR_WIDTH - Math.max(safeArea.right, SCROLLBAR_MARGIN),\n      y: (viewportMinY - sceneMinY) / (sceneMaxY - sceneMinY) * viewportHeight + Math.max(safeArea.top, SCROLLBAR_MARGIN),\n      width: SCROLLBAR_WIDTH,\n      height: (viewportMaxY - viewportMinY) / (sceneMaxY - sceneMinY) * viewportHeight - Math.max(SCROLLBAR_MARGIN * 2, safeArea.top + safeArea.bottom)\n    }\n  };\n}\nexport function isOverScrollBars(scrollBars, x, y) {\n  const [isOverHorizontalScrollBar, isOverVerticalScrollBar] = [scrollBars.horizontal, scrollBars.vertical].map(scrollBar => {\n    return scrollBar && scrollBar.x <= x && x <= scrollBar.x + scrollBar.width && scrollBar.y <= y && y <= scrollBar.y + scrollBar.height;\n  });\n  return {\n    isOverHorizontalScrollBar,\n    isOverVerticalScrollBar\n  };\n}","map":{"version":3,"sources":["/home/pro/Solutions/drawboard-light/src/scene/scrollbars.ts"],"names":["getCommonBounds","getGlobalCSSVariable","getLanguage","SCROLLBAR_MARGIN","SCROLLBAR_WIDTH","SCROLLBAR_COLOR","getScrollBars","elements","viewportWidth","viewportHeight","scrollX","scrollY","zoom","elementsMinX","elementsMinY","elementsMaxX","elementsMaxY","viewportWidthWithZoom","viewportHeightWithZoom","viewportWidthDiff","viewportHeightDiff","safeArea","top","parseInt","bottom","left","right","isRTL","rtl","viewportMinX","viewportMinY","viewportMaxX","viewportMaxY","sceneMinX","Math","min","sceneMinY","sceneMaxX","max","sceneMaxY","horizontal","x","y","width","height","vertical","isOverScrollBars","scrollBars","isOverHorizontalScrollBar","isOverVerticalScrollBar","map","scrollBar"],"mappings":"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","sourcesContent":["import { ExcalidrawElement } from \"../element/types\";\nimport { getCommonBounds } from \"../element\";\nimport { FlooredNumber } from \"../types\";\nimport { ScrollBars } from \"./types\";\nimport { getGlobalCSSVariable } from \"../utils\";\nimport { getLanguage } from \"../i18n\";\n\nexport const SCROLLBAR_MARGIN = 4;\nexport const SCROLLBAR_WIDTH = 6;\nexport const SCROLLBAR_COLOR = \"rgba(0,0,0,0.3)\";\n\nexport function getScrollBars(\n  elements: readonly ExcalidrawElement[],\n  viewportWidth: number,\n  viewportHeight: number,\n  {\n    scrollX,\n    scrollY,\n    zoom,\n  }: {\n    scrollX: FlooredNumber;\n    scrollY: FlooredNumber;\n    zoom: number;\n  },\n): ScrollBars {\n  // This is the bounding box of all the elements\n  const [\n    elementsMinX,\n    elementsMinY,\n    elementsMaxX,\n    elementsMaxY,\n  ] = getCommonBounds(elements);\n\n  // Apply zoom\n  const viewportWidthWithZoom = viewportWidth / zoom;\n  const viewportHeightWithZoom = viewportHeight / zoom;\n\n  const viewportWidthDiff = viewportWidth - viewportWidthWithZoom;\n  const viewportHeightDiff = viewportHeight - viewportHeightWithZoom;\n\n  const safeArea = {\n    top: parseInt(getGlobalCSSVariable(\"sat\")),\n    bottom: parseInt(getGlobalCSSVariable(\"sab\")),\n    left: parseInt(getGlobalCSSVariable(\"sal\")),\n    right: parseInt(getGlobalCSSVariable(\"sar\")),\n  };\n\n  const isRTL = getLanguage().rtl;\n\n  // The viewport is the rectangle currently visible for the user\n  const viewportMinX = -scrollX + viewportWidthDiff / 2 + safeArea.left;\n  const viewportMinY = -scrollY + viewportHeightDiff / 2 + safeArea.top;\n  const viewportMaxX = viewportMinX + viewportWidthWithZoom - safeArea.right;\n  const viewportMaxY = viewportMinY + viewportHeightWithZoom - safeArea.bottom;\n\n  // The scene is the bounding box of both the elements and viewport\n  const sceneMinX = Math.min(elementsMinX, viewportMinX);\n  const sceneMinY = Math.min(elementsMinY, viewportMinY);\n  const sceneMaxX = Math.max(elementsMaxX, viewportMaxX);\n  const sceneMaxY = Math.max(elementsMaxY, viewportMaxY);\n\n  // The scrollbar represents where the viewport is in relationship to the scene\n\n  return {\n    horizontal:\n      viewportMinX === sceneMinX && viewportMaxX === sceneMaxX\n        ? null\n        : {\n            x:\n              Math.max(safeArea.left, SCROLLBAR_MARGIN) +\n              ((viewportMinX - sceneMinX) / (sceneMaxX - sceneMinX)) *\n                viewportWidth,\n            y:\n              viewportHeight -\n              SCROLLBAR_WIDTH -\n              Math.max(SCROLLBAR_MARGIN, safeArea.bottom),\n            width:\n              ((viewportMaxX - viewportMinX) / (sceneMaxX - sceneMinX)) *\n                viewportWidth -\n              Math.max(SCROLLBAR_MARGIN * 2, safeArea.left + safeArea.right),\n            height: SCROLLBAR_WIDTH,\n          },\n    vertical:\n      viewportMinY === sceneMinY && viewportMaxY === sceneMaxY\n        ? null\n        : {\n            x: isRTL\n              ? Math.max(safeArea.left, SCROLLBAR_MARGIN)\n              : viewportWidth -\n                SCROLLBAR_WIDTH -\n                Math.max(safeArea.right, SCROLLBAR_MARGIN),\n            y:\n              ((viewportMinY - sceneMinY) / (sceneMaxY - sceneMinY)) *\n                viewportHeight +\n              Math.max(safeArea.top, SCROLLBAR_MARGIN),\n            width: SCROLLBAR_WIDTH,\n            height:\n              ((viewportMaxY - viewportMinY) / (sceneMaxY - sceneMinY)) *\n                viewportHeight -\n              Math.max(SCROLLBAR_MARGIN * 2, safeArea.top + safeArea.bottom),\n          },\n  };\n}\n\nexport function isOverScrollBars(scrollBars: ScrollBars, x: number, y: number) {\n  const [isOverHorizontalScrollBar, isOverVerticalScrollBar] = [\n    scrollBars.horizontal,\n    scrollBars.vertical,\n  ].map((scrollBar) => {\n    return (\n      scrollBar &&\n      scrollBar.x <= x &&\n      x <= scrollBar.x + scrollBar.width &&\n      scrollBar.y <= y &&\n      y <= scrollBar.y + scrollBar.height\n    );\n  });\n\n  return {\n    isOverHorizontalScrollBar,\n    isOverVerticalScrollBar,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}