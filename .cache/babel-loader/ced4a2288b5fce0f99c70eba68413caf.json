{"ast":null,"code":"var _jsxFileName = \"/home/pro/Solutions/drawboard-light/src/actions/actionHistory.tsx\";\nimport React from \"react\";\nimport { undo, redo } from \"../components/icons\";\nimport { ToolButton } from \"../components/ToolButton\";\nimport { t } from \"../i18n\";\nimport { KEYS } from \"../keys\";\nimport { getElementMap } from \"../element\";\nimport { newElementWith } from \"../element/mutateElement\";\n\nconst writeData = (prevElements, appState, updater) => {\n  const commitToHistory = false;\n\n  if (!appState.multiElement && !appState.resizingElement && !appState.editingElement && !appState.draggingElement) {\n    const data = updater();\n\n    if (data === null) {\n      return {\n        commitToHistory\n      };\n    }\n\n    const prevElementMap = getElementMap(prevElements);\n    const nextElements = data.elements;\n    const nextElementMap = getElementMap(nextElements);\n    return {\n      elements: nextElements.map(nextElement => newElementWith(prevElementMap[nextElement.id] || nextElement, nextElement)).concat(prevElements.filter(prevElement => !nextElementMap.hasOwnProperty(prevElement.id)).map(prevElement => newElementWith(prevElement, {\n        isDeleted: true\n      }))),\n      appState: { ...appState,\n        ...data.appState\n      },\n      commitToHistory\n    };\n  }\n\n  return {\n    commitToHistory\n  };\n};\n\nconst testUndo = shift => event => event[KEYS.CTRL_OR_CMD] && /z/i.test(event.key) && event.shiftKey === shift;\n\nexport const createUndoAction = history => ({\n  name: \"undo\",\n  perform: (elements, appState) => writeData(elements, appState, () => history.undoOnce()),\n  keyTest: testUndo(false),\n  PanelComponent: ({\n    updateData\n  }) => /*#__PURE__*/React.createElement(ToolButton, {\n    type: \"button\",\n    icon: undo,\n    \"aria-label\": t(\"buttons.undo\"),\n    onClick: updateData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 5\n    }\n  }),\n  commitToHistory: () => false\n});\nexport const createRedoAction = history => ({\n  name: \"redo\",\n  perform: (elements, appState) => writeData(elements, appState, () => history.redoOnce()),\n  keyTest: testUndo(true),\n  PanelComponent: ({\n    updateData\n  }) => /*#__PURE__*/React.createElement(ToolButton, {\n    type: \"button\",\n    icon: redo,\n    \"aria-label\": t(\"buttons.redo\"),\n    onClick: updateData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 5\n    }\n  }),\n  commitToHistory: () => false\n});","map":{"version":3,"sources":["/home/pro/Solutions/drawboard-light/src/actions/actionHistory.tsx"],"names":["React","undo","redo","ToolButton","t","KEYS","getElementMap","newElementWith","writeData","prevElements","appState","updater","commitToHistory","multiElement","resizingElement","editingElement","draggingElement","data","prevElementMap","nextElements","elements","nextElementMap","map","nextElement","id","concat","filter","prevElement","hasOwnProperty","isDeleted","testUndo","shift","event","CTRL_OR_CMD","test","key","shiftKey","createUndoAction","history","name","perform","undoOnce","keyTest","PanelComponent","updateData","createRedoAction","redoOnce"],"mappings":"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","sourcesContent":["import { Action, ActionResult } from \"./types\";\nimport React from \"react\";\nimport { undo, redo } from \"../components/icons\";\nimport { ToolButton } from \"../components/ToolButton\";\nimport { t } from \"../i18n\";\nimport { SceneHistory } from \"../history\";\nimport { ExcalidrawElement } from \"../element/types\";\nimport { AppState } from \"../types\";\nimport { KEYS } from \"../keys\";\nimport { getElementMap } from \"../element\";\nimport { newElementWith } from \"../element/mutateElement\";\n\nconst writeData = (\n  prevElements: readonly ExcalidrawElement[],\n  appState: AppState,\n  updater: () => {\n    elements: ExcalidrawElement[];\n    appState: AppState;\n  } | null,\n): ActionResult => {\n  const commitToHistory = false;\n  if (\n    !appState.multiElement &&\n    !appState.resizingElement &&\n    !appState.editingElement &&\n    !appState.draggingElement\n  ) {\n    const data = updater();\n    if (data === null) {\n      return { commitToHistory };\n    }\n\n    const prevElementMap = getElementMap(prevElements);\n    const nextElements = data.elements;\n    const nextElementMap = getElementMap(nextElements);\n    return {\n      elements: nextElements\n        .map((nextElement) =>\n          newElementWith(\n            prevElementMap[nextElement.id] || nextElement,\n            nextElement,\n          ),\n        )\n        .concat(\n          prevElements\n            .filter(\n              (prevElement) => !nextElementMap.hasOwnProperty(prevElement.id),\n            )\n            .map((prevElement) =>\n              newElementWith(prevElement, { isDeleted: true }),\n            ),\n        ),\n      appState: { ...appState, ...data.appState },\n      commitToHistory,\n    };\n  }\n  return { commitToHistory };\n};\n\nconst testUndo = (shift: boolean) => (event: KeyboardEvent) =>\n  event[KEYS.CTRL_OR_CMD] && /z/i.test(event.key) && event.shiftKey === shift;\n\ntype ActionCreator = (history: SceneHistory) => Action;\n\nexport const createUndoAction: ActionCreator = (history) => ({\n  name: \"undo\",\n  perform: (elements, appState) =>\n    writeData(elements, appState, () => history.undoOnce()),\n  keyTest: testUndo(false),\n  PanelComponent: ({ updateData }) => (\n    <ToolButton\n      type=\"button\"\n      icon={undo}\n      aria-label={t(\"buttons.undo\")}\n      onClick={updateData}\n    />\n  ),\n  commitToHistory: () => false,\n});\n\nexport const createRedoAction: ActionCreator = (history) => ({\n  name: \"redo\",\n  perform: (elements, appState) =>\n    writeData(elements, appState, () => history.redoOnce()),\n  keyTest: testUndo(true),\n  PanelComponent: ({ updateData }) => (\n    <ToolButton\n      type=\"button\"\n      icon={redo}\n      aria-label={t(\"buttons.redo\")}\n      onClick={updateData}\n    />\n  ),\n  commitToHistory: () => false,\n});\n"]},"metadata":{},"sourceType":"module"}