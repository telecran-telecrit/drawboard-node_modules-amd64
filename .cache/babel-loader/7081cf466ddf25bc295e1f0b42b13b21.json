{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { basename, relative } from '@sentry/utils';\n/** Rewrite event frames paths */\n\nvar RewriteFrames =\n/** @class */\nfunction () {\n  /**\n   * @inheritDoc\n   */\n  function RewriteFrames(options) {\n    var _this = this;\n\n    if (options === void 0) {\n      options = {};\n    }\n    /**\n     * @inheritDoc\n     */\n\n\n    this.name = RewriteFrames.id;\n    /**\n     * @inheritDoc\n     */\n\n    this._iteratee = function (frame) {\n      if (!frame.filename) {\n        return frame;\n      } // Check if the frame filename begins with `/` or a Windows-style prefix such as `C:\\`\n\n\n      var isWindowsFrame = /^[A-Z]:\\\\/.test(frame.filename);\n      var startsWithSlash = /^\\//.test(frame.filename);\n\n      if (frame.filename && (isWindowsFrame || startsWithSlash)) {\n        var filename = isWindowsFrame ? frame.filename.replace(/^[A-Z]:/, '') // remove Windows-style prefix\n        .replace(/\\\\/g, '/') // replace all `\\\\` instances with `/`\n        : frame.filename;\n        var base = _this._root ? relative(_this._root, filename) : basename(filename);\n        frame.filename = \"app:///\" + base;\n      }\n\n      return frame;\n    };\n\n    if (options.root) {\n      this._root = options.root;\n    }\n\n    if (options.iteratee) {\n      this._iteratee = options.iteratee;\n    }\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  RewriteFrames.prototype.setupOnce = function (addGlobalEventProcessor, getCurrentHub) {\n    addGlobalEventProcessor(function (event) {\n      var self = getCurrentHub().getIntegration(RewriteFrames);\n\n      if (self) {\n        return self.process(event);\n      }\n\n      return event;\n    });\n  };\n  /** JSDoc */\n\n\n  RewriteFrames.prototype.process = function (event) {\n    if (event.exception && Array.isArray(event.exception.values)) {\n      return this._processExceptionsEvent(event);\n    }\n\n    if (event.stacktrace) {\n      return this._processStacktraceEvent(event);\n    }\n\n    return event;\n  };\n  /** JSDoc */\n\n\n  RewriteFrames.prototype._processExceptionsEvent = function (event) {\n    var _this = this;\n\n    try {\n      return tslib_1.__assign({}, event, {\n        exception: tslib_1.__assign({}, event.exception, {\n          // The check for this is performed inside `process` call itself, safe to skip here\n          // tslint:disable-next-line:no-non-null-assertion\n          values: event.exception.values.map(function (value) {\n            return tslib_1.__assign({}, value, {\n              stacktrace: _this._processStacktrace(value.stacktrace)\n            });\n          })\n        })\n      });\n    } catch (_oO) {\n      return event;\n    }\n  };\n  /** JSDoc */\n\n\n  RewriteFrames.prototype._processStacktraceEvent = function (event) {\n    try {\n      return tslib_1.__assign({}, event, {\n        stacktrace: this._processStacktrace(event.stacktrace)\n      });\n    } catch (_oO) {\n      return event;\n    }\n  };\n  /** JSDoc */\n\n\n  RewriteFrames.prototype._processStacktrace = function (stacktrace) {\n    var _this = this;\n\n    return tslib_1.__assign({}, stacktrace, {\n      frames: stacktrace && stacktrace.frames && stacktrace.frames.map(function (f) {\n        return _this._iteratee(f);\n      })\n    });\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  RewriteFrames.id = 'RewriteFrames';\n  return RewriteFrames;\n}();\n\nexport { RewriteFrames };","map":{"version":3,"sources":["../src/rewriteframes.ts"],"names":[],"mappings":"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","sourcesContent":["import { Event, EventProcessor, Hub, Integration, StackFrame, Stacktrace } from '@sentry/types';\nimport { basename, relative } from '@sentry/utils';\n\ntype StackFrameIteratee = (frame: StackFrame) => StackFrame;\n\n/** Rewrite event frames paths */\nexport class RewriteFrames implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public name: string = RewriteFrames.id;\n\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'RewriteFrames';\n\n  /**\n   * @inheritDoc\n   */\n  private readonly _root?: string;\n\n  /**\n   * @inheritDoc\n   */\n  private readonly _iteratee: StackFrameIteratee = (frame: StackFrame) => {\n    if (!frame.filename) {\n      return frame;\n    }\n    // Check if the frame filename begins with `/` or a Windows-style prefix such as `C:\\`\n    const isWindowsFrame = /^[A-Z]:\\\\/.test(frame.filename);\n    const startsWithSlash = /^\\//.test(frame.filename);\n    if (frame.filename && (isWindowsFrame || startsWithSlash)) {\n      const filename = isWindowsFrame\n        ? frame.filename\n            .replace(/^[A-Z]:/, '') // remove Windows-style prefix\n            .replace(/\\\\/g, '/') // replace all `\\\\` instances with `/`\n        : frame.filename;\n      const base = this._root ? relative(this._root, filename) : basename(filename);\n      frame.filename = `app:///${base}`;\n    }\n    return frame;\n  };\n\n  /**\n   * @inheritDoc\n   */\n  public constructor(options: { root?: string; iteratee?: StackFrameIteratee } = {}) {\n    if (options.root) {\n      this._root = options.root;\n    }\n    if (options.iteratee) {\n      this._iteratee = options.iteratee;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(addGlobalEventProcessor: (callback: EventProcessor) => void, getCurrentHub: () => Hub): void {\n    addGlobalEventProcessor(event => {\n      const self = getCurrentHub().getIntegration(RewriteFrames);\n      if (self) {\n        return self.process(event);\n      }\n      return event;\n    });\n  }\n\n  /** JSDoc */\n  public process(event: Event): Event {\n    if (event.exception && Array.isArray(event.exception.values)) {\n      return this._processExceptionsEvent(event);\n    }\n\n    if (event.stacktrace) {\n      return this._processStacktraceEvent(event);\n    }\n\n    return event;\n  }\n\n  /** JSDoc */\n  private _processExceptionsEvent(event: Event): Event {\n    try {\n      return {\n        ...event,\n        exception: {\n          ...event.exception,\n          // The check for this is performed inside `process` call itself, safe to skip here\n          // tslint:disable-next-line:no-non-null-assertion\n          values: event.exception!.values!.map(value => ({\n            ...value,\n            stacktrace: this._processStacktrace(value.stacktrace),\n          })),\n        },\n      };\n    } catch (_oO) {\n      return event;\n    }\n  }\n\n  /** JSDoc */\n  private _processStacktraceEvent(event: Event): Event {\n    try {\n      return {\n        ...event,\n        stacktrace: this._processStacktrace(event.stacktrace),\n      };\n    } catch (_oO) {\n      return event;\n    }\n  }\n\n  /** JSDoc */\n  private _processStacktrace(stacktrace?: Stacktrace): Stacktrace {\n    return {\n      ...stacktrace,\n      frames: stacktrace && stacktrace.frames && stacktrace.frames.map(f => this._iteratee(f)),\n    };\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}