{"ast":null,"code":"import _objectSpread from \"/home/pro/Solutions/drawboard-light/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _regeneratorRuntime from \"/home/pro/Solutions/drawboard-light/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/pro/Solutions/drawboard-light/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { getDefaultAppState } from \"../appState\";\nimport { exportToCanvas, exportToSvg } from \"../scene/export\";\nimport { fileSave } from \"browser-nativefs\";\nimport { t } from \"../i18n\";\nimport { copyCanvasToClipboardAsPng } from \"../clipboard\";\nimport { serializeAsJSON } from \"./json\";\nimport { restore } from \"./restore\";\nimport { restoreFromLocalStorage } from \"./localStorage\";\nexport { loadFromBlob } from \"./blob\";\nexport { saveAsJSON, loadFromJSON } from \"./json\";\nexport { saveToLocalStorage } from \"./localStorage\";\nvar BACKEND_GET = \"https://json.excalidraw.com/api/v1/\";\nvar BACKEND_V2_POST = \"https://json.excalidraw.com/api/v2/post/\";\nvar BACKEND_V2_GET = \"https://json.excalidraw.com/api/v2/\";\nexport var SOCKET_SERVER = \"https://excalidraw-socket.herokuapp.com\";\n// TODO: Defined globally, since file handles aren't yet serializable.\n// Once `FileSystemFileHandle` can be serialized, make this\n// part of `AppState`.\nwindow.handle = null;\n\nfunction byteToHex(byte) {\n  return \"0\".concat(byte.toString(16)).slice(-2);\n}\n\nfunction generateRandomID() {\n  return _generateRandomID.apply(this, arguments);\n}\n\nfunction _generateRandomID() {\n  _generateRandomID = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee() {\n    var arr;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            arr = new Uint8Array(10);\n            window.crypto.getRandomValues(arr);\n            return _context.abrupt(\"return\", Array.from(arr, byteToHex).join(\"\"));\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _generateRandomID.apply(this, arguments);\n}\n\nfunction generateEncryptionKey() {\n  return _generateEncryptionKey.apply(this, arguments);\n}\n\nfunction _generateEncryptionKey() {\n  _generateEncryptionKey = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2() {\n    var key;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return window.crypto.subtle.generateKey({\n              name: \"AES-GCM\",\n              length: 128\n            }, true, // extractable\n            [\"encrypt\", \"decrypt\"]);\n\n          case 2:\n            key = _context2.sent;\n            _context2.next = 5;\n            return window.crypto.subtle.exportKey(\"jwk\", key);\n\n          case 5:\n            return _context2.abrupt(\"return\", _context2.sent.k);\n\n          case 6:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _generateEncryptionKey.apply(this, arguments);\n}\n\nfunction createIV() {\n  var arr = new Uint8Array(12);\n  return window.crypto.getRandomValues(arr);\n}\n\nexport function getCollaborationLinkData(link) {\n  if (link.length === 0) {\n    return;\n  }\n\n  var hash = new URL(link).hash;\n  return hash.match(/^#room=([a-zA-Z0-9_-]+),([a-zA-Z0-9_-]+)$/);\n}\nexport function generateCollaborationLink() {\n  return _generateCollaborationLink.apply(this, arguments);\n}\n\nfunction _generateCollaborationLink() {\n  _generateCollaborationLink = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee3() {\n    var id, key;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return generateRandomID();\n\n          case 2:\n            id = _context3.sent;\n            _context3.next = 5;\n            return generateEncryptionKey();\n\n          case 5:\n            key = _context3.sent;\n            return _context3.abrupt(\"return\", \"\".concat(window.location.href, \"#room=\").concat(id, \",\").concat(key));\n\n          case 7:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _generateCollaborationLink.apply(this, arguments);\n}\n\nfunction getImportedKey(_x, _x2) {\n  return _getImportedKey.apply(this, arguments);\n}\n\nfunction _getImportedKey() {\n  _getImportedKey = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee4(key, usage) {\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.next = 2;\n            return window.crypto.subtle.importKey(\"jwk\", {\n              alg: \"A128GCM\",\n              ext: true,\n              k: key,\n              key_ops: [\"encrypt\", \"decrypt\"],\n              kty: \"oct\"\n            }, {\n              name: \"AES-GCM\",\n              length: 128\n            }, false, // extractable\n            [usage]);\n\n          case 2:\n            return _context4.abrupt(\"return\", _context4.sent);\n\n          case 3:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n  return _getImportedKey.apply(this, arguments);\n}\n\nexport function encryptAESGEM(_x3, _x4) {\n  return _encryptAESGEM.apply(this, arguments);\n}\n\nfunction _encryptAESGEM() {\n  _encryptAESGEM = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee5(data, key) {\n    var importedKey, iv;\n    return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            _context5.next = 2;\n            return getImportedKey(key, \"encrypt\");\n\n          case 2:\n            importedKey = _context5.sent;\n            iv = createIV();\n            _context5.next = 6;\n            return window.crypto.subtle.encrypt({\n              name: \"AES-GCM\",\n              iv: iv\n            }, importedKey, data);\n\n          case 6:\n            _context5.t0 = _context5.sent;\n            _context5.t1 = iv;\n            return _context5.abrupt(\"return\", {\n              data: _context5.t0,\n              iv: _context5.t1\n            });\n\n          case 9:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5);\n  }));\n  return _encryptAESGEM.apply(this, arguments);\n}\n\nexport function decryptAESGEM(_x5, _x6, _x7) {\n  return _decryptAESGEM.apply(this, arguments);\n}\n\nfunction _decryptAESGEM() {\n  _decryptAESGEM = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee6(data, key, iv) {\n    var importedKey, decrypted, decodedData;\n    return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            _context6.prev = 0;\n            _context6.next = 3;\n            return getImportedKey(key, \"decrypt\");\n\n          case 3:\n            importedKey = _context6.sent;\n            _context6.next = 6;\n            return window.crypto.subtle.decrypt({\n              name: \"AES-GCM\",\n              iv: iv\n            }, importedKey, data);\n\n          case 6:\n            decrypted = _context6.sent;\n            decodedData = new TextDecoder(\"utf-8\").decode(new Uint8Array(decrypted));\n            return _context6.abrupt(\"return\", JSON.parse(decodedData));\n\n          case 11:\n            _context6.prev = 11;\n            _context6.t0 = _context6[\"catch\"](0);\n            window.alert(t(\"alerts.decryptFailed\"));\n            console.error(_context6.t0);\n\n          case 15:\n            return _context6.abrupt(\"return\", {\n              type: \"INVALID_RESPONSE\"\n            });\n\n          case 16:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, _callee6, null, [[0, 11]]);\n  }));\n  return _decryptAESGEM.apply(this, arguments);\n}\n\nexport function exportToBackend(_x8, _x9) {\n  return _exportToBackend.apply(this, arguments);\n}\n\nfunction _exportToBackend() {\n  _exportToBackend = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee7(elements, appState) {\n    var json, encoded, key, iv, encrypted, exportedKey, response, _json, url, urlString;\n\n    return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n      while (1) {\n        switch (_context7.prev = _context7.next) {\n          case 0:\n            json = serializeAsJSON(elements, appState);\n            encoded = new TextEncoder().encode(json);\n            _context7.next = 4;\n            return window.crypto.subtle.generateKey({\n              name: \"AES-GCM\",\n              length: 128\n            }, true, // extractable\n            [\"encrypt\", \"decrypt\"]);\n\n          case 4:\n            key = _context7.sent;\n            // The iv is set to 0. We are never going to reuse the same key so we don't\n            // need to have an iv. (I hope that's correct...)\n            iv = new Uint8Array(12); // We use symmetric encryption. AES-GCM is the recommended algorithm and\n            // includes checks that the ciphertext has not been modified by an attacker.\n\n            _context7.next = 8;\n            return window.crypto.subtle.encrypt({\n              name: \"AES-GCM\",\n              iv: iv\n            }, key, encoded);\n\n          case 8:\n            encrypted = _context7.sent;\n            _context7.next = 11;\n            return window.crypto.subtle.exportKey(\"jwk\", key);\n\n          case 11:\n            exportedKey = _context7.sent;\n            _context7.prev = 12;\n            _context7.next = 15;\n            return fetch(BACKEND_V2_POST, {\n              method: \"POST\",\n              body: encrypted\n            });\n\n          case 15:\n            response = _context7.sent;\n            _context7.next = 18;\n            return response.json();\n\n          case 18:\n            _json = _context7.sent;\n\n            if (_json.id) {\n              url = new URL(window.location.href); // We need to store the key (and less importantly the id) as hash instead\n              // of queryParam in order to never send it to the server\n\n              url.hash = \"json=\".concat(_json.id, \",\").concat(exportedKey.k);\n              urlString = url.toString();\n              window.prompt(\"\\uD83D\\uDD12\".concat(t(\"alerts.uploadedSecurly\")), urlString);\n            } else {\n              window.alert(t(\"alerts.couldNotCreateShareableLink\"));\n            }\n\n            _context7.next = 26;\n            break;\n\n          case 22:\n            _context7.prev = 22;\n            _context7.t0 = _context7[\"catch\"](12);\n            console.error(_context7.t0);\n            window.alert(t(\"alerts.couldNotCreateShareableLink\"));\n\n          case 26:\n          case \"end\":\n            return _context7.stop();\n        }\n      }\n    }, _callee7, null, [[12, 22]]);\n  }));\n  return _exportToBackend.apply(this, arguments);\n}\n\nexport function importFromBackend(_x10, _x11) {\n  return _importFromBackend.apply(this, arguments);\n}\n\nfunction _importFromBackend() {\n  _importFromBackend = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee8(id, privateKey) {\n    var elements, appState, response, data, buffer, key, iv, decrypted, string;\n    return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n      while (1) {\n        switch (_context8.prev = _context8.next) {\n          case 0:\n            elements = [];\n            appState = getDefaultAppState();\n            _context8.prev = 2;\n            _context8.next = 5;\n            return fetch(privateKey ? \"\".concat(BACKEND_V2_GET).concat(id) : \"\".concat(BACKEND_GET).concat(id, \".json\"));\n\n          case 5:\n            response = _context8.sent;\n\n            if (response.ok) {\n              _context8.next = 9;\n              break;\n            }\n\n            window.alert(t(\"alerts.importBackendFailed\"));\n            return _context8.abrupt(\"return\", restore(elements, appState, {\n              scrollToContent: true\n            }));\n\n          case 9:\n            if (!privateKey) {\n              _context8.next = 24;\n              break;\n            }\n\n            _context8.next = 12;\n            return response.arrayBuffer();\n\n          case 12:\n            buffer = _context8.sent;\n            _context8.next = 15;\n            return getImportedKey(privateKey, \"decrypt\");\n\n          case 15:\n            key = _context8.sent;\n            iv = new Uint8Array(12);\n            _context8.next = 19;\n            return window.crypto.subtle.decrypt({\n              name: \"AES-GCM\",\n              iv: iv\n            }, key, buffer);\n\n          case 19:\n            decrypted = _context8.sent;\n            // We need to convert the decrypted array buffer to a string\n            string = new window.TextDecoder(\"utf-8\").decode(new Uint8Array(decrypted));\n            data = JSON.parse(string);\n            _context8.next = 27;\n            break;\n\n          case 24:\n            _context8.next = 26;\n            return response.json();\n\n          case 26:\n            data = _context8.sent;\n\n          case 27:\n            elements = data.elements || elements;\n            appState = data.appState || appState;\n            _context8.next = 35;\n            break;\n\n          case 31:\n            _context8.prev = 31;\n            _context8.t0 = _context8[\"catch\"](2);\n            window.alert(t(\"alerts.importBackendFailed\"));\n            console.error(_context8.t0);\n\n          case 35:\n            _context8.prev = 35;\n            return _context8.abrupt(\"return\", restore(elements, appState, {\n              scrollToContent: true\n            }));\n\n          case 38:\n          case \"end\":\n            return _context8.stop();\n        }\n      }\n    }, _callee8, null, [[2, 31, 35, 38]]);\n  }));\n  return _importFromBackend.apply(this, arguments);\n}\n\nexport function exportCanvas(_x12, _x13, _x14, _x15, _x16) {\n  return _exportCanvas.apply(this, arguments);\n}\n\nfunction _exportCanvas() {\n  _exportCanvas = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee10(type, elements, appState, canvas, _ref) {\n    var exportBackground, _ref$exportPadding, exportPadding, viewBackgroundColor, name, _ref$scale, scale, tempSvg, tempCanvas, fileName, _appState;\n\n    return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n      while (1) {\n        switch (_context10.prev = _context10.next) {\n          case 0:\n            exportBackground = _ref.exportBackground, _ref$exportPadding = _ref.exportPadding, exportPadding = _ref$exportPadding === void 0 ? 10 : _ref$exportPadding, viewBackgroundColor = _ref.viewBackgroundColor, name = _ref.name, _ref$scale = _ref.scale, scale = _ref$scale === void 0 ? 1 : _ref$scale;\n\n            if (elements.length) {\n              _context10.next = 3;\n              break;\n            }\n\n            return _context10.abrupt(\"return\", window.alert(t(\"alerts.cannotExportEmptyCanvas\")));\n\n          case 3:\n            if (!(type === \"svg\")) {\n              _context10.next = 8;\n              break;\n            }\n\n            tempSvg = exportToSvg(elements, {\n              exportBackground: exportBackground,\n              viewBackgroundColor: viewBackgroundColor,\n              exportPadding: exportPadding\n            });\n            _context10.next = 7;\n            return fileSave(new Blob([tempSvg.outerHTML], {\n              type: \"image/svg+xml\"\n            }), {\n              fileName: \"\".concat(name, \".svg\")\n            });\n\n          case 7:\n            return _context10.abrupt(\"return\");\n\n          case 8:\n            tempCanvas = exportToCanvas(elements, appState, {\n              exportBackground: exportBackground,\n              viewBackgroundColor: viewBackgroundColor,\n              exportPadding: exportPadding,\n              scale: scale\n            });\n            tempCanvas.style.display = \"none\";\n            document.body.appendChild(tempCanvas);\n\n            if (type === \"png\") {\n              fileName = \"\".concat(name, \".png\");\n              tempCanvas.toBlob(\n              /*#__PURE__*/\n              function () {\n                var _ref2 = _asyncToGenerator(\n                /*#__PURE__*/\n                _regeneratorRuntime.mark(function _callee9(blob) {\n                  return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n                    while (1) {\n                      switch (_context9.prev = _context9.next) {\n                        case 0:\n                          if (!blob) {\n                            _context9.next = 3;\n                            break;\n                          }\n\n                          _context9.next = 3;\n                          return fileSave(blob, {\n                            fileName: fileName\n                          });\n\n                        case 3:\n                        case \"end\":\n                          return _context9.stop();\n                      }\n                    }\n                  }, _callee9);\n                }));\n\n                return function (_x19) {\n                  return _ref2.apply(this, arguments);\n                };\n              }());\n            } else if (type === \"clipboard\") {\n              try {\n                copyCanvasToClipboardAsPng(tempCanvas);\n              } catch (_unused) {\n                window.alert(t(\"alerts.couldNotCopyToClipboard\"));\n              }\n            } else if (type === \"backend\") {\n              _appState = getDefaultAppState();\n\n              if (exportBackground) {\n                _appState.viewBackgroundColor = viewBackgroundColor;\n              }\n\n              exportToBackend(elements, _appState);\n            } // clean up the DOM\n\n\n            if (tempCanvas !== canvas) {\n              tempCanvas.remove();\n            }\n\n          case 13:\n          case \"end\":\n            return _context10.stop();\n        }\n      }\n    }, _callee10);\n  }));\n  return _exportCanvas.apply(this, arguments);\n}\n\nexport function loadScene(_x17, _x18) {\n  return _loadScene.apply(this, arguments);\n}\n\nfunction _loadScene() {\n  _loadScene = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee11(id, privateKey) {\n    var data, selectedId;\n    return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n      while (1) {\n        switch (_context11.prev = _context11.next) {\n          case 0:\n            if (!(id != null)) {\n              _context11.next = 8;\n              break;\n            }\n\n            _context11.next = 3;\n            return importFromBackend(id, privateKey);\n\n          case 3:\n            data = _context11.sent;\n            selectedId = id;\n            window.history.replaceState({}, \"Excalidraw\", window.location.origin);\n            _context11.next = 9;\n            break;\n\n          case 8:\n            data = restoreFromLocalStorage();\n\n          case 9:\n            return _context11.abrupt(\"return\", {\n              elements: data.elements,\n              appState: data.appState && _objectSpread({}, data.appState, {\n                selectedId: selectedId\n              })\n            });\n\n          case 10:\n          case \"end\":\n            return _context11.stop();\n        }\n      }\n    }, _callee11);\n  }));\n  return _loadScene.apply(this, arguments);\n}","map":{"version":3,"sources":["/home/pro/Solutions/drawboard-light/src/data/index.ts"],"names":["getDefaultAppState","exportToCanvas","exportToSvg","fileSave","t","copyCanvasToClipboardAsPng","serializeAsJSON","restore","restoreFromLocalStorage","loadFromBlob","saveAsJSON","loadFromJSON","saveToLocalStorage","BACKEND_GET","BACKEND_V2_POST","BACKEND_V2_GET","SOCKET_SERVER","window","handle","byteToHex","byte","toString","slice","generateRandomID","arr","Uint8Array","crypto","getRandomValues","Array","from","join","generateEncryptionKey","subtle","generateKey","name","length","key","exportKey","k","createIV","getCollaborationLinkData","link","hash","URL","match","generateCollaborationLink","id","location","href","getImportedKey","usage","importKey","alg","ext","key_ops","kty","encryptAESGEM","data","importedKey","iv","encrypt","decryptAESGEM","decrypt","decrypted","decodedData","TextDecoder","decode","JSON","parse","alert","console","error","type","exportToBackend","elements","appState","json","encoded","TextEncoder","encode","encrypted","exportedKey","fetch","method","body","response","url","urlString","prompt","importFromBackend","privateKey","ok","scrollToContent","arrayBuffer","buffer","string","exportCanvas","canvas","exportBackground","exportPadding","viewBackgroundColor","scale","tempSvg","Blob","outerHTML","fileName","tempCanvas","style","display","document","appendChild","toBlob","blob","remove","loadScene","selectedId","history","replaceState","origin"],"mappings":"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","sourcesContent":["import { ExcalidrawElement } from \"../element/types\";\n\nimport { getDefaultAppState } from \"../appState\";\n\nimport { AppState } from \"../types\";\nimport { exportToCanvas, exportToSvg } from \"../scene/export\";\nimport { fileSave } from \"browser-nativefs\";\n\nimport { t } from \"../i18n\";\nimport { copyCanvasToClipboardAsPng } from \"../clipboard\";\nimport { serializeAsJSON } from \"./json\";\n\nimport { ExportType } from \"../scene/types\";\nimport { restore } from \"./restore\";\nimport { restoreFromLocalStorage } from \"./localStorage\";\n\nexport { loadFromBlob } from \"./blob\";\nexport { saveAsJSON, loadFromJSON } from \"./json\";\nexport { saveToLocalStorage } from \"./localStorage\";\n\nconst BACKEND_GET = \"https://json.excalidraw.com/api/v1/\";\n\nconst BACKEND_V2_POST = \"https://json.excalidraw.com/api/v2/post/\";\nconst BACKEND_V2_GET = \"https://json.excalidraw.com/api/v2/\";\n\nexport const SOCKET_SERVER = \"https://excalidraw-socket.herokuapp.com\";\n\nexport type EncryptedData = {\n  data: ArrayBuffer;\n  iv: Uint8Array;\n};\n\nexport type SocketUpdateData =\n  | {\n      type: \"SCENE_UPDATE\";\n      payload: {\n        elements: readonly ExcalidrawElement[];\n        appState: AppState | null;\n      };\n    }\n  | {\n      type: \"MOUSE_LOCATION\";\n      payload: {\n        socketID: string;\n        pointerCoords: { x: number; y: number };\n      };\n    }\n  | {\n      type: \"INVALID_RESPONSE\";\n    };\n\n// TODO: Defined globally, since file handles aren't yet serializable.\n// Once `FileSystemFileHandle` can be serialized, make this\n// part of `AppState`.\n(window as any).handle = null;\n\nfunction byteToHex(byte: number): string {\n  return `0${byte.toString(16)}`.slice(-2);\n}\n\nasync function generateRandomID() {\n  const arr = new Uint8Array(10);\n  window.crypto.getRandomValues(arr);\n  return Array.from(arr, byteToHex).join(\"\");\n}\n\nasync function generateEncryptionKey() {\n  const key = await window.crypto.subtle.generateKey(\n    {\n      name: \"AES-GCM\",\n      length: 128,\n    },\n    true, // extractable\n    [\"encrypt\", \"decrypt\"],\n  );\n  return (await window.crypto.subtle.exportKey(\"jwk\", key)).k;\n}\n\nfunction createIV() {\n  const arr = new Uint8Array(12);\n  return window.crypto.getRandomValues(arr);\n}\n\nexport function getCollaborationLinkData(link: string) {\n  if (link.length === 0) {\n    return;\n  }\n  const hash = new URL(link).hash;\n  return hash.match(/^#room=([a-zA-Z0-9_-]+),([a-zA-Z0-9_-]+)$/);\n}\n\nexport async function generateCollaborationLink() {\n  const id = await generateRandomID();\n  const key = await generateEncryptionKey();\n  return `${window.location.href}#room=${id},${key}`;\n}\n\nasync function getImportedKey(key: string, usage: string): Promise<CryptoKey> {\n  return await window.crypto.subtle.importKey(\n    \"jwk\",\n    {\n      alg: \"A128GCM\",\n      ext: true,\n      k: key,\n      key_ops: [\"encrypt\", \"decrypt\"],\n      kty: \"oct\",\n    },\n    {\n      name: \"AES-GCM\",\n      length: 128,\n    },\n    false, // extractable\n    [usage],\n  );\n}\n\nexport async function encryptAESGEM(\n  data: Uint8Array,\n  key: string,\n): Promise<EncryptedData> {\n  const importedKey = await getImportedKey(key, \"encrypt\");\n  const iv = createIV();\n  return {\n    data: await window.crypto.subtle.encrypt(\n      {\n        name: \"AES-GCM\",\n        iv,\n      },\n      importedKey,\n      data,\n    ),\n    iv,\n  };\n}\n\nexport async function decryptAESGEM(\n  data: ArrayBuffer,\n  key: string,\n  iv: Uint8Array,\n): Promise<SocketUpdateData> {\n  try {\n    const importedKey = await getImportedKey(key, \"decrypt\");\n    const decrypted = await window.crypto.subtle.decrypt(\n      {\n        name: \"AES-GCM\",\n        iv: iv,\n      },\n      importedKey,\n      data,\n    );\n\n    const decodedData = new TextDecoder(\"utf-8\").decode(\n      new Uint8Array(decrypted) as any,\n    );\n    return JSON.parse(decodedData);\n  } catch (error) {\n    window.alert(t(\"alerts.decryptFailed\"));\n    console.error(error);\n  }\n  return {\n    type: \"INVALID_RESPONSE\",\n  };\n}\n\nexport async function exportToBackend(\n  elements: readonly ExcalidrawElement[],\n  appState: AppState,\n) {\n  const json = serializeAsJSON(elements, appState);\n  const encoded = new TextEncoder().encode(json);\n\n  const key = await window.crypto.subtle.generateKey(\n    {\n      name: \"AES-GCM\",\n      length: 128,\n    },\n    true, // extractable\n    [\"encrypt\", \"decrypt\"],\n  );\n  // The iv is set to 0. We are never going to reuse the same key so we don't\n  // need to have an iv. (I hope that's correct...)\n  const iv = new Uint8Array(12);\n  // We use symmetric encryption. AES-GCM is the recommended algorithm and\n  // includes checks that the ciphertext has not been modified by an attacker.\n  const encrypted = await window.crypto.subtle.encrypt(\n    {\n      name: \"AES-GCM\",\n      iv: iv,\n    },\n    key,\n    encoded,\n  );\n  // We use jwk encoding to be able to extract just the base64 encoded key.\n  // We will hardcode the rest of the attributes when importing back the key.\n  const exportedKey = await window.crypto.subtle.exportKey(\"jwk\", key);\n\n  try {\n    const response = await fetch(BACKEND_V2_POST, {\n      method: \"POST\",\n      body: encrypted,\n    });\n    const json = await response.json();\n    if (json.id) {\n      const url = new URL(window.location.href);\n      // We need to store the key (and less importantly the id) as hash instead\n      // of queryParam in order to never send it to the server\n      url.hash = `json=${json.id},${exportedKey.k!}`;\n      const urlString = url.toString();\n\n      window.prompt(`🔒${t(\"alerts.uploadedSecurly\")}`, urlString);\n    } else {\n      window.alert(t(\"alerts.couldNotCreateShareableLink\"));\n    }\n  } catch (error) {\n    console.error(error);\n    window.alert(t(\"alerts.couldNotCreateShareableLink\"));\n  }\n}\n\nexport async function importFromBackend(\n  id: string | null,\n  privateKey: string | undefined,\n) {\n  let elements: readonly ExcalidrawElement[] = [];\n  let appState: AppState = getDefaultAppState();\n\n  try {\n    const response = await fetch(\n      privateKey ? `${BACKEND_V2_GET}${id}` : `${BACKEND_GET}${id}.json`,\n    );\n    if (!response.ok) {\n      window.alert(t(\"alerts.importBackendFailed\"));\n      return restore(elements, appState, { scrollToContent: true });\n    }\n    let data;\n    if (privateKey) {\n      const buffer = await response.arrayBuffer();\n      const key = await getImportedKey(privateKey, \"decrypt\");\n      const iv = new Uint8Array(12);\n      const decrypted = await window.crypto.subtle.decrypt(\n        {\n          name: \"AES-GCM\",\n          iv: iv,\n        },\n        key,\n        buffer,\n      );\n      // We need to convert the decrypted array buffer to a string\n      const string = new window.TextDecoder(\"utf-8\").decode(\n        new Uint8Array(decrypted) as any,\n      );\n      data = JSON.parse(string);\n    } else {\n      // Legacy format\n      data = await response.json();\n    }\n\n    elements = data.elements || elements;\n    appState = data.appState || appState;\n  } catch (error) {\n    window.alert(t(\"alerts.importBackendFailed\"));\n    console.error(error);\n  } finally {\n    return restore(elements, appState, { scrollToContent: true });\n  }\n}\n\nexport async function exportCanvas(\n  type: ExportType,\n  elements: readonly ExcalidrawElement[],\n  appState: AppState,\n  canvas: HTMLCanvasElement,\n  {\n    exportBackground,\n    exportPadding = 10,\n    viewBackgroundColor,\n    name,\n    scale = 1,\n  }: {\n    exportBackground: boolean;\n    exportPadding?: number;\n    viewBackgroundColor: string;\n    name: string;\n    scale?: number;\n  },\n) {\n  if (!elements.length) {\n    return window.alert(t(\"alerts.cannotExportEmptyCanvas\"));\n  }\n  // calculate smallest area to fit the contents in\n\n  if (type === \"svg\") {\n    const tempSvg = exportToSvg(elements, {\n      exportBackground,\n      viewBackgroundColor,\n      exportPadding,\n    });\n    await fileSave(new Blob([tempSvg.outerHTML], { type: \"image/svg+xml\" }), {\n      fileName: `${name}.svg`,\n    });\n    return;\n  }\n\n  const tempCanvas = exportToCanvas(elements, appState, {\n    exportBackground,\n    viewBackgroundColor,\n    exportPadding,\n    scale,\n  });\n  tempCanvas.style.display = \"none\";\n  document.body.appendChild(tempCanvas);\n\n  if (type === \"png\") {\n    const fileName = `${name}.png`;\n    tempCanvas.toBlob(async (blob: any) => {\n      if (blob) {\n        await fileSave(blob, {\n          fileName: fileName,\n        });\n      }\n    });\n  } else if (type === \"clipboard\") {\n    try {\n      copyCanvasToClipboardAsPng(tempCanvas);\n    } catch {\n      window.alert(t(\"alerts.couldNotCopyToClipboard\"));\n    }\n  } else if (type === \"backend\") {\n    const appState = getDefaultAppState();\n    if (exportBackground) {\n      appState.viewBackgroundColor = viewBackgroundColor;\n    }\n    exportToBackend(elements, appState);\n  }\n\n  // clean up the DOM\n  if (tempCanvas !== canvas) {\n    tempCanvas.remove();\n  }\n}\n\nexport async function loadScene(id: string | null, privateKey?: string) {\n  let data;\n  let selectedId;\n  if (id != null) {\n    // the private key is used to decrypt the content from the server, take\n    // extra care not to leak it\n    data = await importFromBackend(id, privateKey);\n    selectedId = id;\n    window.history.replaceState({}, \"Excalidraw\", window.location.origin);\n  } else {\n    data = restoreFromLocalStorage();\n  }\n\n  return {\n    elements: data.elements,\n    appState: data.appState && { ...data.appState, selectedId },\n  };\n}\n"]},"metadata":{},"sourceType":"module"}