{"ast":null,"code":"var _jsxFileName = \"/home/pro/Solutions/drawboard-light/src/components/HintViewer.tsx\";\nimport React from \"react\";\nimport { t } from \"../i18n\";\nimport { getSelectedElements } from \"../scene\";\nimport \"./HintViewer.css\";\n\nvar getHints = function getHints(_ref) {\n  var appState = _ref.appState,\n      elements = _ref.elements;\n  var elementType = appState.elementType,\n      isResizing = appState.isResizing;\n  var multiMode = appState.multiElement !== null;\n\n  if (elementType === \"arrow\" || elementType === \"line\") {\n    if (!multiMode) {\n      return t(\"hints.linearElement\");\n    }\n\n    return t(\"hints.linearElementMulti\");\n  }\n\n  if (isResizing) {\n    var selectedElements = getSelectedElements(elements, appState);\n\n    if (selectedElements.length === 1 && (selectedElements[0].type === \"arrow\" || selectedElements[0].type === \"line\") && selectedElements[0].points.length > 2) {\n      return null;\n    }\n\n    return t(\"hints.resize\");\n  }\n\n  return null;\n};\n\nexport var HintViewer = function HintViewer(_ref2) {\n  var appState = _ref2.appState,\n      elements = _ref2.elements;\n  var hint = getHints({\n    appState: appState,\n    elements: elements\n  });\n\n  if (!hint) {\n    return null;\n  }\n\n  return React.createElement(\"div\", {\n    className: \"HintViewer\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, hint));\n};","map":{"version":3,"sources":["/home/pro/Solutions/drawboard-light/src/components/HintViewer.tsx"],"names":["React","t","getSelectedElements","getHints","appState","elements","elementType","isResizing","multiMode","multiElement","selectedElements","length","type","points","HintViewer","hint"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,CAAT,QAAkB,SAAlB;AAEA,SAASC,mBAAT,QAAoC,UAApC;AAEA,OAAO,kBAAP;;AAQA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,OAAkC;AAAA,MAA/BC,QAA+B,QAA/BA,QAA+B;AAAA,MAArBC,QAAqB,QAArBA,QAAqB;AAAA,MACzCC,WADyC,GACbF,QADa,CACzCE,WADyC;AAAA,MAC5BC,UAD4B,GACbH,QADa,CAC5BG,UAD4B;AAEjD,MAAMC,SAAS,GAAGJ,QAAQ,CAACK,YAAT,KAA0B,IAA5C;;AACA,MAAIH,WAAW,KAAK,OAAhB,IAA2BA,WAAW,KAAK,MAA/C,EAAuD;AACrD,QAAI,CAACE,SAAL,EAAgB;AACd,aAAOP,CAAC,CAAC,qBAAD,CAAR;AACD;;AACD,WAAOA,CAAC,CAAC,0BAAD,CAAR;AACD;;AAED,MAAIM,UAAJ,EAAgB;AACd,QAAMG,gBAAgB,GAAGR,mBAAmB,CAACG,QAAD,EAAWD,QAAX,CAA5C;;AACA,QACEM,gBAAgB,CAACC,MAAjB,KAA4B,CAA5B,KACCD,gBAAgB,CAAC,CAAD,CAAhB,CAAoBE,IAApB,KAA6B,OAA7B,IACCF,gBAAgB,CAAC,CAAD,CAAhB,CAAoBE,IAApB,KAA6B,MAF/B,KAGAF,gBAAgB,CAAC,CAAD,CAAhB,CAAoBG,MAApB,CAA2BF,MAA3B,GAAoC,CAJtC,EAKE;AACA,aAAO,IAAP;AACD;;AACD,WAAOV,CAAC,CAAC,cAAD,CAAR;AACD;;AAED,SAAO,IAAP;AACD,CAxBD;;AA0BA,OAAO,IAAMa,UAAU,GAAG,SAAbA,UAAa,QAAkC;AAAA,MAA/BV,QAA+B,SAA/BA,QAA+B;AAAA,MAArBC,QAAqB,SAArBA,QAAqB;AAC1D,MAAMU,IAAI,GAAGZ,QAAQ,CAAC;AACpBC,IAAAA,QAAQ,EAARA,QADoB;AAEpBC,IAAAA,QAAQ,EAARA;AAFoB,GAAD,CAArB;;AAIA,MAAI,CAACU,IAAL,EAAW;AACT,WAAO,IAAP;AACD;;AAED,SACE;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAOA,IAAP,CADF,CADF;AAKD,CAdM","sourcesContent":["import React from \"react\";\nimport { t } from \"../i18n\";\nimport { ExcalidrawElement } from \"../element/types\";\nimport { getSelectedElements } from \"../scene\";\n\nimport \"./HintViewer.css\";\nimport { AppState } from \"../types\";\n\ninterface Hint {\n  appState: AppState;\n  elements: readonly ExcalidrawElement[];\n}\n\nconst getHints = ({ appState, elements }: Hint) => {\n  const { elementType, isResizing } = appState;\n  const multiMode = appState.multiElement !== null;\n  if (elementType === \"arrow\" || elementType === \"line\") {\n    if (!multiMode) {\n      return t(\"hints.linearElement\");\n    }\n    return t(\"hints.linearElementMulti\");\n  }\n\n  if (isResizing) {\n    const selectedElements = getSelectedElements(elements, appState);\n    if (\n      selectedElements.length === 1 &&\n      (selectedElements[0].type === \"arrow\" ||\n        selectedElements[0].type === \"line\") &&\n      selectedElements[0].points.length > 2\n    ) {\n      return null;\n    }\n    return t(\"hints.resize\");\n  }\n\n  return null;\n};\n\nexport const HintViewer = ({ appState, elements }: Hint) => {\n  const hint = getHints({\n    appState,\n    elements,\n  });\n  if (!hint) {\n    return null;\n  }\n\n  return (\n    <div className=\"HintViewer\">\n      <span>{hint}</span>\n    </div>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}