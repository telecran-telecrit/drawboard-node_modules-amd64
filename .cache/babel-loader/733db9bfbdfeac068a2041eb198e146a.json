{"ast":null,"code":"import _objectSpread from \"/home/pro/Solutions/drawboard-light/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { isTextElement, isExcalidrawElement, redrawTextBoundingBox } from \"../element\";\nimport { KEYS } from \"../keys\";\nimport { DEFAULT_FONT } from \"../appState\";\nimport { register } from \"./register\";\nvar copiedStyles = \"{}\";\nexport var actionCopyStyles = register({\n  name: \"copyStyles\",\n  perform: function perform(elements, appState) {\n    var element = elements.find(function (el) {\n      return appState.selectedElementIds[el.id];\n    });\n\n    if (element) {\n      copiedStyles = JSON.stringify(element);\n    }\n\n    return {};\n  },\n  contextItemLabel: \"labels.copyStyles\",\n  keyTest: function keyTest(event) {\n    return event[KEYS.CTRL_OR_CMD] && event.shiftKey && event.key === \"C\";\n  },\n  contextMenuOrder: 0\n});\nexport var actionPasteStyles = register({\n  name: \"pasteStyles\",\n  perform: function perform(elements, appState) {\n    var pastedElement = JSON.parse(copiedStyles);\n\n    if (!isExcalidrawElement(pastedElement)) {\n      return {\n        elements: elements\n      };\n    }\n\n    return {\n      elements: elements.map(function (element) {\n        if (appState.selectedElementIds[element.id]) {\n          var newElement = _objectSpread({}, element, {\n            backgroundColor: pastedElement === null || pastedElement === void 0 ? void 0 : pastedElement.backgroundColor,\n            strokeWidth: pastedElement === null || pastedElement === void 0 ? void 0 : pastedElement.strokeWidth,\n            strokeColor: pastedElement === null || pastedElement === void 0 ? void 0 : pastedElement.strokeColor,\n            fillStyle: pastedElement === null || pastedElement === void 0 ? void 0 : pastedElement.fillStyle,\n            opacity: pastedElement === null || pastedElement === void 0 ? void 0 : pastedElement.opacity,\n            roughness: pastedElement === null || pastedElement === void 0 ? void 0 : pastedElement.roughness\n          });\n\n          if (isTextElement(newElement)) {\n            newElement.font = (pastedElement === null || pastedElement === void 0 ? void 0 : pastedElement.font) || DEFAULT_FONT;\n            redrawTextBoundingBox(newElement);\n          }\n\n          return newElement;\n        }\n\n        return element;\n      })\n    };\n  },\n  commitToHistory: function commitToHistory() {\n    return true;\n  },\n  contextItemLabel: \"labels.pasteStyles\",\n  keyTest: function keyTest(event) {\n    return event[KEYS.CTRL_OR_CMD] && event.shiftKey && event.key === \"V\";\n  },\n  contextMenuOrder: 1\n});","map":{"version":3,"sources":["/home/pro/Solutions/drawboard-light/src/actions/actionStyles.ts"],"names":["isTextElement","isExcalidrawElement","redrawTextBoundingBox","KEYS","DEFAULT_FONT","register","copiedStyles","actionCopyStyles","name","perform","elements","appState","element","find","el","selectedElementIds","id","JSON","stringify","contextItemLabel","keyTest","event","CTRL_OR_CMD","shiftKey","key","contextMenuOrder","actionPasteStyles","pastedElement","parse","map","newElement","backgroundColor","strokeWidth","strokeColor","fillStyle","opacity","roughness","font","commitToHistory"],"mappings":"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","sourcesContent":["import {\n  isTextElement,\n  isExcalidrawElement,\n  redrawTextBoundingBox,\n} from \"../element\";\nimport { KEYS } from \"../keys\";\nimport { DEFAULT_FONT } from \"../appState\";\nimport { register } from \"./register\";\n\nlet copiedStyles: string = \"{}\";\n\nexport const actionCopyStyles = register({\n  name: \"copyStyles\",\n  perform: (elements, appState) => {\n    const element = elements.find(el => appState.selectedElementIds[el.id]);\n    if (element) {\n      copiedStyles = JSON.stringify(element);\n    }\n    return {};\n  },\n  contextItemLabel: \"labels.copyStyles\",\n  keyTest: event =>\n    event[KEYS.CTRL_OR_CMD] && event.shiftKey && event.key === \"C\",\n  contextMenuOrder: 0,\n});\n\nexport const actionPasteStyles = register({\n  name: \"pasteStyles\",\n  perform: (elements, appState) => {\n    const pastedElement = JSON.parse(copiedStyles);\n    if (!isExcalidrawElement(pastedElement)) {\n      return { elements };\n    }\n    return {\n      elements: elements.map(element => {\n        if (appState.selectedElementIds[element.id]) {\n          const newElement = {\n            ...element,\n            backgroundColor: pastedElement?.backgroundColor,\n            strokeWidth: pastedElement?.strokeWidth,\n            strokeColor: pastedElement?.strokeColor,\n            fillStyle: pastedElement?.fillStyle,\n            opacity: pastedElement?.opacity,\n            roughness: pastedElement?.roughness,\n          };\n          if (isTextElement(newElement)) {\n            newElement.font = pastedElement?.font || DEFAULT_FONT;\n            redrawTextBoundingBox(newElement);\n          }\n          return newElement;\n        }\n        return element;\n      }),\n    };\n  },\n  commitToHistory: () => true,\n  contextItemLabel: \"labels.pasteStyles\",\n  keyTest: event =>\n    event[KEYS.CTRL_OR_CMD] && event.shiftKey && event.key === \"V\",\n  contextMenuOrder: 1,\n});\n"]},"metadata":{},"sourceType":"module"}