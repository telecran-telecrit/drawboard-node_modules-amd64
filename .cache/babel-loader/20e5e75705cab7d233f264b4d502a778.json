{"ast":null,"code":"import { polygonHachureLines } from './scan-line-hachure';\nexport class HachureFiller {\n  constructor(helper) {\n    this.helper = helper;\n  }\n\n  fillPolygon(points, o) {\n    return this._fillPolygon(points, o);\n  }\n\n  _fillPolygon(points, o, connectEnds = false) {\n    const lines = polygonHachureLines(points, o);\n    const ops = this.renderLines(lines, o, connectEnds);\n    return {\n      type: 'fillSketch',\n      ops\n    };\n  }\n\n  renderLines(lines, o, connectEnds) {\n    let ops = [];\n    let prevPoint = null;\n\n    for (const line of lines) {\n      ops = ops.concat(this.helper.doubleLineOps(line[0][0], line[0][1], line[1][0], line[1][1], o));\n\n      if (connectEnds && prevPoint) {\n        ops = ops.concat(this.helper.doubleLineOps(prevPoint[0], prevPoint[1], line[0][0], line[0][1], o));\n      }\n\n      prevPoint = line[1];\n    }\n\n    return ops;\n  }\n\n}","map":{"version":3,"sources":["/home/pro/Solutions/drawboard-light/node_modules/roughjs/bin/fillers/hachure-filler.js"],"names":["polygonHachureLines","HachureFiller","constructor","helper","fillPolygon","points","o","_fillPolygon","connectEnds","lines","ops","renderLines","type","prevPoint","line","concat","doubleLineOps"],"mappings":"AAAA,SAASA,mBAAT,QAAoC,qBAApC;AACA,OAAO,MAAMC,aAAN,CAAoB;AACvBC,EAAAA,WAAW,CAACC,MAAD,EAAS;AAChB,SAAKA,MAAL,GAAcA,MAAd;AACH;;AACDC,EAAAA,WAAW,CAACC,MAAD,EAASC,CAAT,EAAY;AACnB,WAAO,KAAKC,YAAL,CAAkBF,MAAlB,EAA0BC,CAA1B,CAAP;AACH;;AACDC,EAAAA,YAAY,CAACF,MAAD,EAASC,CAAT,EAAYE,WAAW,GAAG,KAA1B,EAAiC;AACzC,UAAMC,KAAK,GAAGT,mBAAmB,CAACK,MAAD,EAASC,CAAT,CAAjC;AACA,UAAMI,GAAG,GAAG,KAAKC,WAAL,CAAiBF,KAAjB,EAAwBH,CAAxB,EAA2BE,WAA3B,CAAZ;AACA,WAAO;AAAEI,MAAAA,IAAI,EAAE,YAAR;AAAsBF,MAAAA;AAAtB,KAAP;AACH;;AACDC,EAAAA,WAAW,CAACF,KAAD,EAAQH,CAAR,EAAWE,WAAX,EAAwB;AAC/B,QAAIE,GAAG,GAAG,EAAV;AACA,QAAIG,SAAS,GAAG,IAAhB;;AACA,SAAK,MAAMC,IAAX,IAAmBL,KAAnB,EAA0B;AACtBC,MAAAA,GAAG,GAAGA,GAAG,CAACK,MAAJ,CAAW,KAAKZ,MAAL,CAAYa,aAAZ,CAA0BF,IAAI,CAAC,CAAD,CAAJ,CAAQ,CAAR,CAA1B,EAAsCA,IAAI,CAAC,CAAD,CAAJ,CAAQ,CAAR,CAAtC,EAAkDA,IAAI,CAAC,CAAD,CAAJ,CAAQ,CAAR,CAAlD,EAA8DA,IAAI,CAAC,CAAD,CAAJ,CAAQ,CAAR,CAA9D,EAA0ER,CAA1E,CAAX,CAAN;;AACA,UAAIE,WAAW,IAAIK,SAAnB,EAA8B;AAC1BH,QAAAA,GAAG,GAAGA,GAAG,CAACK,MAAJ,CAAW,KAAKZ,MAAL,CAAYa,aAAZ,CAA0BH,SAAS,CAAC,CAAD,CAAnC,EAAwCA,SAAS,CAAC,CAAD,CAAjD,EAAsDC,IAAI,CAAC,CAAD,CAAJ,CAAQ,CAAR,CAAtD,EAAkEA,IAAI,CAAC,CAAD,CAAJ,CAAQ,CAAR,CAAlE,EAA8ER,CAA9E,CAAX,CAAN;AACH;;AACDO,MAAAA,SAAS,GAAGC,IAAI,CAAC,CAAD,CAAhB;AACH;;AACD,WAAOJ,GAAP;AACH;;AAvBsB","sourcesContent":["import { polygonHachureLines } from './scan-line-hachure';\nexport class HachureFiller {\n    constructor(helper) {\n        this.helper = helper;\n    }\n    fillPolygon(points, o) {\n        return this._fillPolygon(points, o);\n    }\n    _fillPolygon(points, o, connectEnds = false) {\n        const lines = polygonHachureLines(points, o);\n        const ops = this.renderLines(lines, o, connectEnds);\n        return { type: 'fillSketch', ops };\n    }\n    renderLines(lines, o, connectEnds) {\n        let ops = [];\n        let prevPoint = null;\n        for (const line of lines) {\n            ops = ops.concat(this.helper.doubleLineOps(line[0][0], line[0][1], line[1][0], line[1][1], o));\n            if (connectEnds && prevPoint) {\n                ops = ops.concat(this.helper.doubleLineOps(prevPoint[0], prevPoint[1], line[0][0], line[0][1], o));\n            }\n            prevPoint = line[1];\n        }\n        return ops;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}