{"ast":null,"code":"var _jsxFileName = \"/home/pro/Solutions/drawboard-light/src/actions/actionExport.tsx\";\nimport React from \"react\";\nimport { ProjectName } from \"../components/ProjectName\";\nimport { saveAsJSON, loadFromJSON } from \"../data\";\nimport { load, save } from \"../components/icons\";\nimport { ToolButton } from \"../components/ToolButton\";\nimport { t } from \"../i18n\";\nimport useIsMobile from \"../is-mobile\";\nimport { register } from \"./register\";\nimport { KEYS } from \"../keys\";\nexport const actionChangeProjectName = register({\n  name: \"changeProjectName\",\n  perform: (_elements, appState, value) => {\n    return {\n      appState: { ...appState,\n        name: value\n      },\n      commitToHistory: false\n    };\n  },\n  PanelComponent: ({\n    appState,\n    updateData\n  }) => /*#__PURE__*/React.createElement(ProjectName, {\n    label: t(\"labels.fileTitle\"),\n    value: appState.name || \"Unnamed\",\n    onChange: name => updateData(name),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 5\n    }\n  })\n});\nexport const actionChangeExportBackground = register({\n  name: \"changeExportBackground\",\n  perform: (_elements, appState, value) => {\n    return {\n      appState: { ...appState,\n        exportBackground: value\n      },\n      commitToHistory: false\n    };\n  },\n  PanelComponent: ({\n    appState,\n    updateData\n  }) => /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"checkbox\",\n    checked: appState.exportBackground,\n    onChange: event => updateData(event.target.checked),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }\n  }), \" \", t(\"labels.withBackground\"))\n});\nexport const actionSaveScene = register({\n  name: \"saveScene\",\n  perform: (elements, appState, value) => {\n    saveAsJSON(elements, appState).catch(error => console.error(error));\n    return {\n      commitToHistory: false\n    };\n  },\n  keyTest: event => {\n    return event.key === \"s\" && event[KEYS.CTRL_OR_CMD];\n  },\n  PanelComponent: ({\n    updateData\n  }) => /*#__PURE__*/React.createElement(ToolButton, {\n    type: \"button\",\n    icon: save,\n    title: t(\"buttons.save\"),\n    \"aria-label\": t(\"buttons.save\"),\n    showAriaLabel: useIsMobile(),\n    onClick: () => updateData(null),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 5\n    }\n  })\n});\nexport const actionLoadScene = register({\n  name: \"loadScene\",\n  perform: (elements, appState, {\n    elements: loadedElements,\n    appState: loadedAppState,\n    error\n  }) => {\n    return {\n      elements: loadedElements,\n      appState: { ...loadedAppState,\n        errorMessage: error\n      },\n      commitToHistory: false\n    };\n  },\n  PanelComponent: ({\n    updateData\n  }) => /*#__PURE__*/React.createElement(ToolButton, {\n    type: \"button\",\n    icon: load,\n    title: t(\"buttons.load\"),\n    \"aria-label\": t(\"buttons.load\"),\n    showAriaLabel: useIsMobile(),\n    onClick: () => {\n      loadFromJSON().then(({\n        elements,\n        appState\n      }) => {\n        updateData({\n          elements: elements,\n          appState: appState\n        });\n      }).catch(error => {\n        updateData({\n          error: error.message\n        });\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 5\n    }\n  })\n});","map":{"version":3,"sources":["/home/pro/Solutions/drawboard-light/src/actions/actionExport.tsx"],"names":["React","ProjectName","saveAsJSON","loadFromJSON","load","save","ToolButton","t","useIsMobile","register","KEYS","actionChangeProjectName","name","perform","_elements","appState","value","commitToHistory","PanelComponent","updateData","actionChangeExportBackground","exportBackground","event","target","checked","actionSaveScene","elements","catch","error","console","keyTest","key","CTRL_OR_CMD","actionLoadScene","loadedElements","loadedAppState","errorMessage","then","message"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { ProjectName } from \"../components/ProjectName\";\nimport { saveAsJSON, loadFromJSON } from \"../data\";\nimport { load, save } from \"../components/icons\";\nimport { ToolButton } from \"../components/ToolButton\";\nimport { t } from \"../i18n\";\nimport useIsMobile from \"../is-mobile\";\nimport { register } from \"./register\";\nimport { KEYS } from \"../keys\";\n\nexport const actionChangeProjectName = register({\n  name: \"changeProjectName\",\n  perform: (_elements, appState, value) => {\n    return { appState: { ...appState, name: value }, commitToHistory: false };\n  },\n  PanelComponent: ({ appState, updateData }) => (\n    <ProjectName\n      label={t(\"labels.fileTitle\")}\n      value={appState.name || \"Unnamed\"}\n      onChange={(name: string) => updateData(name)}\n    />\n  ),\n});\n\nexport const actionChangeExportBackground = register({\n  name: \"changeExportBackground\",\n  perform: (_elements, appState, value) => {\n    return {\n      appState: { ...appState, exportBackground: value },\n      commitToHistory: false,\n    };\n  },\n  PanelComponent: ({ appState, updateData }) => (\n    <label>\n      <input\n        type=\"checkbox\"\n        checked={appState.exportBackground}\n        onChange={(event) => updateData(event.target.checked)}\n      />{\" \"}\n      {t(\"labels.withBackground\")}\n    </label>\n  ),\n});\n\nexport const actionSaveScene = register({\n  name: \"saveScene\",\n  perform: (elements, appState, value) => {\n    saveAsJSON(elements, appState).catch((error) => console.error(error));\n    return { commitToHistory: false };\n  },\n  keyTest: (event) => {\n    return event.key === \"s\" && event[KEYS.CTRL_OR_CMD];\n  },\n  PanelComponent: ({ updateData }) => (\n    <ToolButton\n      type=\"button\"\n      icon={save}\n      title={t(\"buttons.save\")}\n      aria-label={t(\"buttons.save\")}\n      showAriaLabel={useIsMobile()}\n      onClick={() => updateData(null)}\n    />\n  ),\n});\n\nexport const actionLoadScene = register({\n  name: \"loadScene\",\n  perform: (\n    elements,\n    appState,\n    { elements: loadedElements, appState: loadedAppState, error },\n  ) => {\n    return {\n      elements: loadedElements,\n      appState: {\n        ...loadedAppState,\n        errorMessage: error,\n      },\n      commitToHistory: false,\n    };\n  },\n  PanelComponent: ({ updateData }) => (\n    <ToolButton\n      type=\"button\"\n      icon={load}\n      title={t(\"buttons.load\")}\n      aria-label={t(\"buttons.load\")}\n      showAriaLabel={useIsMobile()}\n      onClick={() => {\n        loadFromJSON()\n          .then(({ elements, appState }) => {\n            updateData({ elements: elements, appState: appState });\n          })\n          .catch((error) => {\n            updateData({ error: error.message });\n          });\n      }}\n    />\n  ),\n});\n"]},"metadata":{},"sourceType":"module"}