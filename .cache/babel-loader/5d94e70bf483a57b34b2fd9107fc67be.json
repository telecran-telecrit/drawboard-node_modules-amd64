{"ast":null,"code":"// This file replaces `index.js` in bundlers like webpack or Rollup,\n// according to `browser` config in `package.json`.\nif (process.env.NODE_ENV !== 'production') {\n  // All bundlers will remove this block in production bundle\n  if (typeof navigator !== 'undefined' && navigator.product === 'ReactNative') {\n    throw new Error('React Native does not have a built-in secure random generator. ' + 'If you don’t need unpredictable IDs, you can use `nanoid/non-secure`. ' + 'For secure ID install `expo-random` locally and use `nanoid/async`.');\n  }\n\n  if (typeof self === 'undefined' || !self.crypto && !self.msCrypto) {\n    throw new Error('Your browser does not have secure random generator. ' + 'If you don’t need unpredictable IDs, you can use nanoid/non-secure.');\n  }\n}\n\nvar crypto = self.crypto || self.msCrypto; // This alphabet uses a-z A-Z 0-9 _- symbols.\n// Symbols are generated for smaller size.\n// -_zyxwvutsrqponmlkjihgfedcba9876543210ZYXWVUTSRQPONMLKJIHGFEDCBA\n\nvar url = '-_'; // Loop from 36 to 0 (from z to a and 9 to 0 in Base36).\n\nvar i = 36;\n\nwhile (i--) {\n  // 36 is radix. Number.prototype.toString(36) returns number\n  // in Base36 representation. Base36 is like hex, but it uses 0–9 and a-z.\n  url += i.toString(36);\n} // Loop from 36 to 10 (from Z to A in Base36).\n\n\ni = 36;\n\nwhile (i-- - 10) {\n  url += i.toString(36).toUpperCase();\n}\n\nmodule.exports = function (size) {\n  var id = '';\n  var bytes = crypto.getRandomValues(new Uint8Array(size || 21));\n  i = size || 21; // Compact alternative for `for (var i = 0; i < size; i++)`\n\n  while (i--) {\n    // We can’t use bytes bigger than the alphabet. 63 is 00111111 bitmask.\n    // This mask reduces random byte 0-255 to 0-63 values.\n    // There is no need in `|| ''` and `* 1.6` hacks in here,\n    // because bitmask trim bytes exact to alphabet size.\n    id += url[bytes[i] & 63];\n  }\n\n  return id;\n};","map":{"version":3,"sources":["/home/pro/Solutions/drawboard-light/node_modules/nanoid/index.browser.js"],"names":["process","env","NODE_ENV","navigator","product","Error","self","crypto","msCrypto","url","i","toString","toUpperCase","module","exports","size","id","bytes","getRandomValues","Uint8Array"],"mappings":"AAAA;AACA;AAEA,IAAIA,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzC;AACA,MAAI,OAAOC,SAAP,KAAqB,WAArB,IAAoCA,SAAS,CAACC,OAAV,KAAsB,aAA9D,EAA6E;AAC3E,UAAM,IAAIC,KAAJ,CACJ,oEACA,wEADA,GAEA,qEAHI,CAAN;AAKD;;AACD,MAAI,OAAOC,IAAP,KAAgB,WAAhB,IAAgC,CAACA,IAAI,CAACC,MAAN,IAAgB,CAACD,IAAI,CAACE,QAA1D,EAAqE;AACnE,UAAM,IAAIH,KAAJ,CACJ,yDACA,qEAFI,CAAN;AAID;AACF;;AAED,IAAIE,MAAM,GAAGD,IAAI,CAACC,MAAL,IAAeD,IAAI,CAACE,QAAjC,C,CAEA;AACA;AACA;;AACA,IAAIC,GAAG,GAAG,IAAV,C,CACA;;AACA,IAAIC,CAAC,GAAG,EAAR;;AACA,OAAOA,CAAC,EAAR,EAAY;AACV;AACA;AACAD,EAAAA,GAAG,IAAIC,CAAC,CAACC,QAAF,CAAW,EAAX,CAAP;AACD,C,CACD;;;AACAD,CAAC,GAAG,EAAJ;;AACA,OAAOA,CAAC,KAAK,EAAb,EAAiB;AACfD,EAAAA,GAAG,IAAIC,CAAC,CAACC,QAAF,CAAW,EAAX,EAAeC,WAAf,EAAP;AACD;;AAEDC,MAAM,CAACC,OAAP,GAAiB,UAAUC,IAAV,EAAgB;AAC/B,MAAIC,EAAE,GAAG,EAAT;AACA,MAAIC,KAAK,GAAGV,MAAM,CAACW,eAAP,CAAuB,IAAIC,UAAJ,CAAeJ,IAAI,IAAI,EAAvB,CAAvB,CAAZ;AACAL,EAAAA,CAAC,GAAGK,IAAI,IAAI,EAAZ,CAH+B,CAK/B;;AACA,SAAOL,CAAC,EAAR,EAAY;AACV;AACA;AACA;AACA;AACAM,IAAAA,EAAE,IAAIP,GAAG,CAACQ,KAAK,CAACP,CAAD,CAAL,GAAW,EAAZ,CAAT;AACD;;AACD,SAAOM,EAAP;AACD,CAdD","sourcesContent":["// This file replaces `index.js` in bundlers like webpack or Rollup,\n// according to `browser` config in `package.json`.\n\nif (process.env.NODE_ENV !== 'production') {\n  // All bundlers will remove this block in production bundle\n  if (typeof navigator !== 'undefined' && navigator.product === 'ReactNative') {\n    throw new Error(\n      'React Native does not have a built-in secure random generator. ' +\n      'If you don’t need unpredictable IDs, you can use `nanoid/non-secure`. ' +\n      'For secure ID install `expo-random` locally and use `nanoid/async`.'\n    )\n  }\n  if (typeof self === 'undefined' || (!self.crypto && !self.msCrypto)) {\n    throw new Error(\n      'Your browser does not have secure random generator. ' +\n      'If you don’t need unpredictable IDs, you can use nanoid/non-secure.'\n    )\n  }\n}\n\nvar crypto = self.crypto || self.msCrypto\n\n// This alphabet uses a-z A-Z 0-9 _- symbols.\n// Symbols are generated for smaller size.\n// -_zyxwvutsrqponmlkjihgfedcba9876543210ZYXWVUTSRQPONMLKJIHGFEDCBA\nvar url = '-_'\n// Loop from 36 to 0 (from z to a and 9 to 0 in Base36).\nvar i = 36\nwhile (i--) {\n  // 36 is radix. Number.prototype.toString(36) returns number\n  // in Base36 representation. Base36 is like hex, but it uses 0–9 and a-z.\n  url += i.toString(36)\n}\n// Loop from 36 to 10 (from Z to A in Base36).\ni = 36\nwhile (i-- - 10) {\n  url += i.toString(36).toUpperCase()\n}\n\nmodule.exports = function (size) {\n  var id = ''\n  var bytes = crypto.getRandomValues(new Uint8Array(size || 21))\n  i = size || 21\n\n  // Compact alternative for `for (var i = 0; i < size; i++)`\n  while (i--) {\n    // We can’t use bytes bigger than the alphabet. 63 is 00111111 bitmask.\n    // This mask reduces random byte 0-255 to 0-63 values.\n    // There is no need in `|| ''` and `* 1.6` hacks in here,\n    // because bitmask trim bytes exact to alphabet size.\n    id += url[bytes[i] & 63]\n  }\n  return id\n}\n"]},"metadata":{},"sourceType":"script"}