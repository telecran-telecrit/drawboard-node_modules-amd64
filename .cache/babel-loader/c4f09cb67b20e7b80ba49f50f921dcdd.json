{"ast":null,"code":"var _jsxFileName = \"/home/pro/Solutions/drawboard-light/src/components/ExportDialog.tsx\";\nimport \"./ExportDialog.scss\";\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { ToolButton } from \"./ToolButton\";\nimport { clipboard, exportFile, link } from \"./icons\";\nimport { exportToCanvas } from \"../scene/export\";\nimport Stack from \"./Stack\";\nimport { t } from \"../i18n\";\nimport { probablySupportsClipboardBlob } from \"../clipboard\";\nimport { getSelectedElements, isSomeElementSelected } from \"../scene\";\nimport useIsMobile from \"../is-mobile\";\nimport { Dialog } from \"./Dialog\";\nconst scales = [1, 2, 3];\nconst defaultScale = scales.includes(devicePixelRatio) ? devicePixelRatio : 1;\n\nfunction ExportModal({\n  elements,\n  appState,\n  exportPadding = 10,\n  actionManager,\n  onExportToPng,\n  onExportToSvg,\n  onExportToClipboard,\n  onExportToBackend\n}) {\n  const someElementIsSelected = isSomeElementSelected(elements, appState);\n  const [scale, setScale] = useState(defaultScale);\n  const [exportSelected, setExportSelected] = useState(someElementIsSelected);\n  const previewRef = useRef(null);\n  const {\n    exportBackground,\n    viewBackgroundColor\n  } = appState;\n  const exportedElements = exportSelected ? getSelectedElements(elements, appState) : elements;\n  useEffect(() => {\n    setExportSelected(someElementIsSelected);\n  }, [someElementIsSelected]);\n  useEffect(() => {\n    const previewNode = previewRef.current;\n    const canvas = exportToCanvas(exportedElements, appState, {\n      exportBackground,\n      viewBackgroundColor,\n      exportPadding,\n      scale\n    });\n    previewNode === null || previewNode === void 0 ? void 0 : previewNode.appendChild(canvas);\n    return () => {\n      previewNode === null || previewNode === void 0 ? void 0 : previewNode.removeChild(canvas);\n    };\n  }, [appState, exportedElements, exportBackground, exportPadding, viewBackgroundColor, scale]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"ExportDialog\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"ExportDialog__preview\",\n    ref: previewRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Stack.Col, {\n    gap: 2,\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"ExportDialog__actions\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Stack.Row, {\n    gap: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(ToolButton, {\n    type: \"button\",\n    label: \"PNG\",\n    title: t(\"buttons.exportToPng\"),\n    \"aria-label\": t(\"buttons.exportToPng\"),\n    onClick: () => onExportToPng(exportedElements, scale),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(ToolButton, {\n    type: \"button\",\n    label: \"SVG\",\n    title: t(\"buttons.exportToSvg\"),\n    \"aria-label\": t(\"buttons.exportToSvg\"),\n    onClick: () => onExportToSvg(exportedElements, scale),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }\n  }), probablySupportsClipboardBlob && /*#__PURE__*/React.createElement(ToolButton, {\n    type: \"button\",\n    icon: clipboard,\n    title: t(\"buttons.copyPngToClipboard\"),\n    \"aria-label\": t(\"buttons.copyPngToClipboard\"),\n    onClick: () => onExportToClipboard(exportedElements, scale),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(ToolButton, {\n    type: \"button\",\n    icon: link,\n    title: t(\"buttons.getShareableLink\"),\n    \"aria-label\": t(\"buttons.getShareableLink\"),\n    onClick: () => onExportToBackend(exportedElements),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"ExportDialog__name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 11\n    }\n  }, actionManager.renderAction(\"changeProjectName\")), /*#__PURE__*/React.createElement(Stack.Row, {\n    gap: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 11\n    }\n  }, scales.map(s => /*#__PURE__*/React.createElement(ToolButton, {\n    key: s,\n    size: \"s\",\n    type: \"radio\",\n    icon: `x${s}`,\n    name: \"export-canvas-scale\",\n    \"aria-label\": `Scale ${s} x`,\n    id: \"export-canvas-scale\",\n    checked: s === scale,\n    onChange: () => setScale(s),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 15\n    }\n  })))), actionManager.renderAction(\"changeExportBackground\"), someElementIsSelected && /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"checkbox\",\n    checked: exportSelected,\n    onChange: event => setExportSelected(event.currentTarget.checked),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 15\n    }\n  }), \" \", t(\"labels.onlySelected\")))));\n}\n\nexport function ExportDialog({\n  elements,\n  appState,\n  exportPadding = 10,\n  actionManager,\n  onExportToPng,\n  onExportToSvg,\n  onExportToClipboard,\n  onExportToBackend\n}) {\n  const [modalIsShown, setModalIsShown] = useState(false);\n  const triggerButton = useRef(null);\n  const handleClose = React.useCallback(() => {\n    var _triggerButton$curren;\n\n    setModalIsShown(false);\n    (_triggerButton$curren = triggerButton.current) === null || _triggerButton$curren === void 0 ? void 0 : _triggerButton$curren.focus();\n  }, []);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ToolButton, {\n    onClick: () => setModalIsShown(true),\n    icon: exportFile,\n    type: \"button\",\n    \"aria-label\": t(\"buttons.export\"),\n    showAriaLabel: useIsMobile(),\n    title: t(\"buttons.export\"),\n    ref: triggerButton,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 7\n    }\n  }), modalIsShown && /*#__PURE__*/React.createElement(Dialog, {\n    maxWidth: 800,\n    onCloseRequest: handleClose,\n    title: t(\"buttons.export\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(ExportModal, {\n    elements: elements,\n    appState: appState,\n    exportPadding: exportPadding,\n    actionManager: actionManager,\n    onExportToPng: onExportToPng,\n    onExportToSvg: onExportToSvg,\n    onExportToClipboard: onExportToClipboard,\n    onExportToBackend: onExportToBackend,\n    onCloseRequest: handleClose,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 11\n    }\n  })));\n}","map":{"version":3,"sources":["/home/pro/Solutions/drawboard-light/src/components/ExportDialog.tsx"],"names":["React","useState","useEffect","useRef","ToolButton","clipboard","exportFile","link","exportToCanvas","Stack","t","probablySupportsClipboardBlob","getSelectedElements","isSomeElementSelected","useIsMobile","Dialog","scales","defaultScale","includes","devicePixelRatio","ExportModal","elements","appState","exportPadding","actionManager","onExportToPng","onExportToSvg","onExportToClipboard","onExportToBackend","someElementIsSelected","scale","setScale","exportSelected","setExportSelected","previewRef","exportBackground","viewBackgroundColor","exportedElements","previewNode","current","canvas","appendChild","removeChild","renderAction","map","s","event","currentTarget","checked","ExportDialog","modalIsShown","setModalIsShown","triggerButton","handleClose","useCallback","focus"],"mappings":"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","sourcesContent":["import \"./ExportDialog.scss\";\n\nimport React, { useState, useEffect, useRef } from \"react\";\n\nimport { ToolButton } from \"./ToolButton\";\nimport { clipboard, exportFile, link } from \"./icons\";\nimport { NonDeletedExcalidrawElement } from \"../element/types\";\nimport { AppState } from \"../types\";\nimport { exportToCanvas } from \"../scene/export\";\nimport { ActionsManagerInterface } from \"../actions/types\";\nimport Stack from \"./Stack\";\nimport { t } from \"../i18n\";\n\nimport { probablySupportsClipboardBlob } from \"../clipboard\";\nimport { getSelectedElements, isSomeElementSelected } from \"../scene\";\nimport useIsMobile from \"../is-mobile\";\nimport { Dialog } from \"./Dialog\";\n\nconst scales = [1, 2, 3];\nconst defaultScale = scales.includes(devicePixelRatio) ? devicePixelRatio : 1;\n\nexport type ExportCB = (\n  elements: readonly NonDeletedExcalidrawElement[],\n  scale?: number,\n) => void;\n\nfunction ExportModal({\n  elements,\n  appState,\n  exportPadding = 10,\n  actionManager,\n  onExportToPng,\n  onExportToSvg,\n  onExportToClipboard,\n  onExportToBackend,\n}: {\n  appState: AppState;\n  elements: readonly NonDeletedExcalidrawElement[];\n  exportPadding?: number;\n  actionManager: ActionsManagerInterface;\n  onExportToPng: ExportCB;\n  onExportToSvg: ExportCB;\n  onExportToClipboard: ExportCB;\n  onExportToBackend: ExportCB;\n  onCloseRequest: () => void;\n}) {\n  const someElementIsSelected = isSomeElementSelected(elements, appState);\n  const [scale, setScale] = useState(defaultScale);\n  const [exportSelected, setExportSelected] = useState(someElementIsSelected);\n  const previewRef = useRef<HTMLDivElement>(null);\n  const { exportBackground, viewBackgroundColor } = appState;\n\n  const exportedElements = exportSelected\n    ? getSelectedElements(elements, appState)\n    : elements;\n\n  useEffect(() => {\n    setExportSelected(someElementIsSelected);\n  }, [someElementIsSelected]);\n\n  useEffect(() => {\n    const previewNode = previewRef.current;\n    const canvas = exportToCanvas(exportedElements, appState, {\n      exportBackground,\n      viewBackgroundColor,\n      exportPadding,\n      scale,\n    });\n    previewNode?.appendChild(canvas);\n    return () => {\n      previewNode?.removeChild(canvas);\n    };\n  }, [\n    appState,\n    exportedElements,\n    exportBackground,\n    exportPadding,\n    viewBackgroundColor,\n    scale,\n  ]);\n\n  return (\n    <div className=\"ExportDialog\">\n      <div className=\"ExportDialog__preview\" ref={previewRef}></div>\n      <Stack.Col gap={2} align=\"center\">\n        <div className=\"ExportDialog__actions\">\n          <Stack.Row gap={2}>\n            <ToolButton\n              type=\"button\"\n              label=\"PNG\"\n              title={t(\"buttons.exportToPng\")}\n              aria-label={t(\"buttons.exportToPng\")}\n              onClick={() => onExportToPng(exportedElements, scale)}\n            />\n            <ToolButton\n              type=\"button\"\n              label=\"SVG\"\n              title={t(\"buttons.exportToSvg\")}\n              aria-label={t(\"buttons.exportToSvg\")}\n              onClick={() => onExportToSvg(exportedElements, scale)}\n            />\n            {probablySupportsClipboardBlob && (\n              <ToolButton\n                type=\"button\"\n                icon={clipboard}\n                title={t(\"buttons.copyPngToClipboard\")}\n                aria-label={t(\"buttons.copyPngToClipboard\")}\n                onClick={() => onExportToClipboard(exportedElements, scale)}\n              />\n            )}\n            <ToolButton\n              type=\"button\"\n              icon={link}\n              title={t(\"buttons.getShareableLink\")}\n              aria-label={t(\"buttons.getShareableLink\")}\n              onClick={() => onExportToBackend(exportedElements)}\n            />\n          </Stack.Row>\n          <div className=\"ExportDialog__name\">\n            {actionManager.renderAction(\"changeProjectName\")}\n          </div>\n          <Stack.Row gap={2}>\n            {scales.map((s) => (\n              <ToolButton\n                key={s}\n                size=\"s\"\n                type=\"radio\"\n                icon={`x${s}`}\n                name=\"export-canvas-scale\"\n                aria-label={`Scale ${s} x`}\n                id=\"export-canvas-scale\"\n                checked={s === scale}\n                onChange={() => setScale(s)}\n              />\n            ))}\n          </Stack.Row>\n        </div>\n        {actionManager.renderAction(\"changeExportBackground\")}\n        {someElementIsSelected && (\n          <div>\n            <label>\n              <input\n                type=\"checkbox\"\n                checked={exportSelected}\n                onChange={(event) =>\n                  setExportSelected(event.currentTarget.checked)\n                }\n              />{\" \"}\n              {t(\"labels.onlySelected\")}\n            </label>\n          </div>\n        )}\n      </Stack.Col>\n    </div>\n  );\n}\n\nexport function ExportDialog({\n  elements,\n  appState,\n  exportPadding = 10,\n  actionManager,\n  onExportToPng,\n  onExportToSvg,\n  onExportToClipboard,\n  onExportToBackend,\n}: {\n  appState: AppState;\n  elements: readonly NonDeletedExcalidrawElement[];\n  exportPadding?: number;\n  actionManager: ActionsManagerInterface;\n  onExportToPng: ExportCB;\n  onExportToSvg: ExportCB;\n  onExportToClipboard: ExportCB;\n  onExportToBackend: ExportCB;\n}) {\n  const [modalIsShown, setModalIsShown] = useState(false);\n  const triggerButton = useRef<HTMLButtonElement>(null);\n\n  const handleClose = React.useCallback(() => {\n    setModalIsShown(false);\n    triggerButton.current?.focus();\n  }, []);\n\n  return (\n    <>\n      <ToolButton\n        onClick={() => setModalIsShown(true)}\n        icon={exportFile}\n        type=\"button\"\n        aria-label={t(\"buttons.export\")}\n        showAriaLabel={useIsMobile()}\n        title={t(\"buttons.export\")}\n        ref={triggerButton}\n      />\n      {modalIsShown && (\n        <Dialog\n          maxWidth={800}\n          onCloseRequest={handleClose}\n          title={t(\"buttons.export\")}\n        >\n          <ExportModal\n            elements={elements}\n            appState={appState}\n            exportPadding={exportPadding}\n            actionManager={actionManager}\n            onExportToPng={onExportToPng}\n            onExportToSvg={onExportToSvg}\n            onExportToClipboard={onExportToClipboard}\n            onExportToBackend={onExportToBackend}\n            onCloseRequest={handleClose}\n          />\n        </Dialog>\n      )}\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}