{"ast":null,"code":"import { getZoomOrigin } from \"./scene\";\nimport { CURSOR_TYPE } from \"./constants\";\nexport const SVG_NS = \"http://www.w3.org/2000/svg\";\nlet mockDateTime = null;\nexport function setDateTimeForTests(dateTime) {\n  mockDateTime = dateTime;\n}\nexport const getDateTime = () => {\n  if (mockDateTime) {\n    return mockDateTime;\n  }\n\n  const date = new Date();\n  const year = date.getFullYear();\n  const month = `${date.getMonth() + 1}`.padStart(2, \"0\");\n  const day = `${date.getDate()}`.padStart(2, \"0\");\n  const hr = `${date.getHours()}`.padStart(2, \"0\");\n  const min = `${date.getMinutes()}`.padStart(2, \"0\");\n  return `${year}-${month}-${day}-${hr}${min}`;\n};\nexport function capitalizeString(str) {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}\nexport function isToolIcon(target) {\n  return target instanceof HTMLElement && target.className.includes(\"ToolIcon\");\n}\nexport function isInputLike(target) {\n  return target instanceof HTMLElement && target.dataset.type === \"wysiwyg\" || target instanceof HTMLBRElement || // newline in wysiwyg\n  target instanceof HTMLInputElement || target instanceof HTMLTextAreaElement || target instanceof HTMLSelectElement;\n}\nexport function isWritableElement(target) {\n  return target instanceof HTMLElement && target.dataset.type === \"wysiwyg\" || target instanceof HTMLBRElement || // newline in wysiwyg\n  target instanceof HTMLTextAreaElement || target instanceof HTMLInputElement && (target.type === \"text\" || target.type === \"number\");\n} // https://github.com/grassator/canvas-text-editor/blob/master/lib/FontMetrics.js\n\nexport function measureText(text, font) {\n  const line = document.createElement(\"div\");\n  const body = document.body;\n  line.style.position = \"absolute\";\n  line.style.whiteSpace = \"pre\";\n  line.style.font = font;\n  body.appendChild(line); // Now we can measure width and height of the letter\n\n  line.innerText = text;\n  const width = line.offsetWidth;\n  const height = line.offsetHeight; // Now creating 1px sized item that will be aligned to baseline\n  // to calculate baseline shift\n\n  const span = document.createElement(\"span\");\n  span.style.display = \"inline-block\";\n  span.style.overflow = \"hidden\";\n  span.style.width = \"1px\";\n  span.style.height = \"1px\";\n  line.appendChild(span); // Baseline is important for positioning text on canvas\n\n  const baseline = span.offsetTop + span.offsetHeight;\n  document.body.removeChild(line);\n  return {\n    width,\n    height,\n    baseline\n  };\n}\nexport function debounce(fn, timeout) {\n  let handle = 0;\n  let lastArgs;\n\n  const ret = (...args) => {\n    lastArgs = args;\n    clearTimeout(handle);\n    handle = window.setTimeout(() => fn(...args), timeout);\n  };\n\n  ret.flush = () => {\n    clearTimeout(handle);\n    fn(...lastArgs);\n  };\n\n  return ret;\n}\nexport function selectNode(node) {\n  const selection = window.getSelection();\n\n  if (selection) {\n    const range = document.createRange();\n    range.selectNodeContents(node);\n    selection.removeAllRanges();\n    selection.addRange(range);\n  }\n}\nexport function removeSelection() {\n  const selection = window.getSelection();\n\n  if (selection) {\n    selection.removeAllRanges();\n  }\n}\nexport function distance(x, y) {\n  return Math.abs(x - y);\n}\nexport function resetCursor() {\n  document.documentElement.style.cursor = \"\";\n}\nexport function setCursorForShape(shape) {\n  if (shape === \"selection\") {\n    resetCursor();\n  } else {\n    document.documentElement.style.cursor = CURSOR_TYPE.CROSSHAIR;\n  }\n}\nexport const isFullScreen = () => {\n  var _document$fullscreenE;\n\n  return ((_document$fullscreenE = document.fullscreenElement) === null || _document$fullscreenE === void 0 ? void 0 : _document$fullscreenE.nodeName) === \"HTML\";\n};\nexport const allowFullScreen = () => document.documentElement.requestFullscreen();\nexport const exitFullScreen = () => document.exitFullscreen();\nexport const getShortcutKey = shortcut => {\n  const isMac = /Mac|iPod|iPhone|iPad/.test(window.navigator.platform);\n\n  if (isMac) {\n    return `${shortcut.replace(\"CtrlOrCmd+\", \"⌘\").replace(\"Alt+\", \"⌥\").replace(\"Ctrl+\", \"⌃\").replace(\"Shift+\", \"⇧\").replace(\"Del\", \"⌫\").replace(/Enter|Return/, \"↩\")}`;\n  }\n\n  return `${shortcut.replace(\"CtrlOrCmd\", \"Ctrl\")}`;\n};\nexport function viewportCoordsToSceneCoords({\n  clientX,\n  clientY\n}, {\n  scrollX,\n  scrollY,\n  zoom\n}, canvas, scale) {\n  const zoomOrigin = getZoomOrigin(canvas, scale);\n  const clientXWithZoom = zoomOrigin.x + (clientX - zoomOrigin.x) / zoom;\n  const clientYWithZoom = zoomOrigin.y + (clientY - zoomOrigin.y) / zoom;\n  const x = clientXWithZoom - scrollX;\n  const y = clientYWithZoom - scrollY;\n  return {\n    x,\n    y\n  };\n}\nexport function sceneCoordsToViewportCoords({\n  sceneX,\n  sceneY\n}, {\n  scrollX,\n  scrollY,\n  zoom\n}, canvas, scale) {\n  const zoomOrigin = getZoomOrigin(canvas, scale);\n  const sceneXWithZoomAndScroll = zoomOrigin.x - (zoomOrigin.x - sceneX - scrollX) * zoom;\n  const sceneYWithZoomAndScroll = zoomOrigin.y - (zoomOrigin.y - sceneY - scrollY) * zoom;\n  const x = sceneXWithZoomAndScroll;\n  const y = sceneYWithZoomAndScroll;\n  return {\n    x,\n    y\n  };\n}\nexport function getGlobalCSSVariable(name) {\n  return getComputedStyle(document.documentElement).getPropertyValue(`--${name}`);\n}","map":{"version":3,"sources":["/home/pro/Solutions/drawboard-light/src/utils.ts"],"names":["getZoomOrigin","CURSOR_TYPE","SVG_NS","mockDateTime","setDateTimeForTests","dateTime","getDateTime","date","Date","year","getFullYear","month","getMonth","padStart","day","getDate","hr","getHours","min","getMinutes","capitalizeString","str","charAt","toUpperCase","slice","isToolIcon","target","HTMLElement","className","includes","isInputLike","dataset","type","HTMLBRElement","HTMLInputElement","HTMLTextAreaElement","HTMLSelectElement","isWritableElement","measureText","text","font","line","document","createElement","body","style","position","whiteSpace","appendChild","innerText","width","offsetWidth","height","offsetHeight","span","display","overflow","baseline","offsetTop","removeChild","debounce","fn","timeout","handle","lastArgs","ret","args","clearTimeout","window","setTimeout","flush","selectNode","node","selection","getSelection","range","createRange","selectNodeContents","removeAllRanges","addRange","removeSelection","distance","x","y","Math","abs","resetCursor","documentElement","cursor","setCursorForShape","shape","CROSSHAIR","isFullScreen","fullscreenElement","nodeName","allowFullScreen","requestFullscreen","exitFullScreen","exitFullscreen","getShortcutKey","shortcut","isMac","test","navigator","platform","replace","viewportCoordsToSceneCoords","clientX","clientY","scrollX","scrollY","zoom","canvas","scale","zoomOrigin","clientXWithZoom","clientYWithZoom","sceneCoordsToViewportCoords","sceneX","sceneY","sceneXWithZoomAndScroll","sceneYWithZoomAndScroll","getGlobalCSSVariable","name","getComputedStyle","getPropertyValue"],"mappings":"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","sourcesContent":["import { FlooredNumber } from \"./types\";\nimport { getZoomOrigin } from \"./scene\";\nimport { CURSOR_TYPE } from \"./constants\";\n\nexport const SVG_NS = \"http://www.w3.org/2000/svg\";\n\nlet mockDateTime: string | null = null;\n\nexport function setDateTimeForTests(dateTime: string) {\n  mockDateTime = dateTime;\n}\n\nexport const getDateTime = () => {\n  if (mockDateTime) {\n    return mockDateTime;\n  }\n\n  const date = new Date();\n  const year = date.getFullYear();\n  const month = `${date.getMonth() + 1}`.padStart(2, \"0\");\n  const day = `${date.getDate()}`.padStart(2, \"0\");\n  const hr = `${date.getHours()}`.padStart(2, \"0\");\n  const min = `${date.getMinutes()}`.padStart(2, \"0\");\n\n  return `${year}-${month}-${day}-${hr}${min}`;\n};\n\nexport function capitalizeString(str: string) {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}\n\nexport function isToolIcon(\n  target: Element | EventTarget | null,\n): target is HTMLElement {\n  return target instanceof HTMLElement && target.className.includes(\"ToolIcon\");\n}\n\nexport function isInputLike(\n  target: Element | EventTarget | null,\n): target is\n  | HTMLInputElement\n  | HTMLTextAreaElement\n  | HTMLSelectElement\n  | HTMLBRElement\n  | HTMLDivElement {\n  return (\n    (target instanceof HTMLElement && target.dataset.type === \"wysiwyg\") ||\n    target instanceof HTMLBRElement || // newline in wysiwyg\n    target instanceof HTMLInputElement ||\n    target instanceof HTMLTextAreaElement ||\n    target instanceof HTMLSelectElement\n  );\n}\n\nexport function isWritableElement(\n  target: Element | EventTarget | null,\n): target is\n  | HTMLInputElement\n  | HTMLTextAreaElement\n  | HTMLBRElement\n  | HTMLDivElement {\n  return (\n    (target instanceof HTMLElement && target.dataset.type === \"wysiwyg\") ||\n    target instanceof HTMLBRElement || // newline in wysiwyg\n    target instanceof HTMLTextAreaElement ||\n    (target instanceof HTMLInputElement &&\n      (target.type === \"text\" || target.type === \"number\"))\n  );\n}\n\n// https://github.com/grassator/canvas-text-editor/blob/master/lib/FontMetrics.js\nexport function measureText(text: string, font: string) {\n  const line = document.createElement(\"div\");\n  const body = document.body;\n  line.style.position = \"absolute\";\n  line.style.whiteSpace = \"pre\";\n  line.style.font = font;\n  body.appendChild(line);\n  // Now we can measure width and height of the letter\n  line.innerText = text;\n  const width = line.offsetWidth;\n  const height = line.offsetHeight;\n  // Now creating 1px sized item that will be aligned to baseline\n  // to calculate baseline shift\n  const span = document.createElement(\"span\");\n  span.style.display = \"inline-block\";\n  span.style.overflow = \"hidden\";\n  span.style.width = \"1px\";\n  span.style.height = \"1px\";\n  line.appendChild(span);\n  // Baseline is important for positioning text on canvas\n  const baseline = span.offsetTop + span.offsetHeight;\n  document.body.removeChild(line);\n\n  return { width, height, baseline };\n}\n\nexport function debounce<T extends any[]>(\n  fn: (...args: T) => void,\n  timeout: number,\n) {\n  let handle = 0;\n  let lastArgs: T;\n  const ret = (...args: T) => {\n    lastArgs = args;\n    clearTimeout(handle);\n    handle = window.setTimeout(() => fn(...args), timeout);\n  };\n  ret.flush = () => {\n    clearTimeout(handle);\n    fn(...lastArgs);\n  };\n  return ret;\n}\n\nexport function selectNode(node: Element) {\n  const selection = window.getSelection();\n  if (selection) {\n    const range = document.createRange();\n    range.selectNodeContents(node);\n    selection.removeAllRanges();\n    selection.addRange(range);\n  }\n}\n\nexport function removeSelection() {\n  const selection = window.getSelection();\n  if (selection) {\n    selection.removeAllRanges();\n  }\n}\n\nexport function distance(x: number, y: number) {\n  return Math.abs(x - y);\n}\n\nexport function resetCursor() {\n  document.documentElement.style.cursor = \"\";\n}\n\nexport function setCursorForShape(shape: string) {\n  if (shape === \"selection\") {\n    resetCursor();\n  } else {\n    document.documentElement.style.cursor = CURSOR_TYPE.CROSSHAIR;\n  }\n}\n\nexport const isFullScreen = () =>\n  document.fullscreenElement?.nodeName === \"HTML\";\n\nexport const allowFullScreen = () =>\n  document.documentElement.requestFullscreen();\n\nexport const exitFullScreen = () => document.exitFullscreen();\n\nexport const getShortcutKey = (shortcut: string): string => {\n  const isMac = /Mac|iPod|iPhone|iPad/.test(window.navigator.platform);\n  if (isMac) {\n    return `${shortcut\n      .replace(\"CtrlOrCmd+\", \"⌘\")\n      .replace(\"Alt+\", \"⌥\")\n      .replace(\"Ctrl+\", \"⌃\")\n      .replace(\"Shift+\", \"⇧\")\n      .replace(\"Del\", \"⌫\")\n      .replace(/Enter|Return/, \"↩\")}`;\n  }\n  return `${shortcut.replace(\"CtrlOrCmd\", \"Ctrl\")}`;\n};\nexport function viewportCoordsToSceneCoords(\n  { clientX, clientY }: { clientX: number; clientY: number },\n  {\n    scrollX,\n    scrollY,\n    zoom,\n  }: {\n    scrollX: FlooredNumber;\n    scrollY: FlooredNumber;\n    zoom: number;\n  },\n  canvas: HTMLCanvasElement | null,\n  scale: number,\n) {\n  const zoomOrigin = getZoomOrigin(canvas, scale);\n  const clientXWithZoom = zoomOrigin.x + (clientX - zoomOrigin.x) / zoom;\n  const clientYWithZoom = zoomOrigin.y + (clientY - zoomOrigin.y) / zoom;\n\n  const x = clientXWithZoom - scrollX;\n  const y = clientYWithZoom - scrollY;\n\n  return { x, y };\n}\n\nexport function sceneCoordsToViewportCoords(\n  { sceneX, sceneY }: { sceneX: number; sceneY: number },\n  {\n    scrollX,\n    scrollY,\n    zoom,\n  }: {\n    scrollX: FlooredNumber;\n    scrollY: FlooredNumber;\n    zoom: number;\n  },\n  canvas: HTMLCanvasElement | null,\n  scale: number,\n) {\n  const zoomOrigin = getZoomOrigin(canvas, scale);\n  const sceneXWithZoomAndScroll =\n    zoomOrigin.x - (zoomOrigin.x - sceneX - scrollX) * zoom;\n  const sceneYWithZoomAndScroll =\n    zoomOrigin.y - (zoomOrigin.y - sceneY - scrollY) * zoom;\n\n  const x = sceneXWithZoomAndScroll;\n  const y = sceneYWithZoomAndScroll;\n\n  return { x, y };\n}\n\nexport function getGlobalCSSVariable(name: string) {\n  return getComputedStyle(document.documentElement).getPropertyValue(\n    `--${name}`,\n  );\n}\n"]},"metadata":{},"sourceType":"module"}