{"ast":null,"code":"var _jsxFileName = \"/home/pro/Solutions/drawboard-light/src/actions/actionZindex.tsx\";\nimport React from \"react\";\nimport { moveOneLeft, moveOneRight, moveAllLeft, moveAllRight } from \"../zindex\";\nimport { KEYS, isDarwin } from \"../keys\";\nimport { t } from \"../i18n\";\nimport { getShortcutKey } from \"../utils\";\nimport { register } from \"./register\";\nimport { sendBackward, bringToFront, sendToBack, bringForward } from \"../components/icons\";\n\nfunction getElementIndices(direction, elements, appState) {\n  const selectedIndices = [];\n  let deletedIndicesCache = [];\n\n  function cb(element, index) {\n    if (element.isDeleted) {\n      // we want to build an array of deleted elements that are preceeding\n      //  a selected element so that we move them together\n      deletedIndicesCache.push(index);\n    } else {\n      if (appState.selectedElementIds[element.id]) {\n        selectedIndices.push(...deletedIndicesCache, index);\n      } // always empty cache of deleted elements after either pushing a group\n      //  of selected/deleted elements, of after encountering non-deleted elem\n\n\n      deletedIndicesCache = [];\n    }\n  } // sending back → select contiguous deleted elements that are to the left of\n  //  selected element(s)\n\n\n  if (direction === \"left\") {\n    let i = -1;\n    const len = elements.length;\n\n    while (++i < len) {\n      cb(elements[i], i);\n    } // moving to front → loop from right to left so that we don't need to\n    //  backtrack when gathering deleted elements\n\n  } else {\n    let i = elements.length;\n\n    while (--i > -1) {\n      cb(elements[i], i);\n    }\n  } // sort in case we were gathering indexes from right to left\n\n\n  return selectedIndices.sort();\n}\n\nfunction moveElements(func, elements, appState) {\n  const _elements = elements.slice();\n\n  const direction = func === moveOneLeft || func === moveAllLeft ? \"left\" : \"right\";\n  const indices = getElementIndices(direction, _elements, appState);\n  return func(_elements, indices);\n}\n\nexport const actionSendBackward = register({\n  name: \"sendBackward\",\n  perform: (elements, appState) => {\n    return {\n      elements: moveElements(moveOneLeft, elements, appState),\n      appState,\n      commitToHistory: true\n    };\n  },\n  contextItemLabel: \"labels.sendBackward\",\n  keyPriority: 40,\n  keyTest: event => event[KEYS.CTRL_OR_CMD] && !event.shiftKey && event.code === \"BracketLeft\",\n  PanelComponent: ({\n    updateData\n  }) => /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    className: \"zIndexButton\",\n    onClick: () => updateData(null),\n    title: `${t(\"labels.sendBackward\")} — ${getShortcutKey(\"CtrlOrCmd+[\")}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 5\n    }\n  }, sendBackward)\n});\nexport const actionBringForward = register({\n  name: \"bringForward\",\n  perform: (elements, appState) => {\n    return {\n      elements: moveElements(moveOneRight, elements, appState),\n      appState,\n      commitToHistory: true\n    };\n  },\n  contextItemLabel: \"labels.bringForward\",\n  keyPriority: 40,\n  keyTest: event => event[KEYS.CTRL_OR_CMD] && !event.shiftKey && event.code === \"BracketRight\",\n  PanelComponent: ({\n    updateData\n  }) => /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    className: \"zIndexButton\",\n    onClick: () => updateData(null),\n    title: `${t(\"labels.bringForward\")} — ${getShortcutKey(\"CtrlOrCmd+]\")}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 5\n    }\n  }, bringForward)\n});\nexport const actionSendToBack = register({\n  name: \"sendToBack\",\n  perform: (elements, appState) => {\n    return {\n      elements: moveElements(moveAllLeft, elements, appState),\n      appState,\n      commitToHistory: true\n    };\n  },\n  contextItemLabel: \"labels.sendToBack\",\n  keyTest: event => {\n    return isDarwin ? event[KEYS.CTRL_OR_CMD] && event.altKey && event.code === \"BracketLeft\" : event[KEYS.CTRL_OR_CMD] && event.shiftKey && event.code === \"BracketLeft\";\n  },\n  PanelComponent: ({\n    updateData\n  }) => /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    className: \"zIndexButton\",\n    onClick: () => updateData(null),\n    title: `${t(\"labels.sendToBack\")} — ${isDarwin ? getShortcutKey(\"CtrlOrCmd+Alt+[\") : getShortcutKey(\"CtrlOrCmd+Shift+[\")}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 5\n    }\n  }, sendToBack)\n});\nexport const actionBringToFront = register({\n  name: \"bringToFront\",\n  perform: (elements, appState) => {\n    return {\n      elements: moveElements(moveAllRight, elements, appState),\n      appState,\n      commitToHistory: true\n    };\n  },\n  contextItemLabel: \"labels.bringToFront\",\n  keyTest: event => {\n    return isDarwin ? event[KEYS.CTRL_OR_CMD] && event.altKey && event.code === \"BracketRight\" : event[KEYS.CTRL_OR_CMD] && event.shiftKey && event.code === \"BracketRight\";\n  },\n  PanelComponent: ({\n    updateData\n  }) => /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    className: \"zIndexButton\",\n    onClick: event => updateData(null),\n    title: `${t(\"labels.bringToFront\")} — ${isDarwin ? getShortcutKey(\"CtrlOrCmd+Alt+]\") : getShortcutKey(\"CtrlOrCmd+Shift+]\")}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 5\n    }\n  }, bringToFront)\n});","map":{"version":3,"sources":["/home/pro/Solutions/drawboard-light/src/actions/actionZindex.tsx"],"names":["React","moveOneLeft","moveOneRight","moveAllLeft","moveAllRight","KEYS","isDarwin","t","getShortcutKey","register","sendBackward","bringToFront","sendToBack","bringForward","getElementIndices","direction","elements","appState","selectedIndices","deletedIndicesCache","cb","element","index","isDeleted","push","selectedElementIds","id","i","len","length","sort","moveElements","func","_elements","slice","indices","actionSendBackward","name","perform","commitToHistory","contextItemLabel","keyPriority","keyTest","event","CTRL_OR_CMD","shiftKey","code","PanelComponent","updateData","actionBringForward","actionSendToBack","altKey","actionBringToFront"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {\n  moveOneLeft,\n  moveOneRight,\n  moveAllLeft,\n  moveAllRight,\n} from \"../zindex\";\nimport { KEYS, isDarwin } from \"../keys\";\nimport { t } from \"../i18n\";\nimport { getShortcutKey } from \"../utils\";\nimport { register } from \"./register\";\nimport {\n  sendBackward,\n  bringToFront,\n  sendToBack,\n  bringForward,\n} from \"../components/icons\";\nimport { ExcalidrawElement } from \"../element/types\";\nimport { AppState } from \"../types\";\n\nfunction getElementIndices(\n  direction: \"left\" | \"right\",\n  elements: readonly ExcalidrawElement[],\n  appState: AppState,\n) {\n  const selectedIndices: number[] = [];\n  let deletedIndicesCache: number[] = [];\n\n  function cb(element: ExcalidrawElement, index: number) {\n    if (element.isDeleted) {\n      // we want to build an array of deleted elements that are preceeding\n      //  a selected element so that we move them together\n      deletedIndicesCache.push(index);\n    } else {\n      if (appState.selectedElementIds[element.id]) {\n        selectedIndices.push(...deletedIndicesCache, index);\n      }\n      // always empty cache of deleted elements after either pushing a group\n      //  of selected/deleted elements, of after encountering non-deleted elem\n      deletedIndicesCache = [];\n    }\n  }\n\n  // sending back → select contiguous deleted elements that are to the left of\n  //  selected element(s)\n  if (direction === \"left\") {\n    let i = -1;\n    const len = elements.length;\n    while (++i < len) {\n      cb(elements[i], i);\n    }\n    // moving to front → loop from right to left so that we don't need to\n    //  backtrack when gathering deleted elements\n  } else {\n    let i = elements.length;\n    while (--i > -1) {\n      cb(elements[i], i);\n    }\n  }\n  // sort in case we were gathering indexes from right to left\n  return selectedIndices.sort();\n}\n\nfunction moveElements(\n  func: typeof moveOneLeft,\n  elements: readonly ExcalidrawElement[],\n  appState: AppState,\n) {\n  const _elements = elements.slice();\n  const direction =\n    func === moveOneLeft || func === moveAllLeft ? \"left\" : \"right\";\n  const indices = getElementIndices(direction, _elements, appState);\n  return func(_elements, indices);\n}\n\nexport const actionSendBackward = register({\n  name: \"sendBackward\",\n  perform: (elements, appState) => {\n    return {\n      elements: moveElements(moveOneLeft, elements, appState),\n      appState,\n      commitToHistory: true,\n    };\n  },\n  contextItemLabel: \"labels.sendBackward\",\n  keyPriority: 40,\n  keyTest: (event) =>\n    event[KEYS.CTRL_OR_CMD] && !event.shiftKey && event.code === \"BracketLeft\",\n  PanelComponent: ({ updateData }) => (\n    <button\n      type=\"button\"\n      className=\"zIndexButton\"\n      onClick={() => updateData(null)}\n      title={`${t(\"labels.sendBackward\")} — ${getShortcutKey(\"CtrlOrCmd+[\")}`}\n    >\n      {sendBackward}\n    </button>\n  ),\n});\n\nexport const actionBringForward = register({\n  name: \"bringForward\",\n  perform: (elements, appState) => {\n    return {\n      elements: moveElements(moveOneRight, elements, appState),\n      appState,\n      commitToHistory: true,\n    };\n  },\n  contextItemLabel: \"labels.bringForward\",\n  keyPriority: 40,\n  keyTest: (event) =>\n    event[KEYS.CTRL_OR_CMD] && !event.shiftKey && event.code === \"BracketRight\",\n  PanelComponent: ({ updateData }) => (\n    <button\n      type=\"button\"\n      className=\"zIndexButton\"\n      onClick={() => updateData(null)}\n      title={`${t(\"labels.bringForward\")} — ${getShortcutKey(\"CtrlOrCmd+]\")}`}\n    >\n      {bringForward}\n    </button>\n  ),\n});\n\nexport const actionSendToBack = register({\n  name: \"sendToBack\",\n  perform: (elements, appState) => {\n    return {\n      elements: moveElements(moveAllLeft, elements, appState),\n      appState,\n      commitToHistory: true,\n    };\n  },\n  contextItemLabel: \"labels.sendToBack\",\n  keyTest: (event) => {\n    return isDarwin\n      ? event[KEYS.CTRL_OR_CMD] && event.altKey && event.code === \"BracketLeft\"\n      : event[KEYS.CTRL_OR_CMD] &&\n          event.shiftKey &&\n          event.code === \"BracketLeft\";\n  },\n  PanelComponent: ({ updateData }) => (\n    <button\n      type=\"button\"\n      className=\"zIndexButton\"\n      onClick={() => updateData(null)}\n      title={`${t(\"labels.sendToBack\")} — ${\n        isDarwin\n          ? getShortcutKey(\"CtrlOrCmd+Alt+[\")\n          : getShortcutKey(\"CtrlOrCmd+Shift+[\")\n      }`}\n    >\n      {sendToBack}\n    </button>\n  ),\n});\n\nexport const actionBringToFront = register({\n  name: \"bringToFront\",\n  perform: (elements, appState) => {\n    return {\n      elements: moveElements(moveAllRight, elements, appState),\n      appState,\n      commitToHistory: true,\n    };\n  },\n  contextItemLabel: \"labels.bringToFront\",\n  keyTest: (event) => {\n    return isDarwin\n      ? event[KEYS.CTRL_OR_CMD] && event.altKey && event.code === \"BracketRight\"\n      : event[KEYS.CTRL_OR_CMD] &&\n          event.shiftKey &&\n          event.code === \"BracketRight\";\n  },\n  PanelComponent: ({ updateData }) => (\n    <button\n      type=\"button\"\n      className=\"zIndexButton\"\n      onClick={(event) => updateData(null)}\n      title={`${t(\"labels.bringToFront\")} — ${\n        isDarwin\n          ? getShortcutKey(\"CtrlOrCmd+Alt+]\")\n          : getShortcutKey(\"CtrlOrCmd+Shift+]\")\n      }`}\n    >\n      {bringToFront}\n    </button>\n  ),\n});\n"]},"metadata":{},"sourceType":"module"}