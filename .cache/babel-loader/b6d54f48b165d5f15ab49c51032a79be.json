{"ast":null,"code":"/* -*- Mode: js; js-indent-level: 2; -*- */\n\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\nvar base64VLQ = require('./base64-vlq');\n\nvar util = require('./util');\n\nvar ArraySet = require('./array-set').ArraySet;\n\nvar MappingList = require('./mapping-list').MappingList;\n/**\n * An instance of the SourceMapGenerator represents a source map which is\n * being built incrementally. You may pass an object with the following\n * properties:\n *\n *   - file: The filename of the generated source.\n *   - sourceRoot: A root for all relative URLs in this source map.\n */\n\n\nfunction SourceMapGenerator(aArgs) {\n  if (!aArgs) {\n    aArgs = {};\n  }\n\n  this._file = util.getArg(aArgs, 'file', null);\n  this._sourceRoot = util.getArg(aArgs, 'sourceRoot', null);\n  this._skipValidation = util.getArg(aArgs, 'skipValidation', false);\n  this._sources = new ArraySet();\n  this._names = new ArraySet();\n  this._mappings = new MappingList();\n  this._sourcesContents = null;\n}\n\nSourceMapGenerator.prototype._version = 3;\n/**\n * Creates a new SourceMapGenerator based on a SourceMapConsumer\n *\n * @param aSourceMapConsumer The SourceMap.\n */\n\nSourceMapGenerator.fromSourceMap = function SourceMapGenerator_fromSourceMap(aSourceMapConsumer) {\n  var sourceRoot = aSourceMapConsumer.sourceRoot;\n  var generator = new SourceMapGenerator({\n    file: aSourceMapConsumer.file,\n    sourceRoot: sourceRoot\n  });\n  aSourceMapConsumer.eachMapping(function (mapping) {\n    var newMapping = {\n      generated: {\n        line: mapping.generatedLine,\n        column: mapping.generatedColumn\n      }\n    };\n\n    if (mapping.source != null) {\n      newMapping.source = mapping.source;\n\n      if (sourceRoot != null) {\n        newMapping.source = util.relative(sourceRoot, newMapping.source);\n      }\n\n      newMapping.original = {\n        line: mapping.originalLine,\n        column: mapping.originalColumn\n      };\n\n      if (mapping.name != null) {\n        newMapping.name = mapping.name;\n      }\n    }\n\n    generator.addMapping(newMapping);\n  });\n  aSourceMapConsumer.sources.forEach(function (sourceFile) {\n    var content = aSourceMapConsumer.sourceContentFor(sourceFile);\n\n    if (content != null) {\n      generator.setSourceContent(sourceFile, content);\n    }\n  });\n  return generator;\n};\n/**\n * Add a single mapping from original source line and column to the generated\n * source's line and column for this source map being created. The mapping\n * object should have the following properties:\n *\n *   - generated: An object with the generated line and column positions.\n *   - original: An object with the original line and column positions.\n *   - source: The original source file (relative to the sourceRoot).\n *   - name: An optional original token name for this mapping.\n */\n\n\nSourceMapGenerator.prototype.addMapping = function SourceMapGenerator_addMapping(aArgs) {\n  var generated = util.getArg(aArgs, 'generated');\n  var original = util.getArg(aArgs, 'original', null);\n  var source = util.getArg(aArgs, 'source', null);\n  var name = util.getArg(aArgs, 'name', null);\n\n  if (!this._skipValidation) {\n    this._validateMapping(generated, original, source, name);\n  }\n\n  if (source != null) {\n    source = String(source);\n\n    if (!this._sources.has(source)) {\n      this._sources.add(source);\n    }\n  }\n\n  if (name != null) {\n    name = String(name);\n\n    if (!this._names.has(name)) {\n      this._names.add(name);\n    }\n  }\n\n  this._mappings.add({\n    generatedLine: generated.line,\n    generatedColumn: generated.column,\n    originalLine: original != null && original.line,\n    originalColumn: original != null && original.column,\n    source: source,\n    name: name\n  });\n};\n/**\n * Set the source content for a source file.\n */\n\n\nSourceMapGenerator.prototype.setSourceContent = function SourceMapGenerator_setSourceContent(aSourceFile, aSourceContent) {\n  var source = aSourceFile;\n\n  if (this._sourceRoot != null) {\n    source = util.relative(this._sourceRoot, source);\n  }\n\n  if (aSourceContent != null) {\n    // Add the source content to the _sourcesContents map.\n    // Create a new _sourcesContents map if the property is null.\n    if (!this._sourcesContents) {\n      this._sourcesContents = Object.create(null);\n    }\n\n    this._sourcesContents[util.toSetString(source)] = aSourceContent;\n  } else if (this._sourcesContents) {\n    // Remove the source file from the _sourcesContents map.\n    // If the _sourcesContents map is empty, set the property to null.\n    delete this._sourcesContents[util.toSetString(source)];\n\n    if (Object.keys(this._sourcesContents).length === 0) {\n      this._sourcesContents = null;\n    }\n  }\n};\n/**\n * Applies the mappings of a sub-source-map for a specific source file to the\n * source map being generated. Each mapping to the supplied source file is\n * rewritten using the supplied source map. Note: The resolution for the\n * resulting mappings is the minimium of this map and the supplied map.\n *\n * @param aSourceMapConsumer The source map to be applied.\n * @param aSourceFile Optional. The filename of the source file.\n *        If omitted, SourceMapConsumer's file property will be used.\n * @param aSourceMapPath Optional. The dirname of the path to the source map\n *        to be applied. If relative, it is relative to the SourceMapConsumer.\n *        This parameter is needed when the two source maps aren't in the same\n *        directory, and the source map to be applied contains relative source\n *        paths. If so, those relative source paths need to be rewritten\n *        relative to the SourceMapGenerator.\n */\n\n\nSourceMapGenerator.prototype.applySourceMap = function SourceMapGenerator_applySourceMap(aSourceMapConsumer, aSourceFile, aSourceMapPath) {\n  var sourceFile = aSourceFile; // If aSourceFile is omitted, we will use the file property of the SourceMap\n\n  if (aSourceFile == null) {\n    if (aSourceMapConsumer.file == null) {\n      throw new Error('SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, ' + 'or the source map\\'s \"file\" property. Both were omitted.');\n    }\n\n    sourceFile = aSourceMapConsumer.file;\n  }\n\n  var sourceRoot = this._sourceRoot; // Make \"sourceFile\" relative if an absolute Url is passed.\n\n  if (sourceRoot != null) {\n    sourceFile = util.relative(sourceRoot, sourceFile);\n  } // Applying the SourceMap can add and remove items from the sources and\n  // the names array.\n\n\n  var newSources = new ArraySet();\n  var newNames = new ArraySet(); // Find mappings for the \"sourceFile\"\n\n  this._mappings.unsortedForEach(function (mapping) {\n    if (mapping.source === sourceFile && mapping.originalLine != null) {\n      // Check if it can be mapped by the source map, then update the mapping.\n      var original = aSourceMapConsumer.originalPositionFor({\n        line: mapping.originalLine,\n        column: mapping.originalColumn\n      });\n\n      if (original.source != null) {\n        // Copy mapping\n        mapping.source = original.source;\n\n        if (aSourceMapPath != null) {\n          mapping.source = util.join(aSourceMapPath, mapping.source);\n        }\n\n        if (sourceRoot != null) {\n          mapping.source = util.relative(sourceRoot, mapping.source);\n        }\n\n        mapping.originalLine = original.line;\n        mapping.originalColumn = original.column;\n\n        if (original.name != null) {\n          mapping.name = original.name;\n        }\n      }\n    }\n\n    var source = mapping.source;\n\n    if (source != null && !newSources.has(source)) {\n      newSources.add(source);\n    }\n\n    var name = mapping.name;\n\n    if (name != null && !newNames.has(name)) {\n      newNames.add(name);\n    }\n  }, this);\n\n  this._sources = newSources;\n  this._names = newNames; // Copy sourcesContents of applied map.\n\n  aSourceMapConsumer.sources.forEach(function (sourceFile) {\n    var content = aSourceMapConsumer.sourceContentFor(sourceFile);\n\n    if (content != null) {\n      if (aSourceMapPath != null) {\n        sourceFile = util.join(aSourceMapPath, sourceFile);\n      }\n\n      if (sourceRoot != null) {\n        sourceFile = util.relative(sourceRoot, sourceFile);\n      }\n\n      this.setSourceContent(sourceFile, content);\n    }\n  }, this);\n};\n/**\n * A mapping can have one of the three levels of data:\n *\n *   1. Just the generated position.\n *   2. The Generated position, original position, and original source.\n *   3. Generated and original position, original source, as well as a name\n *      token.\n *\n * To maintain consistency, we validate that any new mapping being added falls\n * in to one of these categories.\n */\n\n\nSourceMapGenerator.prototype._validateMapping = function SourceMapGenerator_validateMapping(aGenerated, aOriginal, aSource, aName) {\n  if (aGenerated && 'line' in aGenerated && 'column' in aGenerated && aGenerated.line > 0 && aGenerated.column >= 0 && !aOriginal && !aSource && !aName) {\n    // Case 1.\n    return;\n  } else if (aGenerated && 'line' in aGenerated && 'column' in aGenerated && aOriginal && 'line' in aOriginal && 'column' in aOriginal && aGenerated.line > 0 && aGenerated.column >= 0 && aOriginal.line > 0 && aOriginal.column >= 0 && aSource) {\n    // Cases 2 and 3.\n    return;\n  } else {\n    throw new Error('Invalid mapping: ' + JSON.stringify({\n      generated: aGenerated,\n      source: aSource,\n      original: aOriginal,\n      name: aName\n    }));\n  }\n};\n/**\n * Serialize the accumulated mappings in to the stream of base 64 VLQs\n * specified by the source map format.\n */\n\n\nSourceMapGenerator.prototype._serializeMappings = function SourceMapGenerator_serializeMappings() {\n  var previousGeneratedColumn = 0;\n  var previousGeneratedLine = 1;\n  var previousOriginalColumn = 0;\n  var previousOriginalLine = 0;\n  var previousName = 0;\n  var previousSource = 0;\n  var result = '';\n  var next;\n  var mapping;\n  var nameIdx;\n  var sourceIdx;\n\n  var mappings = this._mappings.toArray();\n\n  for (var i = 0, len = mappings.length; i < len; i++) {\n    mapping = mappings[i];\n    next = '';\n\n    if (mapping.generatedLine !== previousGeneratedLine) {\n      previousGeneratedColumn = 0;\n\n      while (mapping.generatedLine !== previousGeneratedLine) {\n        next += ';';\n        previousGeneratedLine++;\n      }\n    } else {\n      if (i > 0) {\n        if (!util.compareByGeneratedPositionsInflated(mapping, mappings[i - 1])) {\n          continue;\n        }\n\n        next += ',';\n      }\n    }\n\n    next += base64VLQ.encode(mapping.generatedColumn - previousGeneratedColumn);\n    previousGeneratedColumn = mapping.generatedColumn;\n\n    if (mapping.source != null) {\n      sourceIdx = this._sources.indexOf(mapping.source);\n      next += base64VLQ.encode(sourceIdx - previousSource);\n      previousSource = sourceIdx; // lines are stored 0-based in SourceMap spec version 3\n\n      next += base64VLQ.encode(mapping.originalLine - 1 - previousOriginalLine);\n      previousOriginalLine = mapping.originalLine - 1;\n      next += base64VLQ.encode(mapping.originalColumn - previousOriginalColumn);\n      previousOriginalColumn = mapping.originalColumn;\n\n      if (mapping.name != null) {\n        nameIdx = this._names.indexOf(mapping.name);\n        next += base64VLQ.encode(nameIdx - previousName);\n        previousName = nameIdx;\n      }\n    }\n\n    result += next;\n  }\n\n  return result;\n};\n\nSourceMapGenerator.prototype._generateSourcesContent = function SourceMapGenerator_generateSourcesContent(aSources, aSourceRoot) {\n  return aSources.map(function (source) {\n    if (!this._sourcesContents) {\n      return null;\n    }\n\n    if (aSourceRoot != null) {\n      source = util.relative(aSourceRoot, source);\n    }\n\n    var key = util.toSetString(source);\n    return Object.prototype.hasOwnProperty.call(this._sourcesContents, key) ? this._sourcesContents[key] : null;\n  }, this);\n};\n/**\n * Externalize the source map.\n */\n\n\nSourceMapGenerator.prototype.toJSON = function SourceMapGenerator_toJSON() {\n  var map = {\n    version: this._version,\n    sources: this._sources.toArray(),\n    names: this._names.toArray(),\n    mappings: this._serializeMappings()\n  };\n\n  if (this._file != null) {\n    map.file = this._file;\n  }\n\n  if (this._sourceRoot != null) {\n    map.sourceRoot = this._sourceRoot;\n  }\n\n  if (this._sourcesContents) {\n    map.sourcesContent = this._generateSourcesContent(map.sources, map.sourceRoot);\n  }\n\n  return map;\n};\n/**\n * Render the source map being generated to a string.\n */\n\n\nSourceMapGenerator.prototype.toString = function SourceMapGenerator_toString() {\n  return JSON.stringify(this.toJSON());\n};\n\nexports.SourceMapGenerator = SourceMapGenerator;","map":{"version":3,"sources":["/home/pro/Solutions/drawboard-light/node_modules/stacktrace-gps/node_modules/source-map/lib/source-map-generator.js"],"names":["base64VLQ","require","util","ArraySet","MappingList","SourceMapGenerator","aArgs","_file","getArg","_sourceRoot","_skipValidation","_sources","_names","_mappings","_sourcesContents","prototype","_version","fromSourceMap","SourceMapGenerator_fromSourceMap","aSourceMapConsumer","sourceRoot","generator","file","eachMapping","mapping","newMapping","generated","line","generatedLine","column","generatedColumn","source","relative","original","originalLine","originalColumn","name","addMapping","sources","forEach","sourceFile","content","sourceContentFor","setSourceContent","SourceMapGenerator_addMapping","_validateMapping","String","has","add","SourceMapGenerator_setSourceContent","aSourceFile","aSourceContent","Object","create","toSetString","keys","length","applySourceMap","SourceMapGenerator_applySourceMap","aSourceMapPath","Error","newSources","newNames","unsortedForEach","originalPositionFor","join","SourceMapGenerator_validateMapping","aGenerated","aOriginal","aSource","aName","JSON","stringify","_serializeMappings","SourceMapGenerator_serializeMappings","previousGeneratedColumn","previousGeneratedLine","previousOriginalColumn","previousOriginalLine","previousName","previousSource","result","next","nameIdx","sourceIdx","mappings","toArray","i","len","compareByGeneratedPositionsInflated","encode","indexOf","_generateSourcesContent","SourceMapGenerator_generateSourcesContent","aSources","aSourceRoot","map","key","hasOwnProperty","call","toJSON","SourceMapGenerator_toJSON","version","names","sourcesContent","toString","SourceMapGenerator_toString","exports"],"mappings":"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","sourcesContent":["/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\nvar base64VLQ = require('./base64-vlq');\nvar util = require('./util');\nvar ArraySet = require('./array-set').ArraySet;\nvar MappingList = require('./mapping-list').MappingList;\n\n/**\n * An instance of the SourceMapGenerator represents a source map which is\n * being built incrementally. You may pass an object with the following\n * properties:\n *\n *   - file: The filename of the generated source.\n *   - sourceRoot: A root for all relative URLs in this source map.\n */\nfunction SourceMapGenerator(aArgs) {\n  if (!aArgs) {\n    aArgs = {};\n  }\n  this._file = util.getArg(aArgs, 'file', null);\n  this._sourceRoot = util.getArg(aArgs, 'sourceRoot', null);\n  this._skipValidation = util.getArg(aArgs, 'skipValidation', false);\n  this._sources = new ArraySet();\n  this._names = new ArraySet();\n  this._mappings = new MappingList();\n  this._sourcesContents = null;\n}\n\nSourceMapGenerator.prototype._version = 3;\n\n/**\n * Creates a new SourceMapGenerator based on a SourceMapConsumer\n *\n * @param aSourceMapConsumer The SourceMap.\n */\nSourceMapGenerator.fromSourceMap =\n  function SourceMapGenerator_fromSourceMap(aSourceMapConsumer) {\n    var sourceRoot = aSourceMapConsumer.sourceRoot;\n    var generator = new SourceMapGenerator({\n      file: aSourceMapConsumer.file,\n      sourceRoot: sourceRoot\n    });\n    aSourceMapConsumer.eachMapping(function (mapping) {\n      var newMapping = {\n        generated: {\n          line: mapping.generatedLine,\n          column: mapping.generatedColumn\n        }\n      };\n\n      if (mapping.source != null) {\n        newMapping.source = mapping.source;\n        if (sourceRoot != null) {\n          newMapping.source = util.relative(sourceRoot, newMapping.source);\n        }\n\n        newMapping.original = {\n          line: mapping.originalLine,\n          column: mapping.originalColumn\n        };\n\n        if (mapping.name != null) {\n          newMapping.name = mapping.name;\n        }\n      }\n\n      generator.addMapping(newMapping);\n    });\n    aSourceMapConsumer.sources.forEach(function (sourceFile) {\n      var content = aSourceMapConsumer.sourceContentFor(sourceFile);\n      if (content != null) {\n        generator.setSourceContent(sourceFile, content);\n      }\n    });\n    return generator;\n  };\n\n/**\n * Add a single mapping from original source line and column to the generated\n * source's line and column for this source map being created. The mapping\n * object should have the following properties:\n *\n *   - generated: An object with the generated line and column positions.\n *   - original: An object with the original line and column positions.\n *   - source: The original source file (relative to the sourceRoot).\n *   - name: An optional original token name for this mapping.\n */\nSourceMapGenerator.prototype.addMapping =\n  function SourceMapGenerator_addMapping(aArgs) {\n    var generated = util.getArg(aArgs, 'generated');\n    var original = util.getArg(aArgs, 'original', null);\n    var source = util.getArg(aArgs, 'source', null);\n    var name = util.getArg(aArgs, 'name', null);\n\n    if (!this._skipValidation) {\n      this._validateMapping(generated, original, source, name);\n    }\n\n    if (source != null) {\n      source = String(source);\n      if (!this._sources.has(source)) {\n        this._sources.add(source);\n      }\n    }\n\n    if (name != null) {\n      name = String(name);\n      if (!this._names.has(name)) {\n        this._names.add(name);\n      }\n    }\n\n    this._mappings.add({\n      generatedLine: generated.line,\n      generatedColumn: generated.column,\n      originalLine: original != null && original.line,\n      originalColumn: original != null && original.column,\n      source: source,\n      name: name\n    });\n  };\n\n/**\n * Set the source content for a source file.\n */\nSourceMapGenerator.prototype.setSourceContent =\n  function SourceMapGenerator_setSourceContent(aSourceFile, aSourceContent) {\n    var source = aSourceFile;\n    if (this._sourceRoot != null) {\n      source = util.relative(this._sourceRoot, source);\n    }\n\n    if (aSourceContent != null) {\n      // Add the source content to the _sourcesContents map.\n      // Create a new _sourcesContents map if the property is null.\n      if (!this._sourcesContents) {\n        this._sourcesContents = Object.create(null);\n      }\n      this._sourcesContents[util.toSetString(source)] = aSourceContent;\n    } else if (this._sourcesContents) {\n      // Remove the source file from the _sourcesContents map.\n      // If the _sourcesContents map is empty, set the property to null.\n      delete this._sourcesContents[util.toSetString(source)];\n      if (Object.keys(this._sourcesContents).length === 0) {\n        this._sourcesContents = null;\n      }\n    }\n  };\n\n/**\n * Applies the mappings of a sub-source-map for a specific source file to the\n * source map being generated. Each mapping to the supplied source file is\n * rewritten using the supplied source map. Note: The resolution for the\n * resulting mappings is the minimium of this map and the supplied map.\n *\n * @param aSourceMapConsumer The source map to be applied.\n * @param aSourceFile Optional. The filename of the source file.\n *        If omitted, SourceMapConsumer's file property will be used.\n * @param aSourceMapPath Optional. The dirname of the path to the source map\n *        to be applied. If relative, it is relative to the SourceMapConsumer.\n *        This parameter is needed when the two source maps aren't in the same\n *        directory, and the source map to be applied contains relative source\n *        paths. If so, those relative source paths need to be rewritten\n *        relative to the SourceMapGenerator.\n */\nSourceMapGenerator.prototype.applySourceMap =\n  function SourceMapGenerator_applySourceMap(aSourceMapConsumer, aSourceFile, aSourceMapPath) {\n    var sourceFile = aSourceFile;\n    // If aSourceFile is omitted, we will use the file property of the SourceMap\n    if (aSourceFile == null) {\n      if (aSourceMapConsumer.file == null) {\n        throw new Error(\n          'SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, ' +\n          'or the source map\\'s \"file\" property. Both were omitted.'\n        );\n      }\n      sourceFile = aSourceMapConsumer.file;\n    }\n    var sourceRoot = this._sourceRoot;\n    // Make \"sourceFile\" relative if an absolute Url is passed.\n    if (sourceRoot != null) {\n      sourceFile = util.relative(sourceRoot, sourceFile);\n    }\n    // Applying the SourceMap can add and remove items from the sources and\n    // the names array.\n    var newSources = new ArraySet();\n    var newNames = new ArraySet();\n\n    // Find mappings for the \"sourceFile\"\n    this._mappings.unsortedForEach(function (mapping) {\n      if (mapping.source === sourceFile && mapping.originalLine != null) {\n        // Check if it can be mapped by the source map, then update the mapping.\n        var original = aSourceMapConsumer.originalPositionFor({\n          line: mapping.originalLine,\n          column: mapping.originalColumn\n        });\n        if (original.source != null) {\n          // Copy mapping\n          mapping.source = original.source;\n          if (aSourceMapPath != null) {\n            mapping.source = util.join(aSourceMapPath, mapping.source)\n          }\n          if (sourceRoot != null) {\n            mapping.source = util.relative(sourceRoot, mapping.source);\n          }\n          mapping.originalLine = original.line;\n          mapping.originalColumn = original.column;\n          if (original.name != null) {\n            mapping.name = original.name;\n          }\n        }\n      }\n\n      var source = mapping.source;\n      if (source != null && !newSources.has(source)) {\n        newSources.add(source);\n      }\n\n      var name = mapping.name;\n      if (name != null && !newNames.has(name)) {\n        newNames.add(name);\n      }\n\n    }, this);\n    this._sources = newSources;\n    this._names = newNames;\n\n    // Copy sourcesContents of applied map.\n    aSourceMapConsumer.sources.forEach(function (sourceFile) {\n      var content = aSourceMapConsumer.sourceContentFor(sourceFile);\n      if (content != null) {\n        if (aSourceMapPath != null) {\n          sourceFile = util.join(aSourceMapPath, sourceFile);\n        }\n        if (sourceRoot != null) {\n          sourceFile = util.relative(sourceRoot, sourceFile);\n        }\n        this.setSourceContent(sourceFile, content);\n      }\n    }, this);\n  };\n\n/**\n * A mapping can have one of the three levels of data:\n *\n *   1. Just the generated position.\n *   2. The Generated position, original position, and original source.\n *   3. Generated and original position, original source, as well as a name\n *      token.\n *\n * To maintain consistency, we validate that any new mapping being added falls\n * in to one of these categories.\n */\nSourceMapGenerator.prototype._validateMapping =\n  function SourceMapGenerator_validateMapping(aGenerated, aOriginal, aSource,\n                                              aName) {\n    if (aGenerated && 'line' in aGenerated && 'column' in aGenerated\n        && aGenerated.line > 0 && aGenerated.column >= 0\n        && !aOriginal && !aSource && !aName) {\n      // Case 1.\n      return;\n    }\n    else if (aGenerated && 'line' in aGenerated && 'column' in aGenerated\n             && aOriginal && 'line' in aOriginal && 'column' in aOriginal\n             && aGenerated.line > 0 && aGenerated.column >= 0\n             && aOriginal.line > 0 && aOriginal.column >= 0\n             && aSource) {\n      // Cases 2 and 3.\n      return;\n    }\n    else {\n      throw new Error('Invalid mapping: ' + JSON.stringify({\n        generated: aGenerated,\n        source: aSource,\n        original: aOriginal,\n        name: aName\n      }));\n    }\n  };\n\n/**\n * Serialize the accumulated mappings in to the stream of base 64 VLQs\n * specified by the source map format.\n */\nSourceMapGenerator.prototype._serializeMappings =\n  function SourceMapGenerator_serializeMappings() {\n    var previousGeneratedColumn = 0;\n    var previousGeneratedLine = 1;\n    var previousOriginalColumn = 0;\n    var previousOriginalLine = 0;\n    var previousName = 0;\n    var previousSource = 0;\n    var result = '';\n    var next;\n    var mapping;\n    var nameIdx;\n    var sourceIdx;\n\n    var mappings = this._mappings.toArray();\n    for (var i = 0, len = mappings.length; i < len; i++) {\n      mapping = mappings[i];\n      next = ''\n\n      if (mapping.generatedLine !== previousGeneratedLine) {\n        previousGeneratedColumn = 0;\n        while (mapping.generatedLine !== previousGeneratedLine) {\n          next += ';';\n          previousGeneratedLine++;\n        }\n      }\n      else {\n        if (i > 0) {\n          if (!util.compareByGeneratedPositionsInflated(mapping, mappings[i - 1])) {\n            continue;\n          }\n          next += ',';\n        }\n      }\n\n      next += base64VLQ.encode(mapping.generatedColumn\n                                 - previousGeneratedColumn);\n      previousGeneratedColumn = mapping.generatedColumn;\n\n      if (mapping.source != null) {\n        sourceIdx = this._sources.indexOf(mapping.source);\n        next += base64VLQ.encode(sourceIdx - previousSource);\n        previousSource = sourceIdx;\n\n        // lines are stored 0-based in SourceMap spec version 3\n        next += base64VLQ.encode(mapping.originalLine - 1\n                                   - previousOriginalLine);\n        previousOriginalLine = mapping.originalLine - 1;\n\n        next += base64VLQ.encode(mapping.originalColumn\n                                   - previousOriginalColumn);\n        previousOriginalColumn = mapping.originalColumn;\n\n        if (mapping.name != null) {\n          nameIdx = this._names.indexOf(mapping.name);\n          next += base64VLQ.encode(nameIdx - previousName);\n          previousName = nameIdx;\n        }\n      }\n\n      result += next;\n    }\n\n    return result;\n  };\n\nSourceMapGenerator.prototype._generateSourcesContent =\n  function SourceMapGenerator_generateSourcesContent(aSources, aSourceRoot) {\n    return aSources.map(function (source) {\n      if (!this._sourcesContents) {\n        return null;\n      }\n      if (aSourceRoot != null) {\n        source = util.relative(aSourceRoot, source);\n      }\n      var key = util.toSetString(source);\n      return Object.prototype.hasOwnProperty.call(this._sourcesContents, key)\n        ? this._sourcesContents[key]\n        : null;\n    }, this);\n  };\n\n/**\n * Externalize the source map.\n */\nSourceMapGenerator.prototype.toJSON =\n  function SourceMapGenerator_toJSON() {\n    var map = {\n      version: this._version,\n      sources: this._sources.toArray(),\n      names: this._names.toArray(),\n      mappings: this._serializeMappings()\n    };\n    if (this._file != null) {\n      map.file = this._file;\n    }\n    if (this._sourceRoot != null) {\n      map.sourceRoot = this._sourceRoot;\n    }\n    if (this._sourcesContents) {\n      map.sourcesContent = this._generateSourcesContent(map.sources, map.sourceRoot);\n    }\n\n    return map;\n  };\n\n/**\n * Render the source map being generated to a string.\n */\nSourceMapGenerator.prototype.toString =\n  function SourceMapGenerator_toString() {\n    return JSON.stringify(this.toJSON());\n  };\n\nexports.SourceMapGenerator = SourceMapGenerator;\n"]},"metadata":{},"sourceType":"script"}