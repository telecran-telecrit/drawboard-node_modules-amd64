{"ast":null,"code":"var _jsxFileName = \"/home/pro/Solutions/drawboard-light/src/actions/actionMenu.tsx\";\nimport React from \"react\";\nimport { menu, palette } from \"../components/icons\";\nimport { ToolButton } from \"../components/ToolButton\";\nimport { t } from \"../i18n\";\nimport { showSelectedShapeActions, getNonDeletedElements } from \"../element\";\nimport { register } from \"./register\";\nimport { allowFullScreen, exitFullScreen, isFullScreen } from \"../utils\";\nimport { KEYS } from \"../keys\";\nimport { HelpIcon } from \"../components/HelpIcon\";\nexport const actionToggleCanvasMenu = register({\n  name: \"toggleCanvasMenu\",\n  perform: (_, appState) => ({\n    appState: { ...appState,\n      openMenu: appState.openMenu === \"canvas\" ? null : \"canvas\"\n    },\n    commitToHistory: false\n  }),\n  PanelComponent: ({\n    appState,\n    updateData\n  }) => /*#__PURE__*/React.createElement(ToolButton, {\n    type: \"button\",\n    icon: menu,\n    \"aria-label\": t(\"buttons.menu\"),\n    onClick: updateData,\n    selected: appState.openMenu === \"canvas\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 5\n    }\n  })\n});\nexport const actionToggleEditMenu = register({\n  name: \"toggleEditMenu\",\n  perform: (_elements, appState) => ({\n    appState: { ...appState,\n      openMenu: appState.openMenu === \"shape\" ? null : \"shape\"\n    },\n    commitToHistory: false\n  }),\n  PanelComponent: ({\n    elements,\n    appState,\n    updateData\n  }) => /*#__PURE__*/React.createElement(ToolButton, {\n    visible: showSelectedShapeActions(appState, getNonDeletedElements(elements)),\n    type: \"button\",\n    icon: palette,\n    \"aria-label\": t(\"buttons.edit\"),\n    onClick: updateData,\n    selected: appState.openMenu === \"shape\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 5\n    }\n  })\n});\nexport const actionFullScreen = register({\n  name: \"toggleFullScreen\",\n  perform: () => {\n    if (!isFullScreen()) {\n      allowFullScreen();\n    }\n\n    if (isFullScreen()) {\n      exitFullScreen();\n    }\n\n    return {\n      commitToHistory: false\n    };\n  },\n  keyTest: event => event.keyCode === KEYS.F_KEY_CODE\n});\nexport const actionShortcuts = register({\n  name: \"toggleShortcuts\",\n  perform: (_elements, appState) => {\n    return {\n      appState: { ...appState,\n        showShortcutsDialog: true\n      },\n      commitToHistory: false\n    };\n  },\n  PanelComponent: ({\n    updateData\n  }) => /*#__PURE__*/React.createElement(HelpIcon, {\n    title: t(\"shortcutsDialog.title\"),\n    onClick: updateData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 5\n    }\n  }),\n  keyTest: event => event.key === KEYS.QUESTION_MARK\n});","map":{"version":3,"sources":["/home/pro/Solutions/drawboard-light/src/actions/actionMenu.tsx"],"names":["React","menu","palette","ToolButton","t","showSelectedShapeActions","getNonDeletedElements","register","allowFullScreen","exitFullScreen","isFullScreen","KEYS","HelpIcon","actionToggleCanvasMenu","name","perform","_","appState","openMenu","commitToHistory","PanelComponent","updateData","actionToggleEditMenu","_elements","elements","actionFullScreen","keyTest","event","keyCode","F_KEY_CODE","actionShortcuts","showShortcutsDialog","key","QUESTION_MARK"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { menu, palette } from \"../components/icons\";\nimport { ToolButton } from \"../components/ToolButton\";\nimport { t } from \"../i18n\";\nimport { showSelectedShapeActions, getNonDeletedElements } from \"../element\";\nimport { register } from \"./register\";\nimport { allowFullScreen, exitFullScreen, isFullScreen } from \"../utils\";\nimport { KEYS } from \"../keys\";\nimport { HelpIcon } from \"../components/HelpIcon\";\n\nexport const actionToggleCanvasMenu = register({\n  name: \"toggleCanvasMenu\",\n  perform: (_, appState) => ({\n    appState: {\n      ...appState,\n      openMenu: appState.openMenu === \"canvas\" ? null : \"canvas\",\n    },\n    commitToHistory: false,\n  }),\n  PanelComponent: ({ appState, updateData }) => (\n    <ToolButton\n      type=\"button\"\n      icon={menu}\n      aria-label={t(\"buttons.menu\")}\n      onClick={updateData}\n      selected={appState.openMenu === \"canvas\"}\n    />\n  ),\n});\n\nexport const actionToggleEditMenu = register({\n  name: \"toggleEditMenu\",\n  perform: (_elements, appState) => ({\n    appState: {\n      ...appState,\n      openMenu: appState.openMenu === \"shape\" ? null : \"shape\",\n    },\n    commitToHistory: false,\n  }),\n  PanelComponent: ({ elements, appState, updateData }) => (\n    <ToolButton\n      visible={showSelectedShapeActions(\n        appState,\n        getNonDeletedElements(elements),\n      )}\n      type=\"button\"\n      icon={palette}\n      aria-label={t(\"buttons.edit\")}\n      onClick={updateData}\n      selected={appState.openMenu === \"shape\"}\n    />\n  ),\n});\n\nexport const actionFullScreen = register({\n  name: \"toggleFullScreen\",\n  perform: () => {\n    if (!isFullScreen()) {\n      allowFullScreen();\n    }\n    if (isFullScreen()) {\n      exitFullScreen();\n    }\n    return {\n      commitToHistory: false,\n    };\n  },\n  keyTest: (event) => event.keyCode === KEYS.F_KEY_CODE,\n});\n\nexport const actionShortcuts = register({\n  name: \"toggleShortcuts\",\n  perform: (_elements, appState) => {\n    return {\n      appState: {\n        ...appState,\n        showShortcutsDialog: true,\n      },\n      commitToHistory: false,\n    };\n  },\n  PanelComponent: ({ updateData }) => (\n    <HelpIcon title={t(\"shortcutsDialog.title\")} onClick={updateData} />\n  ),\n  keyTest: (event) => event.key === KEYS.QUESTION_MARK,\n});\n"]},"metadata":{},"sourceType":"module"}