{"ast":null,"code":"var _jsxFileName = \"/home/pro/Solutions/drawboard-light/src/actions/actionDuplicateSelection.tsx\";\nimport React from \"react\";\nimport { KEYS } from \"../keys\";\nimport { register } from \"./register\";\nimport { duplicateElement, getNonDeletedElements } from \"../element\";\nimport { isSomeElementSelected } from \"../scene\";\nimport { ToolButton } from \"../components/ToolButton\";\nimport { clone } from \"../components/icons\";\nimport { t } from \"../i18n\";\nimport { getShortcutKey } from \"../utils\";\nexport const actionDuplicateSelection = register({\n  name: \"duplicateSelection\",\n  perform: (elements, appState) => {\n    return {\n      appState,\n      elements: elements.reduce((acc, element) => {\n        if (appState.selectedElementIds[element.id]) {\n          const newElement = duplicateElement(element, {\n            x: element.x + 10,\n            y: element.y + 10\n          });\n          appState.selectedElementIds[newElement.id] = true;\n          delete appState.selectedElementIds[element.id];\n          return acc.concat([element, newElement]);\n        }\n\n        return acc.concat(element);\n      }, []),\n      commitToHistory: true\n    };\n  },\n  contextItemLabel: \"labels.duplicateSelection\",\n  keyTest: event => event[KEYS.CTRL_OR_CMD] && event.key === \"d\",\n  PanelComponent: ({\n    elements,\n    appState,\n    updateData\n  }) => /*#__PURE__*/React.createElement(ToolButton, {\n    type: \"button\",\n    icon: clone,\n    title: `${t(\"labels.duplicateSelection\")} — ${getShortcutKey(\"CtrlOrCmd+D\")}`,\n    \"aria-label\": t(\"labels.duplicateSelection\"),\n    onClick: () => updateData(null),\n    visible: isSomeElementSelected(getNonDeletedElements(elements), appState),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 5\n    }\n  })\n});","map":{"version":3,"sources":["/home/pro/Solutions/drawboard-light/src/actions/actionDuplicateSelection.tsx"],"names":["React","KEYS","register","duplicateElement","getNonDeletedElements","isSomeElementSelected","ToolButton","clone","t","getShortcutKey","actionDuplicateSelection","name","perform","elements","appState","reduce","acc","element","selectedElementIds","id","newElement","x","y","concat","commitToHistory","contextItemLabel","keyTest","event","CTRL_OR_CMD","key","PanelComponent","updateData"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,QAAqB,SAArB;AACA,SAASC,QAAT,QAAyB,YAAzB;AAEA,SAASC,gBAAT,EAA2BC,qBAA3B,QAAwD,YAAxD;AACA,SAASC,qBAAT,QAAsC,UAAtC;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,SAASC,KAAT,QAAsB,qBAAtB;AACA,SAASC,CAAT,QAAkB,SAAlB;AACA,SAASC,cAAT,QAA+B,UAA/B;AAEA,OAAO,MAAMC,wBAAwB,GAAGR,QAAQ,CAAC;AAC/CS,EAAAA,IAAI,EAAE,oBADyC;AAE/CC,EAAAA,OAAO,EAAE,CAACC,QAAD,EAAWC,QAAX,KAAwB;AAC/B,WAAO;AACLA,MAAAA,QADK;AAELD,MAAAA,QAAQ,EAAEA,QAAQ,CAACE,MAAT,CACR,CAACC,GAAD,EAAgCC,OAAhC,KAA+D;AAC7D,YAAIH,QAAQ,CAACI,kBAAT,CAA4BD,OAAO,CAACE,EAApC,CAAJ,EAA6C;AAC3C,gBAAMC,UAAU,GAAGjB,gBAAgB,CAACc,OAAD,EAAU;AAC3CI,YAAAA,CAAC,EAAEJ,OAAO,CAACI,CAAR,GAAY,EAD4B;AAE3CC,YAAAA,CAAC,EAAEL,OAAO,CAACK,CAAR,GAAY;AAF4B,WAAV,CAAnC;AAIAR,UAAAA,QAAQ,CAACI,kBAAT,CAA4BE,UAAU,CAACD,EAAvC,IAA6C,IAA7C;AACA,iBAAOL,QAAQ,CAACI,kBAAT,CAA4BD,OAAO,CAACE,EAApC,CAAP;AACA,iBAAOH,GAAG,CAACO,MAAJ,CAAW,CAACN,OAAD,EAAUG,UAAV,CAAX,CAAP;AACD;;AACD,eAAOJ,GAAG,CAACO,MAAJ,CAAWN,OAAX,CAAP;AACD,OAZO,EAaR,EAbQ,CAFL;AAiBLO,MAAAA,eAAe,EAAE;AAjBZ,KAAP;AAmBD,GAtB8C;AAuB/CC,EAAAA,gBAAgB,EAAE,2BAvB6B;AAwB/CC,EAAAA,OAAO,EAAGC,KAAD,IAAWA,KAAK,CAAC1B,IAAI,CAAC2B,WAAN,CAAL,IAA2BD,KAAK,CAACE,GAAN,KAAc,GAxBd;AAyB/CC,EAAAA,cAAc,EAAE,CAAC;AAAEjB,IAAAA,QAAF;AAAYC,IAAAA,QAAZ;AAAsBiB,IAAAA;AAAtB,GAAD,kBACd,oBAAC,UAAD;AACE,IAAA,IAAI,EAAC,QADP;AAEE,IAAA,IAAI,EAAExB,KAFR;AAGE,IAAA,KAAK,EAAG,GAAEC,CAAC,CAAC,2BAAD,CAA8B,MAAKC,cAAc,CAC1D,aAD0D,CAE1D,EALJ;AAME,kBAAYD,CAAC,CAAC,2BAAD,CANf;AAOE,IAAA,OAAO,EAAE,MAAMuB,UAAU,CAAC,IAAD,CAP3B;AAQE,IAAA,OAAO,EAAE1B,qBAAqB,CAACD,qBAAqB,CAACS,QAAD,CAAtB,EAAkCC,QAAlC,CARhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA1B6C,CAAD,CAAzC","sourcesContent":["import React from \"react\";\nimport { KEYS } from \"../keys\";\nimport { register } from \"./register\";\nimport { ExcalidrawElement } from \"../element/types\";\nimport { duplicateElement, getNonDeletedElements } from \"../element\";\nimport { isSomeElementSelected } from \"../scene\";\nimport { ToolButton } from \"../components/ToolButton\";\nimport { clone } from \"../components/icons\";\nimport { t } from \"../i18n\";\nimport { getShortcutKey } from \"../utils\";\n\nexport const actionDuplicateSelection = register({\n  name: \"duplicateSelection\",\n  perform: (elements, appState) => {\n    return {\n      appState,\n      elements: elements.reduce(\n        (acc: Array<ExcalidrawElement>, element: ExcalidrawElement) => {\n          if (appState.selectedElementIds[element.id]) {\n            const newElement = duplicateElement(element, {\n              x: element.x + 10,\n              y: element.y + 10,\n            });\n            appState.selectedElementIds[newElement.id] = true;\n            delete appState.selectedElementIds[element.id];\n            return acc.concat([element, newElement]);\n          }\n          return acc.concat(element);\n        },\n        [],\n      ),\n      commitToHistory: true,\n    };\n  },\n  contextItemLabel: \"labels.duplicateSelection\",\n  keyTest: (event) => event[KEYS.CTRL_OR_CMD] && event.key === \"d\",\n  PanelComponent: ({ elements, appState, updateData }) => (\n    <ToolButton\n      type=\"button\"\n      icon={clone}\n      title={`${t(\"labels.duplicateSelection\")} — ${getShortcutKey(\n        \"CtrlOrCmd+D\",\n      )}`}\n      aria-label={t(\"labels.duplicateSelection\")}\n      onClick={() => updateData(null)}\n      visible={isSomeElementSelected(getNonDeletedElements(elements), appState)}\n    />\n  ),\n});\n"]},"metadata":{},"sourceType":"module"}