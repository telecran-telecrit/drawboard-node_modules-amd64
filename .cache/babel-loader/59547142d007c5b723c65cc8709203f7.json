{"ast":null,"code":"import { KEYS } from \"../keys\";\nimport { selectNode } from \"../utils\";\n\n// When WYSIWYG text ends with white spaces, the text gets vertically misaligned\n// in order to fix this issue, we remove those white spaces\nfunction trimText(text) {\n  return text.trim();\n}\n\nexport function textWysiwyg(_ref) {\n  var initText = _ref.initText,\n      x = _ref.x,\n      y = _ref.y,\n      strokeColor = _ref.strokeColor,\n      font = _ref.font,\n      opacity = _ref.opacity,\n      zoom = _ref.zoom,\n      onSubmit = _ref.onSubmit,\n      onCancel = _ref.onCancel;\n  // Using contenteditable here as it has dynamic width.\n  // But this solution has an issue — it allows to paste\n  // multiline text, which is not currently supported\n  var editable = document.createElement(\"div\");\n\n  try {\n    editable.contentEditable = \"plaintext-only\";\n  } catch (_unused) {\n    editable.contentEditable = \"true\";\n  }\n\n  editable.tabIndex = 0;\n  editable.innerText = initText;\n  editable.dataset.type = \"wysiwyg\";\n  Object.assign(editable.style, {\n    color: strokeColor,\n    position: \"fixed\",\n    opacity: opacity / 100,\n    top: \"\".concat(y, \"px\"),\n    left: \"\".concat(x, \"px\"),\n    transform: \"translate(-50%, -50%) scale(\".concat(zoom, \")\"),\n    textAlign: \"left\",\n    display: \"inline-block\",\n    font: font,\n    padding: \"4px\",\n    // This needs to have \"1px solid\" otherwise the carret doesn't show up\n    // the first time on Safari and Chrome!\n    outline: \"1px solid transparent\",\n    whiteSpace: \"nowrap\",\n    minHeight: \"1em\",\n    backfaceVisibility: \"hidden\"\n  });\n\n  editable.onpaste = function (ev) {\n    try {\n      var selection = window.getSelection();\n\n      if (!(selection === null || selection === void 0 ? void 0 : selection.rangeCount)) {\n        return;\n      }\n\n      selection.deleteFromDocument();\n\n      var _text = ev.clipboardData.getData(\"text\").replace(/\\r\\n?/g, \"\\n\");\n\n      var span = document.createElement(\"span\");\n      span.innerText = _text;\n      var range = selection.getRangeAt(0);\n      range.insertNode(span); // deselect\n\n      window.getSelection().removeAllRanges();\n      range.setStart(span, span.childNodes.length);\n      range.setEnd(span, span.childNodes.length);\n      selection.addRange(range);\n      ev.preventDefault();\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  editable.onkeydown = function (ev) {\n    if (ev.key === KEYS.ESCAPE) {\n      ev.preventDefault();\n\n      if (initText) {\n        editable.innerText = initText;\n        handleSubmit();\n        return;\n      }\n\n      cleanup();\n      return;\n    }\n\n    if (ev.key === KEYS.ENTER && !ev.shiftKey) {\n      ev.preventDefault();\n\n      if (ev.isComposing || ev.keyCode === 229) {\n        return;\n      }\n\n      handleSubmit();\n    }\n  };\n\n  editable.onblur = handleSubmit;\n\n  function stopEvent(ev) {\n    ev.stopPropagation();\n  }\n\n  function handleSubmit() {\n    if (editable.innerText) {\n      onSubmit(trimText(editable.innerText));\n    } else {\n      onCancel();\n    }\n\n    cleanup();\n  }\n\n  function cleanup() {\n    editable.onblur = null;\n    editable.onkeydown = null;\n    editable.onpaste = null;\n    window.removeEventListener(\"wheel\", stopEvent, true);\n    document.body.removeChild(editable);\n  }\n\n  window.addEventListener(\"wheel\", stopEvent, true);\n  document.body.appendChild(editable);\n  editable.focus();\n  selectNode(editable);\n}","map":{"version":3,"sources":["/home/pro/Solutions/drawboard-light/src/element/textWysiwyg.tsx"],"names":["KEYS","selectNode","trimText","text","trim","textWysiwyg","initText","x","y","strokeColor","font","opacity","zoom","onSubmit","onCancel","editable","document","createElement","contentEditable","tabIndex","innerText","dataset","type","Object","assign","style","color","position","top","left","transform","textAlign","display","padding","outline","whiteSpace","minHeight","backfaceVisibility","onpaste","ev","selection","window","getSelection","rangeCount","deleteFromDocument","clipboardData","getData","replace","span","range","getRangeAt","insertNode","removeAllRanges","setStart","childNodes","length","setEnd","addRange","preventDefault","error","console","onkeydown","key","ESCAPE","handleSubmit","cleanup","ENTER","shiftKey","isComposing","keyCode","onblur","stopEvent","stopPropagation","removeEventListener","body","removeChild","addEventListener","appendChild","focus"],"mappings":"AAAA,SAASA,IAAT,QAAqB,SAArB;AACA,SAASC,UAAT,QAA2B,UAA3B;;AAcA;AACA;AACA,SAASC,QAAT,CAAkBC,IAAlB,EAAgC;AAC9B,SAAOA,IAAI,CAACC,IAAL,EAAP;AACD;;AAED,OAAO,SAASC,WAAT,OAUe;AAAA,MATpBC,QASoB,QATpBA,QASoB;AAAA,MARpBC,CAQoB,QARpBA,CAQoB;AAAA,MAPpBC,CAOoB,QAPpBA,CAOoB;AAAA,MANpBC,WAMoB,QANpBA,WAMoB;AAAA,MALpBC,IAKoB,QALpBA,IAKoB;AAAA,MAJpBC,OAIoB,QAJpBA,OAIoB;AAAA,MAHpBC,IAGoB,QAHpBA,IAGoB;AAAA,MAFpBC,QAEoB,QAFpBA,QAEoB;AAAA,MADpBC,QACoB,QADpBA,QACoB;AACpB;AACA;AACA;AACA,MAAMC,QAAQ,GAAGC,QAAQ,CAACC,aAAT,CAAuB,KAAvB,CAAjB;;AACA,MAAI;AACFF,IAAAA,QAAQ,CAACG,eAAT,GAA2B,gBAA3B;AACD,GAFD,CAEE,gBAAM;AACNH,IAAAA,QAAQ,CAACG,eAAT,GAA2B,MAA3B;AACD;;AACDH,EAAAA,QAAQ,CAACI,QAAT,GAAoB,CAApB;AACAJ,EAAAA,QAAQ,CAACK,SAAT,GAAqBd,QAArB;AACAS,EAAAA,QAAQ,CAACM,OAAT,CAAiBC,IAAjB,GAAwB,SAAxB;AAEAC,EAAAA,MAAM,CAACC,MAAP,CAAcT,QAAQ,CAACU,KAAvB,EAA8B;AAC5BC,IAAAA,KAAK,EAAEjB,WADqB;AAE5BkB,IAAAA,QAAQ,EAAE,OAFkB;AAG5BhB,IAAAA,OAAO,EAAEA,OAAO,GAAG,GAHS;AAI5BiB,IAAAA,GAAG,YAAKpB,CAAL,OAJyB;AAK5BqB,IAAAA,IAAI,YAAKtB,CAAL,OALwB;AAM5BuB,IAAAA,SAAS,wCAAiClB,IAAjC,MANmB;AAO5BmB,IAAAA,SAAS,EAAE,MAPiB;AAQ5BC,IAAAA,OAAO,EAAE,cARmB;AAS5BtB,IAAAA,IAAI,EAAEA,IATsB;AAU5BuB,IAAAA,OAAO,EAAE,KAVmB;AAW5B;AACA;AACAC,IAAAA,OAAO,EAAE,uBAbmB;AAc5BC,IAAAA,UAAU,EAAE,QAdgB;AAe5BC,IAAAA,SAAS,EAAE,KAfiB;AAgB5BC,IAAAA,kBAAkB,EAAE;AAhBQ,GAA9B;;AAmBAtB,EAAAA,QAAQ,CAACuB,OAAT,GAAmB,UAAAC,EAAE,EAAI;AACvB,QAAI;AACF,UAAMC,SAAS,GAAGC,MAAM,CAACC,YAAP,EAAlB;;AACA,UAAI,EAACF,SAAD,aAACA,SAAD,uBAACA,SAAS,CAAEG,UAAZ,CAAJ,EAA4B;AAC1B;AACD;;AACDH,MAAAA,SAAS,CAACI,kBAAV;;AAEA,UAAMzC,KAAI,GAAGoC,EAAE,CAACM,aAAH,CAAkBC,OAAlB,CAA0B,MAA1B,EAAkCC,OAAlC,CAA0C,QAA1C,EAAoD,IAApD,CAAb;;AAEA,UAAMC,IAAI,GAAGhC,QAAQ,CAACC,aAAT,CAAuB,MAAvB,CAAb;AACA+B,MAAAA,IAAI,CAAC5B,SAAL,GAAiBjB,KAAjB;AACA,UAAM8C,KAAK,GAAGT,SAAS,CAACU,UAAV,CAAqB,CAArB,CAAd;AACAD,MAAAA,KAAK,CAACE,UAAN,CAAiBH,IAAjB,EAZE,CAcF;;AACAP,MAAAA,MAAM,CAACC,YAAP,GAAuBU,eAAvB;AACAH,MAAAA,KAAK,CAACI,QAAN,CAAeL,IAAf,EAAqBA,IAAI,CAACM,UAAL,CAAgBC,MAArC;AACAN,MAAAA,KAAK,CAACO,MAAN,CAAaR,IAAb,EAAmBA,IAAI,CAACM,UAAL,CAAgBC,MAAnC;AACAf,MAAAA,SAAS,CAACiB,QAAV,CAAmBR,KAAnB;AAEAV,MAAAA,EAAE,CAACmB,cAAH;AACD,KArBD,CAqBE,OAAOC,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACD;AACF,GAzBD;;AA2BA5C,EAAAA,QAAQ,CAAC8C,SAAT,GAAqB,UAAAtB,EAAE,EAAI;AACzB,QAAIA,EAAE,CAACuB,GAAH,KAAW9D,IAAI,CAAC+D,MAApB,EAA4B;AAC1BxB,MAAAA,EAAE,CAACmB,cAAH;;AACA,UAAIpD,QAAJ,EAAc;AACZS,QAAAA,QAAQ,CAACK,SAAT,GAAqBd,QAArB;AACA0D,QAAAA,YAAY;AACZ;AACD;;AACDC,MAAAA,OAAO;AACP;AACD;;AACD,QAAI1B,EAAE,CAACuB,GAAH,KAAW9D,IAAI,CAACkE,KAAhB,IAAyB,CAAC3B,EAAE,CAAC4B,QAAjC,EAA2C;AACzC5B,MAAAA,EAAE,CAACmB,cAAH;;AACA,UAAInB,EAAE,CAAC6B,WAAH,IAAkB7B,EAAE,CAAC8B,OAAH,KAAe,GAArC,EAA0C;AACxC;AACD;;AACDL,MAAAA,YAAY;AACb;AACF,GAlBD;;AAmBAjD,EAAAA,QAAQ,CAACuD,MAAT,GAAkBN,YAAlB;;AAEA,WAASO,SAAT,CAAmBhC,EAAnB,EAA8B;AAC5BA,IAAAA,EAAE,CAACiC,eAAH;AACD;;AAED,WAASR,YAAT,GAAwB;AACtB,QAAIjD,QAAQ,CAACK,SAAb,EAAwB;AACtBP,MAAAA,QAAQ,CAACX,QAAQ,CAACa,QAAQ,CAACK,SAAV,CAAT,CAAR;AACD,KAFD,MAEO;AACLN,MAAAA,QAAQ;AACT;;AACDmD,IAAAA,OAAO;AACR;;AAED,WAASA,OAAT,GAAmB;AACjBlD,IAAAA,QAAQ,CAACuD,MAAT,GAAkB,IAAlB;AACAvD,IAAAA,QAAQ,CAAC8C,SAAT,GAAqB,IAArB;AACA9C,IAAAA,QAAQ,CAACuB,OAAT,GAAmB,IAAnB;AACAG,IAAAA,MAAM,CAACgC,mBAAP,CAA2B,OAA3B,EAAoCF,SAApC,EAA+C,IAA/C;AACAvD,IAAAA,QAAQ,CAAC0D,IAAT,CAAcC,WAAd,CAA0B5D,QAA1B;AACD;;AAED0B,EAAAA,MAAM,CAACmC,gBAAP,CAAwB,OAAxB,EAAiCL,SAAjC,EAA4C,IAA5C;AACAvD,EAAAA,QAAQ,CAAC0D,IAAT,CAAcG,WAAd,CAA0B9D,QAA1B;AACAA,EAAAA,QAAQ,CAAC+D,KAAT;AACA7E,EAAAA,UAAU,CAACc,QAAD,CAAV;AACD","sourcesContent":["import { KEYS } from \"../keys\";\nimport { selectNode } from \"../utils\";\n\ntype TextWysiwygParams = {\n  initText: string;\n  x: number;\n  y: number;\n  strokeColor: string;\n  font: string;\n  opacity: number;\n  zoom: number;\n  onSubmit: (text: string) => void;\n  onCancel: () => void;\n};\n\n// When WYSIWYG text ends with white spaces, the text gets vertically misaligned\n// in order to fix this issue, we remove those white spaces\nfunction trimText(text: string) {\n  return text.trim();\n}\n\nexport function textWysiwyg({\n  initText,\n  x,\n  y,\n  strokeColor,\n  font,\n  opacity,\n  zoom,\n  onSubmit,\n  onCancel,\n}: TextWysiwygParams) {\n  // Using contenteditable here as it has dynamic width.\n  // But this solution has an issue — it allows to paste\n  // multiline text, which is not currently supported\n  const editable = document.createElement(\"div\");\n  try {\n    editable.contentEditable = \"plaintext-only\";\n  } catch {\n    editable.contentEditable = \"true\";\n  }\n  editable.tabIndex = 0;\n  editable.innerText = initText;\n  editable.dataset.type = \"wysiwyg\";\n\n  Object.assign(editable.style, {\n    color: strokeColor,\n    position: \"fixed\",\n    opacity: opacity / 100,\n    top: `${y}px`,\n    left: `${x}px`,\n    transform: `translate(-50%, -50%) scale(${zoom})`,\n    textAlign: \"left\",\n    display: \"inline-block\",\n    font: font,\n    padding: \"4px\",\n    // This needs to have \"1px solid\" otherwise the carret doesn't show up\n    // the first time on Safari and Chrome!\n    outline: \"1px solid transparent\",\n    whiteSpace: \"nowrap\",\n    minHeight: \"1em\",\n    backfaceVisibility: \"hidden\",\n  });\n\n  editable.onpaste = ev => {\n    try {\n      const selection = window.getSelection();\n      if (!selection?.rangeCount) {\n        return;\n      }\n      selection.deleteFromDocument();\n\n      const text = ev.clipboardData!.getData(\"text\").replace(/\\r\\n?/g, \"\\n\");\n\n      const span = document.createElement(\"span\");\n      span.innerText = text;\n      const range = selection.getRangeAt(0);\n      range.insertNode(span);\n\n      // deselect\n      window.getSelection()!.removeAllRanges();\n      range.setStart(span, span.childNodes.length);\n      range.setEnd(span, span.childNodes.length);\n      selection.addRange(range);\n\n      ev.preventDefault();\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  editable.onkeydown = ev => {\n    if (ev.key === KEYS.ESCAPE) {\n      ev.preventDefault();\n      if (initText) {\n        editable.innerText = initText;\n        handleSubmit();\n        return;\n      }\n      cleanup();\n      return;\n    }\n    if (ev.key === KEYS.ENTER && !ev.shiftKey) {\n      ev.preventDefault();\n      if (ev.isComposing || ev.keyCode === 229) {\n        return;\n      }\n      handleSubmit();\n    }\n  };\n  editable.onblur = handleSubmit;\n\n  function stopEvent(ev: Event) {\n    ev.stopPropagation();\n  }\n\n  function handleSubmit() {\n    if (editable.innerText) {\n      onSubmit(trimText(editable.innerText));\n    } else {\n      onCancel();\n    }\n    cleanup();\n  }\n\n  function cleanup() {\n    editable.onblur = null;\n    editable.onkeydown = null;\n    editable.onpaste = null;\n    window.removeEventListener(\"wheel\", stopEvent, true);\n    document.body.removeChild(editable);\n  }\n\n  window.addEventListener(\"wheel\", stopEvent, true);\n  document.body.appendChild(editable);\n  editable.focus();\n  selectNode(editable);\n}\n"]},"metadata":{},"sourceType":"module"}