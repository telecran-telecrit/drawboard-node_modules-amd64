{"ast":null,"code":"import { OMIT_SIDES_FOR_MULTIPLE_ELEMENTS, handlerRectanglesFromCoords, handlerRectangles } from \"./handlerRectangles\";\n\nfunction isInHandlerRect(handler, x, y) {\n  return x >= handler[0] && x <= handler[0] + handler[2] && y >= handler[1] && y <= handler[1] + handler[3];\n}\n\nexport function resizeTest(element, appState, x, y, zoom, pointerType) {\n  if (!appState.selectedElementIds[element.id]) {\n    return false;\n  }\n\n  const {\n    rotation: rotationHandler,\n    ...handlers\n  } = handlerRectangles(element, zoom, pointerType);\n\n  if (rotationHandler && isInHandlerRect(rotationHandler, x, y)) {\n    return \"rotation\";\n  }\n\n  if (element.type === \"text\") {\n    // can't resize text elements\n    return false;\n  }\n\n  const filter = Object.keys(handlers).filter(key => {\n    const handler = handlers[key];\n\n    if (!handler) {\n      return false;\n    }\n\n    return isInHandlerRect(handler, x, y);\n  });\n\n  if (filter.length > 0) {\n    return filter[0];\n  }\n\n  return false;\n}\nexport function getElementWithResizeHandler(elements, appState, {\n  x,\n  y\n}, zoom, pointerType) {\n  return elements.reduce((result, element) => {\n    if (result) {\n      return result;\n    }\n\n    const resizeHandle = resizeTest(element, appState, x, y, zoom, pointerType);\n    return resizeHandle ? {\n      element,\n      resizeHandle\n    } : null;\n  }, null);\n}\nexport function getResizeHandlerFromCoords([x1, y1, x2, y2], {\n  x,\n  y\n}, zoom, pointerType) {\n  const handlers = handlerRectanglesFromCoords([x1, y1, x2, y2], 0, zoom, pointerType, OMIT_SIDES_FOR_MULTIPLE_ELEMENTS);\n  const found = Object.keys(handlers).find(key => {\n    const handler = handlers[key];\n    return handler && isInHandlerRect(handler, x, y);\n  });\n  return found || false;\n}\n/*\n * Returns bi-directional cursor for the element being resized\n */\n\nexport function getCursorForResizingElement(resizingElement) {\n  const {\n    element,\n    resizeHandle\n  } = resizingElement;\n  const shouldSwapCursors = element && Math.sign(element.height) * Math.sign(element.width) === -1;\n  let cursor = null;\n\n  switch (resizeHandle) {\n    case \"n\":\n    case \"s\":\n      cursor = \"ns\";\n      break;\n\n    case \"w\":\n    case \"e\":\n      cursor = \"ew\";\n      break;\n\n    case \"nw\":\n    case \"se\":\n      if (shouldSwapCursors) {\n        cursor = \"nesw\";\n      } else {\n        cursor = \"nwse\";\n      }\n\n      break;\n\n    case \"ne\":\n    case \"sw\":\n      if (shouldSwapCursors) {\n        cursor = \"nwse\";\n      } else {\n        cursor = \"nesw\";\n      }\n\n      break;\n\n    case \"rotation\":\n      cursor = \"ew\";\n      break;\n  }\n\n  return cursor ? `${cursor}-resize` : \"\";\n}\nexport function normalizeResizeHandle(element, resizeHandle) {\n  if (element.width >= 0 && element.height >= 0) {\n    return resizeHandle;\n  }\n\n  if (element.width < 0 && element.height < 0) {\n    switch (resizeHandle) {\n      case \"nw\":\n        return \"se\";\n\n      case \"ne\":\n        return \"sw\";\n\n      case \"se\":\n        return \"nw\";\n\n      case \"sw\":\n        return \"ne\";\n    }\n  } else if (element.width < 0) {\n    switch (resizeHandle) {\n      case \"nw\":\n        return \"ne\";\n\n      case \"ne\":\n        return \"nw\";\n\n      case \"se\":\n        return \"sw\";\n\n      case \"sw\":\n        return \"se\";\n\n      case \"e\":\n        return \"w\";\n\n      case \"w\":\n        return \"e\";\n    }\n  } else {\n    switch (resizeHandle) {\n      case \"nw\":\n        return \"sw\";\n\n      case \"ne\":\n        return \"se\";\n\n      case \"se\":\n        return \"ne\";\n\n      case \"sw\":\n        return \"nw\";\n\n      case \"n\":\n        return \"s\";\n\n      case \"s\":\n        return \"n\";\n    }\n  }\n\n  return resizeHandle;\n}","map":{"version":3,"sources":["/home/pro/Solutions/drawboard-light/src/element/resizeTest.ts"],"names":["OMIT_SIDES_FOR_MULTIPLE_ELEMENTS","handlerRectanglesFromCoords","handlerRectangles","isInHandlerRect","handler","x","y","resizeTest","element","appState","zoom","pointerType","selectedElementIds","id","rotation","rotationHandler","handlers","type","filter","Object","keys","key","length","getElementWithResizeHandler","elements","reduce","result","resizeHandle","getResizeHandlerFromCoords","x1","y1","x2","y2","found","find","getCursorForResizingElement","resizingElement","shouldSwapCursors","Math","sign","height","width","cursor","normalizeResizeHandle"],"mappings":"AAMA,SACEA,gCADF,EAEEC,2BAFF,EAGEC,iBAHF,QAIO,qBAJP;;AASA,SAASC,eAAT,CACEC,OADF,EAEEC,CAFF,EAGEC,CAHF,EAIE;AACA,SACED,CAAC,IAAID,OAAO,CAAC,CAAD,CAAZ,IACAC,CAAC,IAAID,OAAO,CAAC,CAAD,CAAP,GAAaA,OAAO,CAAC,CAAD,CADzB,IAEAE,CAAC,IAAIF,OAAO,CAAC,CAAD,CAFZ,IAGAE,CAAC,IAAIF,OAAO,CAAC,CAAD,CAAP,GAAaA,OAAO,CAAC,CAAD,CAJ3B;AAMD;;AAED,OAAO,SAASG,UAAT,CACLC,OADK,EAELC,QAFK,EAGLJ,CAHK,EAILC,CAJK,EAKLI,IALK,EAMLC,WANK,EAOyB;AAC9B,MAAI,CAACF,QAAQ,CAACG,kBAAT,CAA4BJ,OAAO,CAACK,EAApC,CAAL,EAA8C;AAC5C,WAAO,KAAP;AACD;;AAED,QAAM;AAAEC,IAAAA,QAAQ,EAAEC,eAAZ;AAA6B,OAAGC;AAAhC,MAA6Cd,iBAAiB,CAClEM,OADkE,EAElEE,IAFkE,EAGlEC,WAHkE,CAApE;;AAMA,MAAII,eAAe,IAAIZ,eAAe,CAACY,eAAD,EAAkBV,CAAlB,EAAqBC,CAArB,CAAtC,EAA+D;AAC7D,WAAO,UAAP;AACD;;AAED,MAAIE,OAAO,CAACS,IAAR,KAAiB,MAArB,EAA6B;AAC3B;AACA,WAAO,KAAP;AACD;;AAED,QAAMC,MAAM,GAAGC,MAAM,CAACC,IAAP,CAAYJ,QAAZ,EAAsBE,MAAtB,CAA8BG,GAAD,IAAS;AACnD,UAAMjB,OAAO,GAAGY,QAAQ,CAACK,GAAD,CAAxB;;AACA,QAAI,CAACjB,OAAL,EAAc;AACZ,aAAO,KAAP;AACD;;AACD,WAAOD,eAAe,CAACC,OAAD,EAAUC,CAAV,EAAaC,CAAb,CAAtB;AACD,GANc,CAAf;;AAQA,MAAIY,MAAM,CAACI,MAAP,GAAgB,CAApB,EAAuB;AACrB,WAAOJ,MAAM,CAAC,CAAD,CAAb;AACD;;AAED,SAAO,KAAP;AACD;AAED,OAAO,SAASK,2BAAT,CACLC,QADK,EAELf,QAFK,EAGL;AAAEJ,EAAAA,CAAF;AAAKC,EAAAA;AAAL,CAHK,EAILI,IAJK,EAKLC,WALK,EAML;AACA,SAAOa,QAAQ,CAACC,MAAT,CAAgB,CAACC,MAAD,EAASlB,OAAT,KAAqB;AAC1C,QAAIkB,MAAJ,EAAY;AACV,aAAOA,MAAP;AACD;;AACD,UAAMC,YAAY,GAAGpB,UAAU,CAACC,OAAD,EAAUC,QAAV,EAAoBJ,CAApB,EAAuBC,CAAvB,EAA0BI,IAA1B,EAAgCC,WAAhC,CAA/B;AACA,WAAOgB,YAAY,GAAG;AAAEnB,MAAAA,OAAF;AAAWmB,MAAAA;AAAX,KAAH,GAA+B,IAAlD;AACD,GANM,EAMJ,IANI,CAAP;AAOD;AAED,OAAO,SAASC,0BAAT,CACL,CAACC,EAAD,EAAKC,EAAL,EAASC,EAAT,EAAaC,EAAb,CADK,EAEL;AAAE3B,EAAAA,CAAF;AAAKC,EAAAA;AAAL,CAFK,EAGLI,IAHK,EAILC,WAJK,EAKL;AACA,QAAMK,QAAQ,GAAGf,2BAA2B,CAC1C,CAAC4B,EAAD,EAAKC,EAAL,EAASC,EAAT,EAAaC,EAAb,CAD0C,EAE1C,CAF0C,EAG1CtB,IAH0C,EAI1CC,WAJ0C,EAK1CX,gCAL0C,CAA5C;AAQA,QAAMiC,KAAK,GAAGd,MAAM,CAACC,IAAP,CAAYJ,QAAZ,EAAsBkB,IAAtB,CAA4Bb,GAAD,IAAS;AAChD,UAAMjB,OAAO,GAAGY,QAAQ,CAACK,GAAD,CAAxB;AACA,WAAOjB,OAAO,IAAID,eAAe,CAACC,OAAD,EAAUC,CAAV,EAAaC,CAAb,CAAjC;AACD,GAHa,CAAd;AAIA,SAAQ2B,KAAK,IAAI,KAAjB;AACD;AAED;;;;AAGA,OAAO,SAASE,2BAAT,CAAqCC,eAArC,EAGI;AACT,QAAM;AAAE5B,IAAAA,OAAF;AAAWmB,IAAAA;AAAX,MAA4BS,eAAlC;AACA,QAAMC,iBAAiB,GACrB7B,OAAO,IAAI8B,IAAI,CAACC,IAAL,CAAU/B,OAAO,CAACgC,MAAlB,IAA4BF,IAAI,CAACC,IAAL,CAAU/B,OAAO,CAACiC,KAAlB,CAA5B,KAAyD,CAAC,CADvE;AAEA,MAAIC,MAAM,GAAG,IAAb;;AAEA,UAAQf,YAAR;AACE,SAAK,GAAL;AACA,SAAK,GAAL;AACEe,MAAAA,MAAM,GAAG,IAAT;AACA;;AACF,SAAK,GAAL;AACA,SAAK,GAAL;AACEA,MAAAA,MAAM,GAAG,IAAT;AACA;;AACF,SAAK,IAAL;AACA,SAAK,IAAL;AACE,UAAIL,iBAAJ,EAAuB;AACrBK,QAAAA,MAAM,GAAG,MAAT;AACD,OAFD,MAEO;AACLA,QAAAA,MAAM,GAAG,MAAT;AACD;;AACD;;AACF,SAAK,IAAL;AACA,SAAK,IAAL;AACE,UAAIL,iBAAJ,EAAuB;AACrBK,QAAAA,MAAM,GAAG,MAAT;AACD,OAFD,MAEO;AACLA,QAAAA,MAAM,GAAG,MAAT;AACD;;AACD;;AACF,SAAK,UAAL;AACEA,MAAAA,MAAM,GAAG,IAAT;AACA;AA3BJ;;AA8BA,SAAOA,MAAM,GAAI,GAAEA,MAAO,SAAb,GAAwB,EAArC;AACD;AAED,OAAO,SAASC,qBAAT,CACLnC,OADK,EAELmB,YAFK,EAGiB;AACtB,MAAInB,OAAO,CAACiC,KAAR,IAAiB,CAAjB,IAAsBjC,OAAO,CAACgC,MAAR,IAAkB,CAA5C,EAA+C;AAC7C,WAAOb,YAAP;AACD;;AAED,MAAInB,OAAO,CAACiC,KAAR,GAAgB,CAAhB,IAAqBjC,OAAO,CAACgC,MAAR,GAAiB,CAA1C,EAA6C;AAC3C,YAAQb,YAAR;AACE,WAAK,IAAL;AACE,eAAO,IAAP;;AACF,WAAK,IAAL;AACE,eAAO,IAAP;;AACF,WAAK,IAAL;AACE,eAAO,IAAP;;AACF,WAAK,IAAL;AACE,eAAO,IAAP;AARJ;AAUD,GAXD,MAWO,IAAInB,OAAO,CAACiC,KAAR,GAAgB,CAApB,EAAuB;AAC5B,YAAQd,YAAR;AACE,WAAK,IAAL;AACE,eAAO,IAAP;;AACF,WAAK,IAAL;AACE,eAAO,IAAP;;AACF,WAAK,IAAL;AACE,eAAO,IAAP;;AACF,WAAK,IAAL;AACE,eAAO,IAAP;;AACF,WAAK,GAAL;AACE,eAAO,GAAP;;AACF,WAAK,GAAL;AACE,eAAO,GAAP;AAZJ;AAcD,GAfM,MAeA;AACL,YAAQA,YAAR;AACE,WAAK,IAAL;AACE,eAAO,IAAP;;AACF,WAAK,IAAL;AACE,eAAO,IAAP;;AACF,WAAK,IAAL;AACE,eAAO,IAAP;;AACF,WAAK,IAAL;AACE,eAAO,IAAP;;AACF,WAAK,GAAL;AACE,eAAO,GAAP;;AACF,WAAK,GAAL;AACE,eAAO,GAAP;AAZJ;AAcD;;AAED,SAAOA,YAAP;AACD","sourcesContent":["import {\n  ExcalidrawElement,\n  PointerType,\n  NonDeletedExcalidrawElement,\n} from \"./types\";\n\nimport {\n  OMIT_SIDES_FOR_MULTIPLE_ELEMENTS,\n  handlerRectanglesFromCoords,\n  handlerRectangles,\n} from \"./handlerRectangles\";\nimport { AppState } from \"../types\";\n\ntype HandlerRectanglesRet = keyof ReturnType<typeof handlerRectangles>;\n\nfunction isInHandlerRect(\n  handler: [number, number, number, number],\n  x: number,\n  y: number,\n) {\n  return (\n    x >= handler[0] &&\n    x <= handler[0] + handler[2] &&\n    y >= handler[1] &&\n    y <= handler[1] + handler[3]\n  );\n}\n\nexport function resizeTest(\n  element: NonDeletedExcalidrawElement,\n  appState: AppState,\n  x: number,\n  y: number,\n  zoom: number,\n  pointerType: PointerType,\n): HandlerRectanglesRet | false {\n  if (!appState.selectedElementIds[element.id]) {\n    return false;\n  }\n\n  const { rotation: rotationHandler, ...handlers } = handlerRectangles(\n    element,\n    zoom,\n    pointerType,\n  );\n\n  if (rotationHandler && isInHandlerRect(rotationHandler, x, y)) {\n    return \"rotation\" as HandlerRectanglesRet;\n  }\n\n  if (element.type === \"text\") {\n    // can't resize text elements\n    return false;\n  }\n\n  const filter = Object.keys(handlers).filter((key) => {\n    const handler = handlers[key as Exclude<HandlerRectanglesRet, \"rotation\">]!;\n    if (!handler) {\n      return false;\n    }\n    return isInHandlerRect(handler, x, y);\n  });\n\n  if (filter.length > 0) {\n    return filter[0] as HandlerRectanglesRet;\n  }\n\n  return false;\n}\n\nexport function getElementWithResizeHandler(\n  elements: readonly NonDeletedExcalidrawElement[],\n  appState: AppState,\n  { x, y }: { x: number; y: number },\n  zoom: number,\n  pointerType: PointerType,\n) {\n  return elements.reduce((result, element) => {\n    if (result) {\n      return result;\n    }\n    const resizeHandle = resizeTest(element, appState, x, y, zoom, pointerType);\n    return resizeHandle ? { element, resizeHandle } : null;\n  }, null as { element: NonDeletedExcalidrawElement; resizeHandle: ReturnType<typeof resizeTest> } | null);\n}\n\nexport function getResizeHandlerFromCoords(\n  [x1, y1, x2, y2]: readonly [number, number, number, number],\n  { x, y }: { x: number; y: number },\n  zoom: number,\n  pointerType: PointerType,\n) {\n  const handlers = handlerRectanglesFromCoords(\n    [x1, y1, x2, y2],\n    0,\n    zoom,\n    pointerType,\n    OMIT_SIDES_FOR_MULTIPLE_ELEMENTS,\n  );\n\n  const found = Object.keys(handlers).find((key) => {\n    const handler = handlers[key as Exclude<HandlerRectanglesRet, \"rotation\">]!;\n    return handler && isInHandlerRect(handler, x, y);\n  });\n  return (found || false) as HandlerRectanglesRet;\n}\n\n/*\n * Returns bi-directional cursor for the element being resized\n */\nexport function getCursorForResizingElement(resizingElement: {\n  element?: ExcalidrawElement;\n  resizeHandle: ReturnType<typeof resizeTest>;\n}): string {\n  const { element, resizeHandle } = resizingElement;\n  const shouldSwapCursors =\n    element && Math.sign(element.height) * Math.sign(element.width) === -1;\n  let cursor = null;\n\n  switch (resizeHandle) {\n    case \"n\":\n    case \"s\":\n      cursor = \"ns\";\n      break;\n    case \"w\":\n    case \"e\":\n      cursor = \"ew\";\n      break;\n    case \"nw\":\n    case \"se\":\n      if (shouldSwapCursors) {\n        cursor = \"nesw\";\n      } else {\n        cursor = \"nwse\";\n      }\n      break;\n    case \"ne\":\n    case \"sw\":\n      if (shouldSwapCursors) {\n        cursor = \"nwse\";\n      } else {\n        cursor = \"nesw\";\n      }\n      break;\n    case \"rotation\":\n      cursor = \"ew\";\n      break;\n  }\n\n  return cursor ? `${cursor}-resize` : \"\";\n}\n\nexport function normalizeResizeHandle(\n  element: ExcalidrawElement,\n  resizeHandle: HandlerRectanglesRet,\n): HandlerRectanglesRet {\n  if (element.width >= 0 && element.height >= 0) {\n    return resizeHandle;\n  }\n\n  if (element.width < 0 && element.height < 0) {\n    switch (resizeHandle) {\n      case \"nw\":\n        return \"se\";\n      case \"ne\":\n        return \"sw\";\n      case \"se\":\n        return \"nw\";\n      case \"sw\":\n        return \"ne\";\n    }\n  } else if (element.width < 0) {\n    switch (resizeHandle) {\n      case \"nw\":\n        return \"ne\";\n      case \"ne\":\n        return \"nw\";\n      case \"se\":\n        return \"sw\";\n      case \"sw\":\n        return \"se\";\n      case \"e\":\n        return \"w\";\n      case \"w\":\n        return \"e\";\n    }\n  } else {\n    switch (resizeHandle) {\n      case \"nw\":\n        return \"sw\";\n      case \"ne\":\n        return \"se\";\n      case \"se\":\n        return \"ne\";\n      case \"sw\":\n        return \"nw\";\n      case \"n\":\n        return \"s\";\n      case \"s\":\n        return \"n\";\n    }\n  }\n\n  return resizeHandle;\n}\n"]},"metadata":{},"sourceType":"module"}