{"ast":null,"code":"import _classCallCheck from \"/home/pro/Solutions/drawboard-light/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/pro/Solutions/drawboard-light/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { polygonHachureLines } from './scan-line-hachure';\nexport var HachureFiller =\n/*#__PURE__*/\nfunction () {\n  function HachureFiller(helper) {\n    _classCallCheck(this, HachureFiller);\n\n    this.helper = helper;\n  }\n\n  _createClass(HachureFiller, [{\n    key: \"fillPolygon\",\n    value: function fillPolygon(points, o) {\n      return this._fillPolygon(points, o);\n    }\n  }, {\n    key: \"_fillPolygon\",\n    value: function _fillPolygon(points, o) {\n      var connectEnds = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var lines = polygonHachureLines(points, o);\n      var ops = this.renderLines(lines, o, connectEnds);\n      return {\n        type: 'fillSketch',\n        ops: ops\n      };\n    }\n  }, {\n    key: \"renderLines\",\n    value: function renderLines(lines, o, connectEnds) {\n      var ops = [];\n      var prevPoint = null;\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = lines[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var line = _step.value;\n          ops = ops.concat(this.helper.doubleLineOps(line[0][0], line[0][1], line[1][0], line[1][1], o));\n\n          if (connectEnds && prevPoint) {\n            ops = ops.concat(this.helper.doubleLineOps(prevPoint[0], prevPoint[1], line[0][0], line[0][1], o));\n          }\n\n          prevPoint = line[1];\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      return ops;\n    }\n  }]);\n\n  return HachureFiller;\n}();","map":{"version":3,"sources":["/home/pro/Solutions/drawboard-light/node_modules/roughjs/bin/fillers/hachure-filler.js"],"names":["polygonHachureLines","HachureFiller","helper","points","o","_fillPolygon","connectEnds","lines","ops","renderLines","type","prevPoint","line","concat","doubleLineOps"],"mappings":";;AAAA,SAASA,mBAAT,QAAoC,qBAApC;AACA,WAAaC,aAAb;AAAA;AAAA;AACI,yBAAYC,MAAZ,EAAoB;AAAA;;AAChB,SAAKA,MAAL,GAAcA,MAAd;AACH;;AAHL;AAAA;AAAA,gCAIgBC,MAJhB,EAIwBC,CAJxB,EAI2B;AACnB,aAAO,KAAKC,YAAL,CAAkBF,MAAlB,EAA0BC,CAA1B,CAAP;AACH;AANL;AAAA;AAAA,iCAOiBD,MAPjB,EAOyBC,CAPzB,EAOiD;AAAA,UAArBE,WAAqB,uEAAP,KAAO;AACzC,UAAMC,KAAK,GAAGP,mBAAmB,CAACG,MAAD,EAASC,CAAT,CAAjC;AACA,UAAMI,GAAG,GAAG,KAAKC,WAAL,CAAiBF,KAAjB,EAAwBH,CAAxB,EAA2BE,WAA3B,CAAZ;AACA,aAAO;AAAEI,QAAAA,IAAI,EAAE,YAAR;AAAsBF,QAAAA,GAAG,EAAHA;AAAtB,OAAP;AACH;AAXL;AAAA;AAAA,gCAYgBD,KAZhB,EAYuBH,CAZvB,EAY0BE,WAZ1B,EAYuC;AAC/B,UAAIE,GAAG,GAAG,EAAV;AACA,UAAIG,SAAS,GAAG,IAAhB;AAF+B;AAAA;AAAA;;AAAA;AAG/B,6BAAmBJ,KAAnB,8HAA0B;AAAA,cAAfK,IAAe;AACtBJ,UAAAA,GAAG,GAAGA,GAAG,CAACK,MAAJ,CAAW,KAAKX,MAAL,CAAYY,aAAZ,CAA0BF,IAAI,CAAC,CAAD,CAAJ,CAAQ,CAAR,CAA1B,EAAsCA,IAAI,CAAC,CAAD,CAAJ,CAAQ,CAAR,CAAtC,EAAkDA,IAAI,CAAC,CAAD,CAAJ,CAAQ,CAAR,CAAlD,EAA8DA,IAAI,CAAC,CAAD,CAAJ,CAAQ,CAAR,CAA9D,EAA0ER,CAA1E,CAAX,CAAN;;AACA,cAAIE,WAAW,IAAIK,SAAnB,EAA8B;AAC1BH,YAAAA,GAAG,GAAGA,GAAG,CAACK,MAAJ,CAAW,KAAKX,MAAL,CAAYY,aAAZ,CAA0BH,SAAS,CAAC,CAAD,CAAnC,EAAwCA,SAAS,CAAC,CAAD,CAAjD,EAAsDC,IAAI,CAAC,CAAD,CAAJ,CAAQ,CAAR,CAAtD,EAAkEA,IAAI,CAAC,CAAD,CAAJ,CAAQ,CAAR,CAAlE,EAA8ER,CAA9E,CAAX,CAAN;AACH;;AACDO,UAAAA,SAAS,GAAGC,IAAI,CAAC,CAAD,CAAhB;AACH;AAT8B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAU/B,aAAOJ,GAAP;AACH;AAvBL;;AAAA;AAAA","sourcesContent":["import { polygonHachureLines } from './scan-line-hachure';\nexport class HachureFiller {\n    constructor(helper) {\n        this.helper = helper;\n    }\n    fillPolygon(points, o) {\n        return this._fillPolygon(points, o);\n    }\n    _fillPolygon(points, o, connectEnds = false) {\n        const lines = polygonHachureLines(points, o);\n        const ops = this.renderLines(lines, o, connectEnds);\n        return { type: 'fillSketch', ops };\n    }\n    renderLines(lines, o, connectEnds) {\n        let ops = [];\n        let prevPoint = null;\n        for (const line of lines) {\n            ops = ops.concat(this.helper.doubleLineOps(line[0][0], line[0][1], line[1][0], line[1][1], o));\n            if (connectEnds && prevPoint) {\n                ops = ops.concat(this.helper.doubleLineOps(prevPoint[0], prevPoint[1], line[0][0], line[0][1], o));\n            }\n            prevPoint = line[1];\n        }\n        return ops;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}