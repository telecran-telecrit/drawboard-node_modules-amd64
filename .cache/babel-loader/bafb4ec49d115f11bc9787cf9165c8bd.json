{"ast":null,"code":"import _classCallCheck from \"/home/pro/Solutions/drawboard-light/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/pro/Solutions/drawboard-light/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nvar _jsxFileName = \"/home/pro/Solutions/drawboard-light/src/actions/manager.tsx\";\nimport React from \"react\";\nimport { t } from \"../i18n\";\nexport var ActionManager =\n/*#__PURE__*/\nfunction () {\n  function ActionManager(updater, getAppState, getElements) {\n    var _this = this;\n\n    _classCallCheck(this, ActionManager);\n\n    this.actions = {};\n    this.updater = void 0;\n    this.getAppState = void 0;\n    this.getElements = void 0;\n\n    this.renderAction = function (name) {\n      if (_this.actions[name] && \"PanelComponent\" in _this.actions[name]) {\n        var action = _this.actions[name];\n        var PanelComponent = action.PanelComponent;\n\n        var updateData = function updateData(formState) {\n          var commitToHistory = action.commitToHistory && action.commitToHistory(_this.getAppState(), _this.getElements());\n\n          _this.updater(action.perform(_this.getElements(), _this.getAppState(), formState), commitToHistory);\n        };\n\n        return React.createElement(PanelComponent, {\n          elements: _this.getElements(),\n          appState: _this.getAppState(),\n          updateData: updateData,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 101\n          },\n          __self: this\n        });\n      }\n\n      return null;\n    };\n\n    this.updater = updater;\n    this.getAppState = getAppState;\n    this.getElements = getElements;\n  }\n\n  _createClass(ActionManager, [{\n    key: \"registerAction\",\n    value: function registerAction(action) {\n      this.actions[action.name] = action;\n    }\n  }, {\n    key: \"registerAll\",\n    value: function registerAll(actions) {\n      var _this2 = this;\n\n      actions.forEach(function (action) {\n        return _this2.registerAction(action);\n      });\n    }\n  }, {\n    key: \"handleKeyDown\",\n    value: function handleKeyDown(event) {\n      var _this3 = this;\n\n      var data = Object.values(this.actions).sort(function (a, b) {\n        return (b.keyPriority || 0) - (a.keyPriority || 0);\n      }).filter(function (action) {\n        return action.keyTest && action.keyTest(event, _this3.getAppState(), _this3.getElements());\n      });\n\n      if (data.length === 0) {\n        return false;\n      }\n\n      event.preventDefault();\n      var commitToHistory = data[0].commitToHistory && data[0].commitToHistory(this.getAppState(), this.getElements());\n      this.updater(data[0].perform(this.getElements(), this.getAppState(), null), commitToHistory);\n      return true;\n    }\n  }, {\n    key: \"getContextMenuItems\",\n    value: function getContextMenuItems() {\n      var _this4 = this;\n\n      var actionFilter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : function (action) {\n        return action;\n      };\n      return Object.values(this.actions).filter(actionFilter).filter(function (action) {\n        return \"contextItemLabel\" in action;\n      }).sort(function (a, b) {\n        return (a.contextMenuOrder !== undefined ? a.contextMenuOrder : 999) - (b.contextMenuOrder !== undefined ? b.contextMenuOrder : 999);\n      }).map(function (_action) {\n        return {\n          label: _action.contextItemLabel ? t(_action.contextItemLabel) : \"\",\n          action: function action() {\n            var commitToHistory = _action.commitToHistory && _action.commitToHistory(_this4.getAppState(), _this4.getElements());\n\n            _this4.updater(_action.perform(_this4.getElements(), _this4.getAppState(), null), commitToHistory);\n          }\n        };\n      });\n    }\n  }]);\n\n  return ActionManager;\n}();","map":{"version":3,"sources":["/home/pro/Solutions/drawboard-light/src/actions/manager.tsx"],"names":["React","t","ActionManager","updater","getAppState","getElements","actions","renderAction","name","action","PanelComponent","updateData","formState","commitToHistory","perform","forEach","registerAction","event","data","Object","values","sort","a","b","keyPriority","filter","keyTest","length","preventDefault","actionFilter","contextMenuOrder","undefined","map","label","contextItemLabel"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {\n  Action,\n  ActionsManagerInterface,\n  UpdaterFn,\n  ActionFilterFn,\n} from \"./types\";\nimport { ExcalidrawElement } from \"../element/types\";\nimport { AppState } from \"../types\";\nimport { t } from \"../i18n\";\n\nexport class ActionManager implements ActionsManagerInterface {\n  actions: { [keyProp: string]: Action } = {};\n\n  updater: UpdaterFn;\n\n  getAppState: () => AppState;\n\n  getElements: () => readonly ExcalidrawElement[];\n\n  constructor(\n    updater: UpdaterFn,\n    getAppState: () => AppState,\n    getElements: () => readonly ExcalidrawElement[],\n  ) {\n    this.updater = updater;\n    this.getAppState = getAppState;\n    this.getElements = getElements;\n  }\n\n  registerAction(action: Action) {\n    this.actions[action.name] = action;\n  }\n\n  registerAll(actions: readonly Action[]) {\n    actions.forEach(action => this.registerAction(action));\n  }\n\n  handleKeyDown(event: KeyboardEvent) {\n    const data = Object.values(this.actions)\n      .sort((a, b) => (b.keyPriority || 0) - (a.keyPriority || 0))\n      .filter(\n        action =>\n          action.keyTest &&\n          action.keyTest(event, this.getAppState(), this.getElements()),\n      );\n\n    if (data.length === 0) {\n      return false;\n    }\n\n    event.preventDefault();\n    const commitToHistory =\n      data[0].commitToHistory &&\n      data[0].commitToHistory(this.getAppState(), this.getElements());\n    this.updater(\n      data[0].perform(this.getElements(), this.getAppState(), null),\n      commitToHistory,\n    );\n    return true;\n  }\n\n  getContextMenuItems(actionFilter: ActionFilterFn = action => action) {\n    return Object.values(this.actions)\n      .filter(actionFilter)\n      .filter(action => \"contextItemLabel\" in action)\n      .sort(\n        (a, b) =>\n          (a.contextMenuOrder !== undefined ? a.contextMenuOrder : 999) -\n          (b.contextMenuOrder !== undefined ? b.contextMenuOrder : 999),\n      )\n      .map(action => ({\n        label: action.contextItemLabel ? t(action.contextItemLabel) : \"\",\n        action: () => {\n          const commitToHistory =\n            action.commitToHistory &&\n            action.commitToHistory(this.getAppState(), this.getElements());\n          this.updater(\n            action.perform(this.getElements(), this.getAppState(), null),\n            commitToHistory,\n          );\n        },\n      }));\n  }\n\n  renderAction = (name: string) => {\n    if (this.actions[name] && \"PanelComponent\" in this.actions[name]) {\n      const action = this.actions[name];\n      const PanelComponent = action.PanelComponent!;\n      const updateData = (formState?: any) => {\n        const commitToHistory =\n          action.commitToHistory &&\n          action.commitToHistory(this.getAppState(), this.getElements());\n        this.updater(\n          action.perform(this.getElements(), this.getAppState(), formState),\n          commitToHistory,\n        );\n      };\n\n      return (\n        <PanelComponent\n          elements={this.getElements()}\n          appState={this.getAppState()}\n          updateData={updateData}\n        />\n      );\n    }\n\n    return null;\n  };\n}\n"]},"metadata":{},"sourceType":"module"}