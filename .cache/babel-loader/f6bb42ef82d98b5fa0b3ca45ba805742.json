{"ast":null,"code":"import _objectSpread from \"/home/pro/Solutions/drawboard-light/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/home/pro/Solutions/drawboard-light/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { getElementAbsoluteCoords } from \"../element\";\nexport function getElementsWithinSelection(elements, selection) {\n  var _getElementAbsoluteCo = getElementAbsoluteCoords(selection),\n      _getElementAbsoluteCo2 = _slicedToArray(_getElementAbsoluteCo, 4),\n      selectionX1 = _getElementAbsoluteCo2[0],\n      selectionY1 = _getElementAbsoluteCo2[1],\n      selectionX2 = _getElementAbsoluteCo2[2],\n      selectionY2 = _getElementAbsoluteCo2[3];\n\n  return elements.filter(function (element) {\n    var _getElementAbsoluteCo3 = getElementAbsoluteCoords(element),\n        _getElementAbsoluteCo4 = _slicedToArray(_getElementAbsoluteCo3, 4),\n        elementX1 = _getElementAbsoluteCo4[0],\n        elementY1 = _getElementAbsoluteCo4[1],\n        elementX2 = _getElementAbsoluteCo4[2],\n        elementY2 = _getElementAbsoluteCo4[3];\n\n    return element.type !== \"selection\" && selectionX1 <= elementX1 && selectionY1 <= elementY1 && selectionX2 >= elementX2 && selectionY2 >= elementY2;\n  });\n}\nexport function deleteSelectedElements(elements, appState) {\n  return {\n    elements: elements.filter(function (el) {\n      return !appState.selectedElementIds[el.id];\n    }),\n    appState: _objectSpread({}, appState, {\n      selectedElementIds: {}\n    })\n  };\n}\nexport function getSelectedIndices(elements, appState) {\n  var selectedIndices = [];\n  elements.forEach(function (element, index) {\n    if (appState.selectedElementIds[element.id]) {\n      selectedIndices.push(index);\n    }\n  });\n  return selectedIndices;\n}\nexport function isSomeElementSelected(elements, appState) {\n  return elements.some(function (element) {\n    return appState.selectedElementIds[element.id];\n  });\n}\n/**\n * Returns common attribute (picked by `getAttribute` callback) of selected\n *  elements. If elements don't share the same value, returns `null`.\n */\n\nexport function getCommonAttributeOfSelectedElements(elements, appState, getAttribute) {\n  var attributes = Array.from(new Set(getSelectedElements(elements, appState).map(function (element) {\n    return getAttribute(element);\n  })));\n  return attributes.length === 1 ? attributes[0] : null;\n}\nexport function getSelectedElements(elements, appState) {\n  return elements.filter(function (element) {\n    return appState.selectedElementIds[element.id];\n  });\n}\nexport function getTargetElement(elements, appState) {\n  return appState.editingElement ? [appState.editingElement] : getSelectedElements(elements, appState);\n}","map":{"version":3,"sources":["/home/pro/Solutions/drawboard-light/src/scene/selection.ts"],"names":["getElementAbsoluteCoords","getElementsWithinSelection","elements","selection","selectionX1","selectionY1","selectionX2","selectionY2","filter","element","elementX1","elementY1","elementX2","elementY2","type","deleteSelectedElements","appState","el","selectedElementIds","id","getSelectedIndices","selectedIndices","forEach","index","push","isSomeElementSelected","some","getCommonAttributeOfSelectedElements","getAttribute","attributes","Array","from","Set","getSelectedElements","map","length","getTargetElement","editingElement"],"mappings":";;AACA,SAASA,wBAAT,QAAyC,YAAzC;AAGA,OAAO,SAASC,0BAAT,CACLC,QADK,EAELC,SAFK,EAGL;AAAA,8BAMIH,wBAAwB,CAACG,SAAD,CAN5B;AAAA;AAAA,MAEEC,WAFF;AAAA,MAGEC,WAHF;AAAA,MAIEC,WAJF;AAAA,MAKEC,WALF;;AAOA,SAAOL,QAAQ,CAACM,MAAT,CAAgB,UAAAC,OAAO,EAAI;AAAA,iCAM5BT,wBAAwB,CAACS,OAAD,CANI;AAAA;AAAA,QAE9BC,SAF8B;AAAA,QAG9BC,SAH8B;AAAA,QAI9BC,SAJ8B;AAAA,QAK9BC,SAL8B;;AAQhC,WACEJ,OAAO,CAACK,IAAR,KAAiB,WAAjB,IACAV,WAAW,IAAIM,SADf,IAEAL,WAAW,IAAIM,SAFf,IAGAL,WAAW,IAAIM,SAHf,IAIAL,WAAW,IAAIM,SALjB;AAOD,GAfM,CAAP;AAgBD;AAED,OAAO,SAASE,sBAAT,CACLb,QADK,EAELc,QAFK,EAGL;AACA,SAAO;AACLd,IAAAA,QAAQ,EAAEA,QAAQ,CAACM,MAAT,CAAgB,UAAAS,EAAE;AAAA,aAAI,CAACD,QAAQ,CAACE,kBAAT,CAA4BD,EAAE,CAACE,EAA/B,CAAL;AAAA,KAAlB,CADL;AAELH,IAAAA,QAAQ,oBACHA,QADG;AAENE,MAAAA,kBAAkB,EAAE;AAFd;AAFH,GAAP;AAOD;AAED,OAAO,SAASE,kBAAT,CACLlB,QADK,EAELc,QAFK,EAGL;AACA,MAAMK,eAAyB,GAAG,EAAlC;AACAnB,EAAAA,QAAQ,CAACoB,OAAT,CAAiB,UAACb,OAAD,EAAUc,KAAV,EAAoB;AACnC,QAAIP,QAAQ,CAACE,kBAAT,CAA4BT,OAAO,CAACU,EAApC,CAAJ,EAA6C;AAC3CE,MAAAA,eAAe,CAACG,IAAhB,CAAqBD,KAArB;AACD;AACF,GAJD;AAKA,SAAOF,eAAP;AACD;AAED,OAAO,SAASI,qBAAT,CACLvB,QADK,EAELc,QAFK,EAGI;AACT,SAAOd,QAAQ,CAACwB,IAAT,CAAc,UAAAjB,OAAO;AAAA,WAAIO,QAAQ,CAACE,kBAAT,CAA4BT,OAAO,CAACU,EAApC,CAAJ;AAAA,GAArB,CAAP;AACD;AAED;;;;;AAIA,OAAO,SAASQ,oCAAT,CACLzB,QADK,EAELc,QAFK,EAGLY,YAHK,EAIK;AACV,MAAMC,UAAU,GAAGC,KAAK,CAACC,IAAN,CACjB,IAAIC,GAAJ,CACEC,mBAAmB,CAAC/B,QAAD,EAAWc,QAAX,CAAnB,CAAwCkB,GAAxC,CAA4C,UAAAzB,OAAO;AAAA,WACjDmB,YAAY,CAACnB,OAAD,CADqC;AAAA,GAAnD,CADF,CADiB,CAAnB;AAOA,SAAOoB,UAAU,CAACM,MAAX,KAAsB,CAAtB,GAA0BN,UAAU,CAAC,CAAD,CAApC,GAA0C,IAAjD;AACD;AAED,OAAO,SAASI,mBAAT,CACL/B,QADK,EAELc,QAFK,EAGyB;AAC9B,SAAOd,QAAQ,CAACM,MAAT,CAAgB,UAAAC,OAAO;AAAA,WAAIO,QAAQ,CAACE,kBAAT,CAA4BT,OAAO,CAACU,EAApC,CAAJ;AAAA,GAAvB,CAAP;AACD;AAED,OAAO,SAASiB,gBAAT,CACLlC,QADK,EAELc,QAFK,EAGL;AACA,SAAOA,QAAQ,CAACqB,cAAT,GACH,CAACrB,QAAQ,CAACqB,cAAV,CADG,GAEHJ,mBAAmB,CAAC/B,QAAD,EAAWc,QAAX,CAFvB;AAGD","sourcesContent":["import { ExcalidrawElement } from \"../element/types\";\nimport { getElementAbsoluteCoords } from \"../element\";\nimport { AppState } from \"../types\";\n\nexport function getElementsWithinSelection(\n  elements: readonly ExcalidrawElement[],\n  selection: ExcalidrawElement,\n) {\n  const [\n    selectionX1,\n    selectionY1,\n    selectionX2,\n    selectionY2,\n  ] = getElementAbsoluteCoords(selection);\n  return elements.filter(element => {\n    const [\n      elementX1,\n      elementY1,\n      elementX2,\n      elementY2,\n    ] = getElementAbsoluteCoords(element);\n\n    return (\n      element.type !== \"selection\" &&\n      selectionX1 <= elementX1 &&\n      selectionY1 <= elementY1 &&\n      selectionX2 >= elementX2 &&\n      selectionY2 >= elementY2\n    );\n  });\n}\n\nexport function deleteSelectedElements(\n  elements: readonly ExcalidrawElement[],\n  appState: AppState,\n) {\n  return {\n    elements: elements.filter(el => !appState.selectedElementIds[el.id]),\n    appState: {\n      ...appState,\n      selectedElementIds: {},\n    },\n  };\n}\n\nexport function getSelectedIndices(\n  elements: readonly ExcalidrawElement[],\n  appState: AppState,\n) {\n  const selectedIndices: number[] = [];\n  elements.forEach((element, index) => {\n    if (appState.selectedElementIds[element.id]) {\n      selectedIndices.push(index);\n    }\n  });\n  return selectedIndices;\n}\n\nexport function isSomeElementSelected(\n  elements: readonly ExcalidrawElement[],\n  appState: AppState,\n): boolean {\n  return elements.some(element => appState.selectedElementIds[element.id]);\n}\n\n/**\n * Returns common attribute (picked by `getAttribute` callback) of selected\n *  elements. If elements don't share the same value, returns `null`.\n */\nexport function getCommonAttributeOfSelectedElements<T>(\n  elements: readonly ExcalidrawElement[],\n  appState: AppState,\n  getAttribute: (element: ExcalidrawElement) => T,\n): T | null {\n  const attributes = Array.from(\n    new Set(\n      getSelectedElements(elements, appState).map(element =>\n        getAttribute(element),\n      ),\n    ),\n  );\n  return attributes.length === 1 ? attributes[0] : null;\n}\n\nexport function getSelectedElements(\n  elements: readonly ExcalidrawElement[],\n  appState: AppState,\n): readonly ExcalidrawElement[] {\n  return elements.filter(element => appState.selectedElementIds[element.id]);\n}\n\nexport function getTargetElement(\n  elements: readonly ExcalidrawElement[],\n  appState: AppState,\n) {\n  return appState.editingElement\n    ? [appState.editingElement]\n    : getSelectedElements(elements, appState);\n}\n"]},"metadata":{},"sourceType":"module"}