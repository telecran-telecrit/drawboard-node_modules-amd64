{"ast":null,"code":"import _slicedToArray from \"/home/pro/Solutions/drawboard-light/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { getCommonBounds } from \"../element\";\nvar SCROLLBAR_MARGIN = 4;\nexport var SCROLLBAR_WIDTH = 6;\nexport var SCROLLBAR_COLOR = \"rgba(0,0,0,0.3)\";\nexport function getScrollBars(elements, viewportWidth, viewportHeight, _ref) {\n  var scrollX = _ref.scrollX,\n      scrollY = _ref.scrollY,\n      zoom = _ref.zoom;\n\n  // This is the bounding box of all the elements\n  var _getCommonBounds = getCommonBounds(elements),\n      _getCommonBounds2 = _slicedToArray(_getCommonBounds, 4),\n      elementsMinX = _getCommonBounds2[0],\n      elementsMinY = _getCommonBounds2[1],\n      elementsMaxX = _getCommonBounds2[2],\n      elementsMaxY = _getCommonBounds2[3]; // Apply zoom\n\n\n  var viewportWidthWithZoom = viewportWidth / zoom;\n  var viewportHeightWithZoom = viewportHeight / zoom;\n  var viewportWidthDiff = viewportWidth - viewportWidthWithZoom;\n  var viewportHeightDiff = viewportHeight - viewportHeightWithZoom; // The viewport is the rectangle currently visible for the user\n\n  var viewportMinX = -scrollX + viewportWidthDiff / 2;\n  var viewportMinY = -scrollY + viewportHeightDiff / 2;\n  var viewportMaxX = viewportMinX + viewportWidthWithZoom;\n  var viewportMaxY = viewportMinY + viewportHeightWithZoom; // The scene is the bounding box of both the elements and viewport\n\n  var sceneMinX = Math.min(elementsMinX, viewportMinX);\n  var sceneMinY = Math.min(elementsMinY, viewportMinY);\n  var sceneMaxX = Math.max(elementsMaxX, viewportMaxX);\n  var sceneMaxY = Math.max(elementsMaxY, viewportMaxY); // The scrollbar represents where the viewport is in relationship to the scene\n\n  return {\n    horizontal: viewportMinX === sceneMinX && viewportMaxX === sceneMaxX ? null : {\n      x: (viewportMinX - sceneMinX) / (sceneMaxX - sceneMinX) * viewportWidth + SCROLLBAR_MARGIN,\n      y: viewportHeight - SCROLLBAR_WIDTH - SCROLLBAR_MARGIN,\n      width: (viewportMaxX - viewportMinX) / (sceneMaxX - sceneMinX) * viewportWidth - SCROLLBAR_MARGIN * 2,\n      height: SCROLLBAR_WIDTH\n    },\n    vertical: viewportMinY === sceneMinY && viewportMaxY === sceneMaxY ? null : {\n      x: viewportWidth - SCROLLBAR_WIDTH - SCROLLBAR_MARGIN,\n      y: (viewportMinY - sceneMinY) / (sceneMaxY - sceneMinY) * viewportHeight + SCROLLBAR_MARGIN,\n      width: SCROLLBAR_WIDTH,\n      height: (viewportMaxY - viewportMinY) / (sceneMaxY - sceneMinY) * viewportHeight - SCROLLBAR_MARGIN * 2\n    }\n  };\n}\nexport function isOverScrollBars(scrollBars, x, y) {\n  var _map = [scrollBars.horizontal, scrollBars.vertical].map(function (scrollBar) {\n    return scrollBar && scrollBar.x <= x && x <= scrollBar.x + scrollBar.width && scrollBar.y <= y && y <= scrollBar.y + scrollBar.height;\n  }),\n      _map2 = _slicedToArray(_map, 2),\n      isOverHorizontalScrollBar = _map2[0],\n      isOverVerticalScrollBar = _map2[1];\n\n  return {\n    isOverHorizontalScrollBar: isOverHorizontalScrollBar,\n    isOverVerticalScrollBar: isOverVerticalScrollBar\n  };\n}","map":{"version":3,"sources":["/home/pro/Solutions/drawboard-light/src/scene/scrollbars.ts"],"names":["getCommonBounds","SCROLLBAR_MARGIN","SCROLLBAR_WIDTH","SCROLLBAR_COLOR","getScrollBars","elements","viewportWidth","viewportHeight","scrollX","scrollY","zoom","elementsMinX","elementsMinY","elementsMaxX","elementsMaxY","viewportWidthWithZoom","viewportHeightWithZoom","viewportWidthDiff","viewportHeightDiff","viewportMinX","viewportMinY","viewportMaxX","viewportMaxY","sceneMinX","Math","min","sceneMinY","sceneMaxX","max","sceneMaxY","horizontal","x","y","width","height","vertical","isOverScrollBars","scrollBars","map","scrollBar","isOverHorizontalScrollBar","isOverVerticalScrollBar"],"mappings":"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","sourcesContent":["import { ExcalidrawElement } from \"../element/types\";\nimport { getCommonBounds } from \"../element\";\nimport { FlooredNumber } from \"../types\";\nimport { ScrollBars } from \"./types\";\n\nconst SCROLLBAR_MARGIN = 4;\nexport const SCROLLBAR_WIDTH = 6;\nexport const SCROLLBAR_COLOR = \"rgba(0,0,0,0.3)\";\n\nexport function getScrollBars(\n  elements: readonly ExcalidrawElement[],\n  viewportWidth: number,\n  viewportHeight: number,\n  {\n    scrollX,\n    scrollY,\n    zoom,\n  }: {\n    scrollX: FlooredNumber;\n    scrollY: FlooredNumber;\n    zoom: number;\n  },\n): ScrollBars {\n  // This is the bounding box of all the elements\n  const [\n    elementsMinX,\n    elementsMinY,\n    elementsMaxX,\n    elementsMaxY,\n  ] = getCommonBounds(elements);\n\n  // Apply zoom\n  const viewportWidthWithZoom = viewportWidth / zoom;\n  const viewportHeightWithZoom = viewportHeight / zoom;\n\n  const viewportWidthDiff = viewportWidth - viewportWidthWithZoom;\n  const viewportHeightDiff = viewportHeight - viewportHeightWithZoom;\n\n  // The viewport is the rectangle currently visible for the user\n  const viewportMinX = -scrollX + viewportWidthDiff / 2;\n  const viewportMinY = -scrollY + viewportHeightDiff / 2;\n  const viewportMaxX = viewportMinX + viewportWidthWithZoom;\n  const viewportMaxY = viewportMinY + viewportHeightWithZoom;\n\n  // The scene is the bounding box of both the elements and viewport\n  const sceneMinX = Math.min(elementsMinX, viewportMinX);\n  const sceneMinY = Math.min(elementsMinY, viewportMinY);\n  const sceneMaxX = Math.max(elementsMaxX, viewportMaxX);\n  const sceneMaxY = Math.max(elementsMaxY, viewportMaxY);\n\n  // The scrollbar represents where the viewport is in relationship to the scene\n\n  return {\n    horizontal:\n      viewportMinX === sceneMinX && viewportMaxX === sceneMaxX\n        ? null\n        : {\n            x:\n              ((viewportMinX - sceneMinX) / (sceneMaxX - sceneMinX)) *\n                viewportWidth +\n              SCROLLBAR_MARGIN,\n            y: viewportHeight - SCROLLBAR_WIDTH - SCROLLBAR_MARGIN,\n            width:\n              ((viewportMaxX - viewportMinX) / (sceneMaxX - sceneMinX)) *\n                viewportWidth -\n              SCROLLBAR_MARGIN * 2,\n            height: SCROLLBAR_WIDTH,\n          },\n    vertical:\n      viewportMinY === sceneMinY && viewportMaxY === sceneMaxY\n        ? null\n        : {\n            x: viewportWidth - SCROLLBAR_WIDTH - SCROLLBAR_MARGIN,\n            y:\n              ((viewportMinY - sceneMinY) / (sceneMaxY - sceneMinY)) *\n                viewportHeight +\n              SCROLLBAR_MARGIN,\n            width: SCROLLBAR_WIDTH,\n            height:\n              ((viewportMaxY - viewportMinY) / (sceneMaxY - sceneMinY)) *\n                viewportHeight -\n              SCROLLBAR_MARGIN * 2,\n          },\n  };\n}\n\nexport function isOverScrollBars(scrollBars: ScrollBars, x: number, y: number) {\n  const [isOverHorizontalScrollBar, isOverVerticalScrollBar] = [\n    scrollBars.horizontal,\n    scrollBars.vertical,\n  ].map(scrollBar => {\n    return (\n      scrollBar &&\n      scrollBar.x <= x &&\n      x <= scrollBar.x + scrollBar.width &&\n      scrollBar.y <= y &&\n      y <= scrollBar.y + scrollBar.height\n    );\n  });\n\n  return {\n    isOverHorizontalScrollBar,\n    isOverVerticalScrollBar,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}