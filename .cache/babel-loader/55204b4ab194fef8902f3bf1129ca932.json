{"ast":null,"code":"/** Add node transaction to the event */\nvar Transaction =\n/** @class */\nfunction () {\n  function Transaction() {\n    /**\n     * @inheritDoc\n     */\n    this.name = Transaction.id;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  Transaction.prototype.setupOnce = function (addGlobalEventProcessor, getCurrentHub) {\n    addGlobalEventProcessor(function (event) {\n      var self = getCurrentHub().getIntegration(Transaction);\n\n      if (self) {\n        return self.process(event);\n      }\n\n      return event;\n    });\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Transaction.prototype.process = function (event) {\n    var frames = this._getFramesFromEvent(event); // use for loop so we don't have to reverse whole frames array\n\n\n    for (var i = frames.length - 1; i >= 0; i--) {\n      var frame = frames[i];\n\n      if (frame.in_app === true) {\n        event.transaction = this._getTransaction(frame);\n        break;\n      }\n    }\n\n    return event;\n  };\n  /** JSDoc */\n\n\n  Transaction.prototype._getFramesFromEvent = function (event) {\n    var exception = event.exception && event.exception.values && event.exception.values[0];\n    return exception && exception.stacktrace && exception.stacktrace.frames || [];\n  };\n  /** JSDoc */\n\n\n  Transaction.prototype._getTransaction = function (frame) {\n    return frame.module || frame.function ? (frame.module || '?') + \"/\" + (frame.function || '?') : '<unknown>';\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Transaction.id = 'Transaction';\n  return Transaction;\n}();\n\nexport { Transaction };","map":{"version":3,"sources":["../src/transaction.ts"],"names":[],"mappings":"AAEA;AACA,IAAA,WAAA;AAAA;AAAA,YAAA;AAAA,WAAA,WAAA,GAAA;AACE;;;AAGO,SAAA,IAAA,GAAe,WAAW,CAAC,EAA3B;AAgDR;AA1CC;;;;;AAGO,EAAA,WAAA,CAAA,SAAA,CAAA,SAAA,GAAP,UAAiB,uBAAjB,EAA8E,aAA9E,EAAsG;AACpG,IAAA,uBAAuB,CAAC,UAAA,KAAA,EAAK;AAC3B,UAAM,IAAI,GAAG,aAAa,GAAG,cAAhB,CAA+B,WAA/B,CAAb;;AACA,UAAI,IAAJ,EAAU;AACR,eAAO,IAAI,CAAC,OAAL,CAAa,KAAb,CAAP;AACD;;AACD,aAAO,KAAP;AACD,KANsB,CAAvB;AAOD,GARM;AAUP;;;;;AAGO,EAAA,WAAA,CAAA,SAAA,CAAA,OAAA,GAAP,UAAe,KAAf,EAA2B;AACzB,QAAM,MAAM,GAAG,KAAK,mBAAL,CAAyB,KAAzB,CAAf,CADyB,CAGzB;;;AACA,SAAK,IAAI,CAAC,GAAG,MAAM,CAAC,MAAP,GAAgB,CAA7B,EAAgC,CAAC,IAAI,CAArC,EAAwC,CAAC,EAAzC,EAA6C;AAC3C,UAAM,KAAK,GAAG,MAAM,CAAC,CAAD,CAApB;;AAEA,UAAI,KAAK,CAAC,MAAN,KAAiB,IAArB,EAA2B;AACzB,QAAA,KAAK,CAAC,WAAN,GAAoB,KAAK,eAAL,CAAqB,KAArB,CAApB;AACA;AACD;AACF;;AAED,WAAO,KAAP;AACD,GAdM;AAgBP;;;AACQ,EAAA,WAAA,CAAA,SAAA,CAAA,mBAAA,GAAR,UAA4B,KAA5B,EAAwC;AACtC,QAAM,SAAS,GAAG,KAAK,CAAC,SAAN,IAAmB,KAAK,CAAC,SAAN,CAAgB,MAAnC,IAA6C,KAAK,CAAC,SAAN,CAAgB,MAAhB,CAAuB,CAAvB,CAA/D;AACA,WAAQ,SAAS,IAAI,SAAS,CAAC,UAAvB,IAAqC,SAAS,CAAC,UAAV,CAAqB,MAA3D,IAAsE,EAA7E;AACD,GAHO;AAKR;;;AACQ,EAAA,WAAA,CAAA,SAAA,CAAA,eAAA,GAAR,UAAwB,KAAxB,EAAyC;AACvC,WAAO,KAAK,CAAC,MAAN,IAAgB,KAAK,CAAC,QAAtB,GAAiC,CAAG,KAAK,CAAC,MAAN,IAAgB,GAAnB,IAAsB,GAAtB,IAA0B,KAAK,CAAC,QAAN,IAAkB,GAA5C,CAAjC,GAAqF,WAA5F;AACD,GAFO;AA5CR;;;;;AAGc,EAAA,WAAA,CAAA,EAAA,GAAa,aAAb;AA4ChB,SAAA,WAAA;AAAC,CApDD,EAAA;;SAAa,W","sourcesContent":["import { Event, EventProcessor, Hub, Integration, StackFrame } from '@sentry/types';\n\n/** Add node transaction to the event */\nexport class Transaction implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public name: string = Transaction.id;\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'Transaction';\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(addGlobalEventProcessor: (callback: EventProcessor) => void, getCurrentHub: () => Hub): void {\n    addGlobalEventProcessor(event => {\n      const self = getCurrentHub().getIntegration(Transaction);\n      if (self) {\n        return self.process(event);\n      }\n      return event;\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public process(event: Event): Event {\n    const frames = this._getFramesFromEvent(event);\n\n    // use for loop so we don't have to reverse whole frames array\n    for (let i = frames.length - 1; i >= 0; i--) {\n      const frame = frames[i];\n\n      if (frame.in_app === true) {\n        event.transaction = this._getTransaction(frame);\n        break;\n      }\n    }\n\n    return event;\n  }\n\n  /** JSDoc */\n  private _getFramesFromEvent(event: Event): StackFrame[] {\n    const exception = event.exception && event.exception.values && event.exception.values[0];\n    return (exception && exception.stacktrace && exception.stacktrace.frames) || [];\n  }\n\n  /** JSDoc */\n  private _getTransaction(frame: StackFrame): string {\n    return frame.module || frame.function ? `${frame.module || '?'}/${frame.function || '?'}` : '<unknown>';\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}