{"ast":null,"code":"import LanguageDetector from \"i18next-browser-languagedetector\";\nexport var languages = [{\n  lng: \"en\",\n  label: \"English\",\n  data: require(\"./locales/en.json\")\n}, {\n  lng: \"de\",\n  label: \"Deutsch\",\n  data: require(\"./locales/de.json\")\n}, {\n  lng: \"es\",\n  label: \"Español\",\n  data: require(\"./locales/es.json\")\n}, {\n  lng: \"fr\",\n  label: \"Français\",\n  data: require(\"./locales/fr.json\")\n}, {\n  lng: \"id\",\n  label: \"Bahasa Indonesia\",\n  data: require(\"./locales/id.json\")\n}, {\n  lng: \"no\",\n  label: \"Norsk\",\n  data: require(\"./locales/no.json\")\n}, {\n  lng: \"pl\",\n  label: \"Polski\",\n  data: require(\"./locales/pl.json\")\n}, {\n  lng: \"pt\",\n  label: \"Português\",\n  data: require(\"./locales/pt.json\")\n}, {\n  lng: \"ru\",\n  label: \"Русский\",\n  data: require(\"./locales/ru.json\")\n}, {\n  lng: \"tr\",\n  label: \"Türkçe\",\n  data: require(\"./locales/tr.json\")\n}];\nvar currentLanguage = languages[0];\nvar fallbackLanguage = languages[0];\nexport function setLanguage(newLng) {\n  currentLanguage = languages.find(function (language) {\n    return language.lng === newLng;\n  }) || fallbackLanguage;\n  languageDetector.cacheUserLanguage(currentLanguage.lng);\n}\nexport function getLanguage() {\n  return currentLanguage.lng;\n}\n\nfunction findPartsForData(data, parts) {\n  for (var i = 0; i < parts.length; ++i) {\n    var part = parts[i];\n\n    if (data[part] === undefined) {\n      return undefined;\n    }\n\n    data = data[part];\n  }\n\n  if (typeof data !== \"string\") {\n    return undefined;\n  }\n\n  return data;\n}\n\nexport function t(path, replacement) {\n  var parts = path.split(\".\");\n  var translation = findPartsForData(currentLanguage.data, parts) || findPartsForData(fallbackLanguage.data, parts);\n\n  if (translation === undefined) {\n    throw new Error(\"Can't find translation for \".concat(path));\n  }\n\n  if (replacement) {\n    for (var key in replacement) {\n      translation = translation.replace(\"{{\".concat(key, \"}}\"), replacement[key]);\n    }\n  }\n\n  return translation;\n}\nvar languageDetector = new LanguageDetector();\nlanguageDetector.init({\n  languageUtils: {\n    formatLanguageCode: function formatLanguageCode(lng) {\n      return lng;\n    },\n    isWhitelisted: function isWhitelisted() {\n      return true;\n    }\n  },\n  checkWhitelist: false\n});\nsetLanguage(languageDetector.detect());","map":{"version":3,"sources":["/home/pro/Solutions/drawboard-light/src/i18n.ts"],"names":["LanguageDetector","languages","lng","label","data","require","currentLanguage","fallbackLanguage","setLanguage","newLng","find","language","languageDetector","cacheUserLanguage","getLanguage","findPartsForData","parts","i","length","part","undefined","t","path","replacement","split","translation","Error","key","replace","init","languageUtils","formatLanguageCode","isWhitelisted","checkWhitelist","detect"],"mappings":"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","sourcesContent":["import LanguageDetector from \"i18next-browser-languagedetector\";\n\nexport const languages = [\n  { lng: \"en\", label: \"English\", data: require(\"./locales/en.json\") },\n  { lng: \"de\", label: \"Deutsch\", data: require(\"./locales/de.json\") },\n  { lng: \"es\", label: \"Español\", data: require(\"./locales/es.json\") },\n  { lng: \"fr\", label: \"Français\", data: require(\"./locales/fr.json\") },\n  { lng: \"id\", label: \"Bahasa Indonesia\", data: require(\"./locales/id.json\") },\n  { lng: \"no\", label: \"Norsk\", data: require(\"./locales/no.json\") },\n  { lng: \"pl\", label: \"Polski\", data: require(\"./locales/pl.json\") },\n  { lng: \"pt\", label: \"Português\", data: require(\"./locales/pt.json\") },\n  { lng: \"ru\", label: \"Русский\", data: require(\"./locales/ru.json\") },\n  { lng: \"tr\", label: \"Türkçe\", data: require(\"./locales/tr.json\") },\n];\n\nlet currentLanguage = languages[0];\nconst fallbackLanguage = languages[0];\n\nexport function setLanguage(newLng: string | undefined) {\n  currentLanguage =\n    languages.find(language => language.lng === newLng) || fallbackLanguage;\n\n  languageDetector.cacheUserLanguage(currentLanguage.lng);\n}\n\nexport function getLanguage() {\n  return currentLanguage.lng;\n}\n\nfunction findPartsForData(data: any, parts: string[]) {\n  for (var i = 0; i < parts.length; ++i) {\n    const part = parts[i];\n    if (data[part] === undefined) {\n      return undefined;\n    }\n    data = data[part];\n  }\n  if (typeof data !== \"string\") {\n    return undefined;\n  }\n  return data;\n}\n\nexport function t(path: string, replacement?: { [key: string]: string }) {\n  const parts = path.split(\".\");\n  let translation =\n    findPartsForData(currentLanguage.data, parts) ||\n    findPartsForData(fallbackLanguage.data, parts);\n  if (translation === undefined) {\n    throw new Error(`Can't find translation for ${path}`);\n  }\n\n  if (replacement) {\n    for (var key in replacement) {\n      translation = translation.replace(`{{${key}}}`, replacement[key]);\n    }\n  }\n  return translation;\n}\n\nconst languageDetector = new LanguageDetector();\nlanguageDetector.init({\n  languageUtils: {\n    formatLanguageCode: function(lng: string) {\n      return lng;\n    },\n    isWhitelisted: () => true,\n  },\n  checkWhitelist: false,\n});\n\nsetLanguage(languageDetector.detect());\n"]},"metadata":{},"sourceType":"module"}