{"ast":null,"code":"var _jsxFileName = \"/home/pro/Solutions/drawboard-light/src/components/Actions.tsx\";\nimport React from \"react\";\nimport { hasBackground, hasStroke, hasText } from \"../scene\";\nimport { t } from \"../i18n\";\nimport { SHAPES } from \"../shapes\";\nimport { ToolButton } from \"./ToolButton\";\nimport { capitalizeString, getShortcutKey } from \"../utils\";\nimport { CURSOR_TYPE } from \"../constants\";\nimport Stack from \"./Stack\";\nexport function SelectedShapeActions(_ref) {\n  var targetElements = _ref.targetElements,\n      renderAction = _ref.renderAction,\n      elementType = _ref.elementType;\n  return React.createElement(\"div\", {\n    className: \"panelColumn\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }, renderAction(\"changeStrokeColor\"), (hasBackground(elementType) || targetElements.some(function (element) {\n    return hasBackground(element.type);\n  })) && React.createElement(React.Fragment, null, renderAction(\"changeBackgroundColor\"), renderAction(\"changeFillStyle\")), (hasStroke(elementType) || targetElements.some(function (element) {\n    return hasStroke(element.type);\n  })) && React.createElement(React.Fragment, null, renderAction(\"changeStrokeWidth\"), renderAction(\"changeSloppiness\")), (hasText(elementType) || targetElements.some(function (element) {\n    return hasText(element.type);\n  })) && React.createElement(React.Fragment, null, renderAction(\"changeFontSize\"), renderAction(\"changeFontFamily\")), renderAction(\"changeOpacity\"), React.createElement(\"fieldset\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, React.createElement(\"legend\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, t(\"labels.layers\")), React.createElement(\"div\", {\n    className: \"buttonList\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, renderAction(\"sendToBack\"), renderAction(\"sendBackward\"), renderAction(\"bringToFront\"), renderAction(\"bringForward\"))));\n}\nexport function ShapesSwitcher(_ref2) {\n  var elementType = _ref2.elementType,\n      setAppState = _ref2.setAppState,\n      setElements = _ref2.setElements,\n      elements = _ref2.elements;\n  return React.createElement(React.Fragment, null, SHAPES.map(function (_ref3, index) {\n    var value = _ref3.value,\n        icon = _ref3.icon;\n    var label = t(\"toolBar.\".concat(value));\n    var shortcut = getShortcutKey(\"\".concat(capitalizeString(value)[0], \", \").concat(index + 1));\n    return React.createElement(ToolButton, {\n      key: value,\n      type: \"radio\",\n      icon: icon,\n      checked: elementType === value,\n      name: \"editor-current-shape\",\n      title: \"\".concat(capitalizeString(label), \" \").concat(shortcut),\n      keyBindingLabel: \"\".concat(index + 1),\n      \"aria-label\": capitalizeString(label),\n      \"aria-keyshortcuts\": \"\".concat(label[0], \" \").concat(index + 1),\n      onChange: function onChange() {\n        setAppState({\n          elementType: value,\n          multiElement: null,\n          selectedElementIds: {}\n        });\n        document.documentElement.style.cursor = value === \"text\" ? CURSOR_TYPE.TEXT : CURSOR_TYPE.CROSSHAIR;\n        setAppState({});\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    });\n  }));\n}\nexport function ZoomActions(_ref4) {\n  var renderAction = _ref4.renderAction,\n      zoom = _ref4.zoom;\n  return React.createElement(Stack.Col, {\n    gap: 1,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  }, React.createElement(Stack.Row, {\n    gap: 1,\n    align: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121\n    },\n    __self: this\n  }, renderAction(\"zoomIn\"), renderAction(\"zoomOut\"), renderAction(\"resetZoom\"), React.createElement(\"div\", {\n    style: {\n      marginLeft: 4\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125\n    },\n    __self: this\n  }, (zoom * 100).toFixed(0), \"%\")));\n}","map":{"version":3,"sources":["/home/pro/Solutions/drawboard-light/src/components/Actions.tsx"],"names":["React","hasBackground","hasStroke","hasText","t","SHAPES","ToolButton","capitalizeString","getShortcutKey","CURSOR_TYPE","Stack","SelectedShapeActions","targetElements","renderAction","elementType","some","element","type","ShapesSwitcher","setAppState","setElements","elements","map","index","value","icon","label","shortcut","multiElement","selectedElementIds","document","documentElement","style","cursor","TEXT","CROSSHAIR","ZoomActions","zoom","marginLeft","toFixed"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { ExcalidrawElement } from \"../element/types\";\nimport { ActionManager } from \"../actions/manager\";\nimport { hasBackground, hasStroke, hasText } from \"../scene\";\nimport { t } from \"../i18n\";\nimport { SHAPES } from \"../shapes\";\nimport { ToolButton } from \"./ToolButton\";\nimport { capitalizeString, getShortcutKey } from \"../utils\";\nimport { CURSOR_TYPE } from \"../constants\";\nimport Stack from \"./Stack\";\n\nexport function SelectedShapeActions({\n  targetElements,\n  renderAction,\n  elementType,\n}: {\n  targetElements: readonly ExcalidrawElement[];\n  renderAction: ActionManager[\"renderAction\"];\n  elementType: ExcalidrawElement[\"type\"];\n}) {\n  return (\n    <div className=\"panelColumn\">\n      {renderAction(\"changeStrokeColor\")}\n      {(hasBackground(elementType) ||\n        targetElements.some(element => hasBackground(element.type))) && (\n        <>\n          {renderAction(\"changeBackgroundColor\")}\n\n          {renderAction(\"changeFillStyle\")}\n        </>\n      )}\n\n      {(hasStroke(elementType) ||\n        targetElements.some(element => hasStroke(element.type))) && (\n        <>\n          {renderAction(\"changeStrokeWidth\")}\n\n          {renderAction(\"changeSloppiness\")}\n        </>\n      )}\n\n      {(hasText(elementType) ||\n        targetElements.some(element => hasText(element.type))) && (\n        <>\n          {renderAction(\"changeFontSize\")}\n\n          {renderAction(\"changeFontFamily\")}\n        </>\n      )}\n\n      {renderAction(\"changeOpacity\")}\n\n      <fieldset>\n        <legend>{t(\"labels.layers\")}</legend>\n        <div className=\"buttonList\">\n          {renderAction(\"sendToBack\")}\n          {renderAction(\"sendBackward\")}\n          {renderAction(\"bringToFront\")}\n          {renderAction(\"bringForward\")}\n        </div>\n      </fieldset>\n    </div>\n  );\n}\n\nexport function ShapesSwitcher({\n  elementType,\n  setAppState,\n  setElements,\n  elements,\n}: {\n  elementType: ExcalidrawElement[\"type\"];\n  setAppState: any;\n  setElements: any;\n  elements: readonly ExcalidrawElement[];\n}) {\n  return (\n    <>\n      {SHAPES.map(({ value, icon }, index) => {\n        const label = t(`toolBar.${value}`);\n        const shortcut = getShortcutKey(\n          `${capitalizeString(value)[0]}, ${index + 1}`,\n        );\n        return (\n          <ToolButton\n            key={value}\n            type=\"radio\"\n            icon={icon}\n            checked={elementType === value}\n            name=\"editor-current-shape\"\n            title={`${capitalizeString(label)} ${shortcut}`}\n            keyBindingLabel={`${index + 1}`}\n            aria-label={capitalizeString(label)}\n            aria-keyshortcuts={`${label[0]} ${index + 1}`}\n            onChange={() => {\n              setAppState({\n                elementType: value,\n                multiElement: null,\n                selectedElementIds: {},\n              });\n              document.documentElement.style.cursor =\n                value === \"text\" ? CURSOR_TYPE.TEXT : CURSOR_TYPE.CROSSHAIR;\n              setAppState({});\n            }}\n          ></ToolButton>\n        );\n      })}\n    </>\n  );\n}\n\nexport function ZoomActions({\n  renderAction,\n  zoom,\n}: {\n  renderAction: ActionManager[\"renderAction\"];\n  zoom: number;\n}) {\n  return (\n    <Stack.Col gap={1}>\n      <Stack.Row gap={1} align=\"center\">\n        {renderAction(\"zoomIn\")}\n        {renderAction(\"zoomOut\")}\n        {renderAction(\"resetZoom\")}\n        <div style={{ marginLeft: 4 }}>{(zoom * 100).toFixed(0)}%</div>\n      </Stack.Row>\n    </Stack.Col>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}