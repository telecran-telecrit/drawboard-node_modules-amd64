{"ast":null,"code":"import _toConsumableArray from \"/home/pro/Solutions/drawboard-light/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nvar _jsxFileName = \"/home/pro/Solutions/drawboard-light/src/actions/actionZindex.tsx\";\nimport React from \"react\";\nimport { moveOneLeft, moveOneRight, moveAllLeft, moveAllRight } from \"../zindex\";\nimport { getSelectedIndices } from \"../scene\";\nimport { KEYS, isDarwin } from \"../keys\";\nimport { t } from \"../i18n\";\nimport { getShortcutKey } from \"../utils\";\nimport { register } from \"./register\";\nimport { sendBackward, bringToFront, sendToBack, bringForward } from \"../components/icons\";\nexport var actionSendBackward = register({\n  name: \"sendBackward\",\n  perform: function perform(elements, appState) {\n    return {\n      elements: moveOneLeft(_toConsumableArray(elements), getSelectedIndices(elements, appState)),\n      appState: appState\n    };\n  },\n  contextItemLabel: \"labels.sendBackward\",\n  keyPriority: 40,\n  commitToHistory: function commitToHistory() {\n    return true;\n  },\n  keyTest: function keyTest(event) {\n    return event[KEYS.CTRL_OR_CMD] && !event.shiftKey && event.code === \"BracketLeft\";\n  },\n  PanelComponent: function PanelComponent(_ref) {\n    var updateData = _ref.updateData;\n    return React.createElement(\"button\", {\n      type: \"button\",\n      className: \"zIndexButton\",\n      onClick: function onClick() {\n        return updateData(null);\n      },\n      title: \"\".concat(t(\"labels.sendBackward\"), \" \").concat(getShortcutKey(\"CtrlOrCmd+[\")),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }, sendBackward);\n  }\n});\nexport var actionBringForward = register({\n  name: \"bringForward\",\n  perform: function perform(elements, appState) {\n    return {\n      elements: moveOneRight(_toConsumableArray(elements), getSelectedIndices(elements, appState)),\n      appState: appState\n    };\n  },\n  contextItemLabel: \"labels.bringForward\",\n  keyPriority: 40,\n  commitToHistory: function commitToHistory() {\n    return true;\n  },\n  keyTest: function keyTest(event) {\n    return event[KEYS.CTRL_OR_CMD] && !event.shiftKey && event.code === \"BracketRight\";\n  },\n  PanelComponent: function PanelComponent(_ref2) {\n    var updateData = _ref2.updateData;\n    return React.createElement(\"button\", {\n      type: \"button\",\n      className: \"zIndexButton\",\n      onClick: function onClick() {\n        return updateData(null);\n      },\n      title: \"\".concat(t(\"labels.bringForward\"), \" \").concat(getShortcutKey(\"CtrlOrCmd+]\")),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, bringForward);\n  }\n});\nexport var actionSendToBack = register({\n  name: \"sendToBack\",\n  perform: function perform(elements, appState) {\n    return {\n      elements: moveAllLeft(_toConsumableArray(elements), getSelectedIndices(elements, appState)),\n      appState: appState\n    };\n  },\n  contextItemLabel: \"labels.sendToBack\",\n  commitToHistory: function commitToHistory() {\n    return true;\n  },\n  keyTest: function keyTest(event) {\n    return isDarwin ? event[KEYS.CTRL_OR_CMD] && event.altKey && event.code === \"BracketLeft\" : event[KEYS.CTRL_OR_CMD] && event.shiftKey && event.code === \"BracketLeft\";\n  },\n  PanelComponent: function PanelComponent(_ref3) {\n    var updateData = _ref3.updateData;\n    return React.createElement(\"button\", {\n      type: \"button\",\n      className: \"zIndexButton\",\n      onClick: function onClick() {\n        return updateData(null);\n      },\n      title: \"\".concat(t(\"labels.sendToBack\"), \" \").concat(isDarwin ? getShortcutKey(\"CtrlOrCmd+Alt+[\") : getShortcutKey(\"CtrlOrCmd+Shift+[\")),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, sendToBack);\n  }\n});\nexport var actionBringToFront = register({\n  name: \"bringToFront\",\n  perform: function perform(elements, appState) {\n    return {\n      elements: moveAllRight(_toConsumableArray(elements), getSelectedIndices(elements, appState)),\n      appState: appState\n    };\n  },\n  commitToHistory: function commitToHistory() {\n    return true;\n  },\n  contextItemLabel: \"labels.bringToFront\",\n  keyTest: function keyTest(event) {\n    return isDarwin ? event[KEYS.CTRL_OR_CMD] && event.altKey && event.code === \"BracketRight\" : event[KEYS.CTRL_OR_CMD] && event.shiftKey && event.code === \"BracketRight\";\n  },\n  PanelComponent: function PanelComponent(_ref4) {\n    var updateData = _ref4.updateData;\n    return React.createElement(\"button\", {\n      type: \"button\",\n      className: \"zIndexButton\",\n      onClick: function onClick(event) {\n        return updateData(null);\n      },\n      title: \"\".concat(t(\"labels.bringToFront\"), \" \").concat(isDarwin ? getShortcutKey(\"CtrlOrCmd+Alt+]\") : getShortcutKey(\"CtrlOrCmd+Shift+]\")),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, bringToFront);\n  }\n});","map":{"version":3,"sources":["/home/pro/Solutions/drawboard-light/src/actions/actionZindex.tsx"],"names":["React","moveOneLeft","moveOneRight","moveAllLeft","moveAllRight","getSelectedIndices","KEYS","isDarwin","t","getShortcutKey","register","sendBackward","bringToFront","sendToBack","bringForward","actionSendBackward","name","perform","elements","appState","contextItemLabel","keyPriority","commitToHistory","keyTest","event","CTRL_OR_CMD","shiftKey","code","PanelComponent","updateData","actionBringForward","actionSendToBack","altKey","actionBringToFront"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {\n  moveOneLeft,\n  moveOneRight,\n  moveAllLeft,\n  moveAllRight,\n} from \"../zindex\";\nimport { getSelectedIndices } from \"../scene\";\nimport { KEYS, isDarwin } from \"../keys\";\nimport { t } from \"../i18n\";\nimport { getShortcutKey } from \"../utils\";\nimport { register } from \"./register\";\nimport {\n  sendBackward,\n  bringToFront,\n  sendToBack,\n  bringForward,\n} from \"../components/icons\";\n\nexport const actionSendBackward = register({\n  name: \"sendBackward\",\n  perform: (elements, appState) => {\n    return {\n      elements: moveOneLeft(\n        [...elements],\n        getSelectedIndices(elements, appState),\n      ),\n      appState,\n    };\n  },\n  contextItemLabel: \"labels.sendBackward\",\n  keyPriority: 40,\n  commitToHistory: () => true,\n  keyTest: event =>\n    event[KEYS.CTRL_OR_CMD] && !event.shiftKey && event.code === \"BracketLeft\",\n  PanelComponent: ({ updateData }) => (\n    <button\n      type=\"button\"\n      className=\"zIndexButton\"\n      onClick={() => updateData(null)}\n      title={`${t(\"labels.sendBackward\")} ${getShortcutKey(\"CtrlOrCmd+[\")}`}\n    >\n      {sendBackward}\n    </button>\n  ),\n});\n\nexport const actionBringForward = register({\n  name: \"bringForward\",\n  perform: (elements, appState) => {\n    return {\n      elements: moveOneRight(\n        [...elements],\n        getSelectedIndices(elements, appState),\n      ),\n      appState,\n    };\n  },\n  contextItemLabel: \"labels.bringForward\",\n  keyPriority: 40,\n  commitToHistory: () => true,\n  keyTest: event =>\n    event[KEYS.CTRL_OR_CMD] && !event.shiftKey && event.code === \"BracketRight\",\n  PanelComponent: ({ updateData }) => (\n    <button\n      type=\"button\"\n      className=\"zIndexButton\"\n      onClick={() => updateData(null)}\n      title={`${t(\"labels.bringForward\")} ${getShortcutKey(\"CtrlOrCmd+]\")}`}\n    >\n      {bringForward}\n    </button>\n  ),\n});\n\nexport const actionSendToBack = register({\n  name: \"sendToBack\",\n  perform: (elements, appState) => {\n    return {\n      elements: moveAllLeft(\n        [...elements],\n        getSelectedIndices(elements, appState),\n      ),\n      appState,\n    };\n  },\n  contextItemLabel: \"labels.sendToBack\",\n  commitToHistory: () => true,\n  keyTest: event => {\n    return isDarwin\n      ? event[KEYS.CTRL_OR_CMD] && event.altKey && event.code === \"BracketLeft\"\n      : event[KEYS.CTRL_OR_CMD] &&\n          event.shiftKey &&\n          event.code === \"BracketLeft\";\n  },\n  PanelComponent: ({ updateData }) => (\n    <button\n      type=\"button\"\n      className=\"zIndexButton\"\n      onClick={() => updateData(null)}\n      title={`${t(\"labels.sendToBack\")} ${\n        isDarwin\n          ? getShortcutKey(\"CtrlOrCmd+Alt+[\")\n          : getShortcutKey(\"CtrlOrCmd+Shift+[\")\n      }`}\n    >\n      {sendToBack}\n    </button>\n  ),\n});\n\nexport const actionBringToFront = register({\n  name: \"bringToFront\",\n  perform: (elements, appState) => {\n    return {\n      elements: moveAllRight(\n        [...elements],\n        getSelectedIndices(elements, appState),\n      ),\n      appState,\n    };\n  },\n  commitToHistory: () => true,\n  contextItemLabel: \"labels.bringToFront\",\n  keyTest: event => {\n    return isDarwin\n      ? event[KEYS.CTRL_OR_CMD] && event.altKey && event.code === \"BracketRight\"\n      : event[KEYS.CTRL_OR_CMD] &&\n          event.shiftKey &&\n          event.code === \"BracketRight\";\n  },\n  PanelComponent: ({ updateData }) => (\n    <button\n      type=\"button\"\n      className=\"zIndexButton\"\n      onClick={event => updateData(null)}\n      title={`${t(\"labels.bringToFront\")} ${\n        isDarwin\n          ? getShortcutKey(\"CtrlOrCmd+Alt+]\")\n          : getShortcutKey(\"CtrlOrCmd+Shift+]\")\n      }`}\n    >\n      {bringToFront}\n    </button>\n  ),\n});\n"]},"metadata":{},"sourceType":"module"}