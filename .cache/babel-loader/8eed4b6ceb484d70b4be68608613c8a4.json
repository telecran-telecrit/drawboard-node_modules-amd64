{"ast":null,"code":"import _classCallCheck from \"/home/pro/Solutions/drawboard-light/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/pro/Solutions/drawboard-light/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { SVGNS } from './core';\nimport { RoughGenerator } from './generator';\nvar hasDocument = typeof document !== 'undefined';\nexport var RoughSVG =\n/*#__PURE__*/\nfunction () {\n  function RoughSVG(svg, config) {\n    _classCallCheck(this, RoughSVG);\n\n    this.svg = svg;\n    this.gen = new RoughGenerator(config, this.svg);\n  }\n\n  _createClass(RoughSVG, [{\n    key: \"draw\",\n    value: function draw(drawable) {\n      var sets = drawable.sets || [];\n      var o = drawable.options || this.getDefaultOptions();\n      var doc = this.svg.ownerDocument || window.document;\n      var g = doc.createElementNS(SVGNS, 'g');\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = sets[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var drawing = _step.value;\n          var path = null;\n\n          switch (drawing.type) {\n            case 'path':\n              {\n                path = doc.createElementNS(SVGNS, 'path');\n                path.setAttribute('d', this.opsToPath(drawing));\n                path.style.stroke = o.stroke;\n                path.style.strokeWidth = o.strokeWidth + '';\n                path.style.fill = 'none';\n                break;\n              }\n\n            case 'fillPath':\n              {\n                path = doc.createElementNS(SVGNS, 'path');\n                path.setAttribute('d', this.opsToPath(drawing));\n                path.style.stroke = 'none';\n                path.style.strokeWidth = '0';\n                path.style.fill = o.fill || '';\n                break;\n              }\n\n            case 'fillSketch':\n              {\n                path = this.fillSketch(doc, drawing, o);\n                break;\n              }\n\n            case 'path2Dfill':\n              {\n                path = doc.createElementNS(SVGNS, 'path');\n                path.setAttribute('d', drawing.path || '');\n                path.style.stroke = 'none';\n                path.style.strokeWidth = '0';\n                path.style.fill = o.fill || '';\n                break;\n              }\n\n            case 'path2Dpattern':\n              {\n                if (!this.defs) {\n                  console.error('Pattern fill fail: No defs');\n                } else {\n                  var size = drawing.size;\n                  var pattern = doc.createElementNS(SVGNS, 'pattern');\n                  var id = \"rough-\".concat(Math.floor(Math.random() * (Number.MAX_SAFE_INTEGER || 999999)));\n                  pattern.setAttribute('id', id);\n                  pattern.setAttribute('x', '0');\n                  pattern.setAttribute('y', '0');\n                  pattern.setAttribute('width', '1');\n                  pattern.setAttribute('height', '1');\n                  pattern.setAttribute('height', '1');\n                  pattern.setAttribute('viewBox', \"0 0 \".concat(Math.round(size[0]), \" \").concat(Math.round(size[1])));\n                  pattern.setAttribute('patternUnits', 'objectBoundingBox');\n                  var patternPath = this.fillSketch(doc, drawing, o);\n                  pattern.appendChild(patternPath);\n                  this.defs.appendChild(pattern);\n                  path = doc.createElementNS(SVGNS, 'path');\n                  path.setAttribute('d', drawing.path || '');\n                  path.style.stroke = 'none';\n                  path.style.strokeWidth = '0';\n                  path.style.fill = \"url(#\".concat(id, \")\");\n                }\n\n                break;\n              }\n          }\n\n          if (path) {\n            g.appendChild(path);\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      return g;\n    }\n  }, {\n    key: \"fillSketch\",\n    value: function fillSketch(doc, drawing, o) {\n      var fweight = o.fillWeight;\n\n      if (fweight < 0) {\n        fweight = o.strokeWidth / 2;\n      }\n\n      var path = doc.createElementNS(SVGNS, 'path');\n      path.setAttribute('d', this.opsToPath(drawing));\n      path.style.stroke = o.fill || '';\n      path.style.strokeWidth = fweight + '';\n      path.style.fill = 'none';\n      return path;\n    }\n  }, {\n    key: \"getDefaultOptions\",\n    value: function getDefaultOptions() {\n      return this.gen.defaultOptions;\n    }\n  }, {\n    key: \"opsToPath\",\n    value: function opsToPath(drawing) {\n      return this.gen.opsToPath(drawing);\n    }\n  }, {\n    key: \"line\",\n    value: function line(x1, y1, x2, y2, options) {\n      var d = this.gen.line(x1, y1, x2, y2, options);\n      return this.draw(d);\n    }\n  }, {\n    key: \"rectangle\",\n    value: function rectangle(x, y, width, height, options) {\n      var d = this.gen.rectangle(x, y, width, height, options);\n      return this.draw(d);\n    }\n  }, {\n    key: \"ellipse\",\n    value: function ellipse(x, y, width, height, options) {\n      var d = this.gen.ellipse(x, y, width, height, options);\n      return this.draw(d);\n    }\n  }, {\n    key: \"circle\",\n    value: function circle(x, y, diameter, options) {\n      var d = this.gen.circle(x, y, diameter, options);\n      return this.draw(d);\n    }\n  }, {\n    key: \"linearPath\",\n    value: function linearPath(points, options) {\n      var d = this.gen.linearPath(points, options);\n      return this.draw(d);\n    }\n  }, {\n    key: \"polygon\",\n    value: function polygon(points, options) {\n      var d = this.gen.polygon(points, options);\n      return this.draw(d);\n    }\n  }, {\n    key: \"arc\",\n    value: function arc(x, y, width, height, start, stop) {\n      var closed = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;\n      var options = arguments.length > 7 ? arguments[7] : undefined;\n      var d = this.gen.arc(x, y, width, height, start, stop, closed, options);\n      return this.draw(d);\n    }\n  }, {\n    key: \"curve\",\n    value: function curve(points, options) {\n      var d = this.gen.curve(points, options);\n      return this.draw(d);\n    }\n  }, {\n    key: \"path\",\n    value: function path(d, options) {\n      var drawing = this.gen.path(d, options);\n      return this.draw(drawing);\n    }\n  }, {\n    key: \"defs\",\n    get: function get() {\n      var doc = this.svg.ownerDocument || hasDocument && document;\n\n      if (doc) {\n        if (!this._defs) {\n          var dnode = doc.createElementNS(SVGNS, 'defs');\n\n          if (this.svg.firstChild) {\n            this.svg.insertBefore(dnode, this.svg.firstChild);\n          } else {\n            this.svg.appendChild(dnode);\n          }\n\n          this._defs = dnode;\n        }\n      }\n\n      return this._defs || null;\n    }\n  }, {\n    key: \"generator\",\n    get: function get() {\n      return this.gen;\n    }\n  }]);\n\n  return RoughSVG;\n}();","map":{"version":3,"sources":["/home/pro/Solutions/drawboard-light/node_modules/roughjs/bin/svg.js"],"names":["SVGNS","RoughGenerator","hasDocument","document","RoughSVG","svg","config","gen","drawable","sets","o","options","getDefaultOptions","doc","ownerDocument","window","g","createElementNS","drawing","path","type","setAttribute","opsToPath","style","stroke","strokeWidth","fill","fillSketch","defs","console","error","size","pattern","id","Math","floor","random","Number","MAX_SAFE_INTEGER","round","patternPath","appendChild","fweight","fillWeight","defaultOptions","x1","y1","x2","y2","d","line","draw","x","y","width","height","rectangle","ellipse","diameter","circle","points","linearPath","polygon","start","stop","closed","arc","curve","_defs","dnode","firstChild","insertBefore"],"mappings":"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","sourcesContent":["import { SVGNS } from './core';\nimport { RoughGenerator } from './generator';\nconst hasDocument = typeof document !== 'undefined';\nexport class RoughSVG {\n    constructor(svg, config) {\n        this.svg = svg;\n        this.gen = new RoughGenerator(config, this.svg);\n    }\n    get defs() {\n        const doc = this.svg.ownerDocument || (hasDocument && document);\n        if (doc) {\n            if (!this._defs) {\n                const dnode = doc.createElementNS(SVGNS, 'defs');\n                if (this.svg.firstChild) {\n                    this.svg.insertBefore(dnode, this.svg.firstChild);\n                }\n                else {\n                    this.svg.appendChild(dnode);\n                }\n                this._defs = dnode;\n            }\n        }\n        return this._defs || null;\n    }\n    draw(drawable) {\n        const sets = drawable.sets || [];\n        const o = drawable.options || this.getDefaultOptions();\n        const doc = this.svg.ownerDocument || window.document;\n        const g = doc.createElementNS(SVGNS, 'g');\n        for (const drawing of sets) {\n            let path = null;\n            switch (drawing.type) {\n                case 'path': {\n                    path = doc.createElementNS(SVGNS, 'path');\n                    path.setAttribute('d', this.opsToPath(drawing));\n                    path.style.stroke = o.stroke;\n                    path.style.strokeWidth = o.strokeWidth + '';\n                    path.style.fill = 'none';\n                    break;\n                }\n                case 'fillPath': {\n                    path = doc.createElementNS(SVGNS, 'path');\n                    path.setAttribute('d', this.opsToPath(drawing));\n                    path.style.stroke = 'none';\n                    path.style.strokeWidth = '0';\n                    path.style.fill = o.fill || '';\n                    break;\n                }\n                case 'fillSketch': {\n                    path = this.fillSketch(doc, drawing, o);\n                    break;\n                }\n                case 'path2Dfill': {\n                    path = doc.createElementNS(SVGNS, 'path');\n                    path.setAttribute('d', drawing.path || '');\n                    path.style.stroke = 'none';\n                    path.style.strokeWidth = '0';\n                    path.style.fill = o.fill || '';\n                    break;\n                }\n                case 'path2Dpattern': {\n                    if (!this.defs) {\n                        console.error('Pattern fill fail: No defs');\n                    }\n                    else {\n                        const size = drawing.size;\n                        const pattern = doc.createElementNS(SVGNS, 'pattern');\n                        const id = `rough-${Math.floor(Math.random() * (Number.MAX_SAFE_INTEGER || 999999))}`;\n                        pattern.setAttribute('id', id);\n                        pattern.setAttribute('x', '0');\n                        pattern.setAttribute('y', '0');\n                        pattern.setAttribute('width', '1');\n                        pattern.setAttribute('height', '1');\n                        pattern.setAttribute('height', '1');\n                        pattern.setAttribute('viewBox', `0 0 ${Math.round(size[0])} ${Math.round(size[1])}`);\n                        pattern.setAttribute('patternUnits', 'objectBoundingBox');\n                        const patternPath = this.fillSketch(doc, drawing, o);\n                        pattern.appendChild(patternPath);\n                        this.defs.appendChild(pattern);\n                        path = doc.createElementNS(SVGNS, 'path');\n                        path.setAttribute('d', drawing.path || '');\n                        path.style.stroke = 'none';\n                        path.style.strokeWidth = '0';\n                        path.style.fill = `url(#${id})`;\n                    }\n                    break;\n                }\n            }\n            if (path) {\n                g.appendChild(path);\n            }\n        }\n        return g;\n    }\n    fillSketch(doc, drawing, o) {\n        let fweight = o.fillWeight;\n        if (fweight < 0) {\n            fweight = o.strokeWidth / 2;\n        }\n        const path = doc.createElementNS(SVGNS, 'path');\n        path.setAttribute('d', this.opsToPath(drawing));\n        path.style.stroke = o.fill || '';\n        path.style.strokeWidth = fweight + '';\n        path.style.fill = 'none';\n        return path;\n    }\n    get generator() {\n        return this.gen;\n    }\n    getDefaultOptions() {\n        return this.gen.defaultOptions;\n    }\n    opsToPath(drawing) {\n        return this.gen.opsToPath(drawing);\n    }\n    line(x1, y1, x2, y2, options) {\n        const d = this.gen.line(x1, y1, x2, y2, options);\n        return this.draw(d);\n    }\n    rectangle(x, y, width, height, options) {\n        const d = this.gen.rectangle(x, y, width, height, options);\n        return this.draw(d);\n    }\n    ellipse(x, y, width, height, options) {\n        const d = this.gen.ellipse(x, y, width, height, options);\n        return this.draw(d);\n    }\n    circle(x, y, diameter, options) {\n        const d = this.gen.circle(x, y, diameter, options);\n        return this.draw(d);\n    }\n    linearPath(points, options) {\n        const d = this.gen.linearPath(points, options);\n        return this.draw(d);\n    }\n    polygon(points, options) {\n        const d = this.gen.polygon(points, options);\n        return this.draw(d);\n    }\n    arc(x, y, width, height, start, stop, closed = false, options) {\n        const d = this.gen.arc(x, y, width, height, start, stop, closed, options);\n        return this.draw(d);\n    }\n    curve(points, options) {\n        const d = this.gen.curve(points, options);\n        return this.draw(d);\n    }\n    path(d, options) {\n        const drawing = this.gen.path(d, options);\n        return this.draw(drawing);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}