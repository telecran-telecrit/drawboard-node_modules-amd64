{"ast":null,"code":"var _jsxFileName = \"/home/pro/Solutions/drawboard-light/src/actions/manager.tsx\";\nimport React from \"react\";\nimport { t } from \"../i18n\";\nexport class ActionManager {\n  constructor(updater, getAppState, getElementsIncludingDeleted) {\n    this.actions = {};\n    this.updater = void 0;\n    this.getAppState = void 0;\n    this.getElementsIncludingDeleted = void 0;\n\n    this.renderAction = name => {\n      if (this.actions[name] && \"PanelComponent\" in this.actions[name]) {\n        const action = this.actions[name];\n        const PanelComponent = action.PanelComponent;\n\n        const updateData = formState => {\n          this.updater(action.perform(this.getElementsIncludingDeleted(), this.getAppState(), formState));\n        };\n\n        return /*#__PURE__*/React.createElement(PanelComponent, {\n          elements: this.getElementsIncludingDeleted(),\n          appState: this.getAppState(),\n          updateData: updateData,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 9\n          }\n        });\n      }\n\n      return null;\n    };\n\n    this.updater = updater;\n    this.getAppState = getAppState;\n    this.getElementsIncludingDeleted = getElementsIncludingDeleted;\n  }\n\n  registerAction(action) {\n    this.actions[action.name] = action;\n  }\n\n  registerAll(actions) {\n    actions.forEach(action => this.registerAction(action));\n  }\n\n  handleKeyDown(event) {\n    const data = Object.values(this.actions).sort((a, b) => (b.keyPriority || 0) - (a.keyPriority || 0)).filter(action => action.keyTest && action.keyTest(event, this.getAppState(), this.getElementsIncludingDeleted()));\n\n    if (data.length === 0) {\n      return false;\n    }\n\n    event.preventDefault();\n    this.updater(data[0].perform(this.getElementsIncludingDeleted(), this.getAppState(), null));\n    return true;\n  }\n\n  executeAction(action) {\n    this.updater(action.perform(this.getElementsIncludingDeleted(), this.getAppState(), null));\n  }\n\n  getContextMenuItems(actionFilter = action => action) {\n    return Object.values(this.actions).filter(actionFilter).filter(action => \"contextItemLabel\" in action).sort((a, b) => (a.contextMenuOrder !== undefined ? a.contextMenuOrder : 999) - (b.contextMenuOrder !== undefined ? b.contextMenuOrder : 999)).map(action => ({\n      label: action.contextItemLabel ? t(action.contextItemLabel) : \"\",\n      action: () => {\n        this.updater(action.perform(this.getElementsIncludingDeleted(), this.getAppState(), null));\n      }\n    }));\n  }\n\n}","map":{"version":3,"sources":["/home/pro/Solutions/drawboard-light/src/actions/manager.tsx"],"names":["React","t","ActionManager","constructor","updater","getAppState","getElementsIncludingDeleted","actions","renderAction","name","action","PanelComponent","updateData","formState","perform","registerAction","registerAll","forEach","handleKeyDown","event","data","Object","values","sort","a","b","keyPriority","filter","keyTest","length","preventDefault","executeAction","getContextMenuItems","actionFilter","contextMenuOrder","undefined","map","label","contextItemLabel"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {\n  Action,\n  ActionsManagerInterface,\n  UpdaterFn,\n  ActionFilterFn,\n  ActionName,\n} from \"./types\";\nimport { ExcalidrawElement } from \"../element/types\";\nimport { AppState } from \"../types\";\nimport { t } from \"../i18n\";\nimport { globalSceneState } from \"../scene\";\n\nexport class ActionManager implements ActionsManagerInterface {\n  actions = {} as ActionsManagerInterface[\"actions\"];\n\n  updater: UpdaterFn;\n\n  getAppState: () => AppState;\n\n  getElementsIncludingDeleted: () => readonly ExcalidrawElement[];\n\n  constructor(\n    updater: UpdaterFn,\n    getAppState: () => AppState,\n    getElementsIncludingDeleted: () => ReturnType<\n      typeof globalSceneState[\"getElementsIncludingDeleted\"]\n    >,\n  ) {\n    this.updater = updater;\n    this.getAppState = getAppState;\n    this.getElementsIncludingDeleted = getElementsIncludingDeleted;\n  }\n\n  registerAction(action: Action) {\n    this.actions[action.name] = action;\n  }\n\n  registerAll(actions: readonly Action[]) {\n    actions.forEach((action) => this.registerAction(action));\n  }\n\n  handleKeyDown(event: KeyboardEvent) {\n    const data = Object.values(this.actions)\n      .sort((a, b) => (b.keyPriority || 0) - (a.keyPriority || 0))\n      .filter(\n        (action) =>\n          action.keyTest &&\n          action.keyTest(\n            event,\n            this.getAppState(),\n            this.getElementsIncludingDeleted(),\n          ),\n      );\n\n    if (data.length === 0) {\n      return false;\n    }\n\n    event.preventDefault();\n    this.updater(\n      data[0].perform(\n        this.getElementsIncludingDeleted(),\n        this.getAppState(),\n        null,\n      ),\n    );\n    return true;\n  }\n\n  executeAction(action: Action) {\n    this.updater(\n      action.perform(\n        this.getElementsIncludingDeleted(),\n        this.getAppState(),\n        null,\n      ),\n    );\n  }\n\n  getContextMenuItems(actionFilter: ActionFilterFn = (action) => action) {\n    return Object.values(this.actions)\n      .filter(actionFilter)\n      .filter((action) => \"contextItemLabel\" in action)\n      .sort(\n        (a, b) =>\n          (a.contextMenuOrder !== undefined ? a.contextMenuOrder : 999) -\n          (b.contextMenuOrder !== undefined ? b.contextMenuOrder : 999),\n      )\n      .map((action) => ({\n        label: action.contextItemLabel ? t(action.contextItemLabel) : \"\",\n        action: () => {\n          this.updater(\n            action.perform(\n              this.getElementsIncludingDeleted(),\n              this.getAppState(),\n              null,\n            ),\n          );\n        },\n      }));\n  }\n\n  renderAction = (name: ActionName) => {\n    if (this.actions[name] && \"PanelComponent\" in this.actions[name]) {\n      const action = this.actions[name];\n      const PanelComponent = action.PanelComponent!;\n      const updateData = (formState?: any) => {\n        this.updater(\n          action.perform(\n            this.getElementsIncludingDeleted(),\n            this.getAppState(),\n            formState,\n          ),\n        );\n      };\n\n      return (\n        <PanelComponent\n          elements={this.getElementsIncludingDeleted()}\n          appState={this.getAppState()}\n          updateData={updateData}\n        />\n      );\n    }\n\n    return null;\n  };\n}\n"]},"metadata":{},"sourceType":"module"}