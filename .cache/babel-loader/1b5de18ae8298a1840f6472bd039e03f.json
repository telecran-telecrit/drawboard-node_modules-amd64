{"ast":null,"code":"import _regeneratorRuntime from \"/home/pro/Solutions/drawboard-light/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/pro/Solutions/drawboard-light/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { getSelectedElements } from \"./scene\";\nvar CLIPBOARD = \"\";\nvar PREFER_APP_CLIPBOARD = false;\nexport var probablySupportsClipboardReadText = \"clipboard\" in navigator && \"readText\" in navigator.clipboard;\nexport var probablySupportsClipboardWriteText = \"clipboard\" in navigator && \"writeText\" in navigator.clipboard;\nexport var probablySupportsClipboardBlob = \"clipboard\" in navigator && \"write\" in navigator.clipboard && \"ClipboardItem\" in window && \"toBlob\" in HTMLCanvasElement.prototype;\nexport function copyToAppClipboard(_x, _x2) {\n  return _copyToAppClipboard.apply(this, arguments);\n}\n\nfunction _copyToAppClipboard() {\n  _copyToAppClipboard = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(elements, appState) {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            CLIPBOARD = JSON.stringify(getSelectedElements(elements, appState));\n            _context.prev = 1;\n            _context.next = 4;\n            return copyTextToSystemClipboard(null);\n\n          case 4:\n            PREFER_APP_CLIPBOARD = false;\n            _context.next = 10;\n            break;\n\n          case 7:\n            _context.prev = 7;\n            _context.t0 = _context[\"catch\"](1);\n            // if clearing system clipboard didn't work, we should prefer in-app\n            //  clipboard even if there's text in system clipboard on paste, because\n            //  we can't be sure of the order of copy operations\n            PREFER_APP_CLIPBOARD = true;\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[1, 7]]);\n  }));\n  return _copyToAppClipboard.apply(this, arguments);\n}\n\nexport function getAppClipboard() {\n  try {\n    var clipboardElements = JSON.parse(CLIPBOARD);\n\n    if (Array.isArray(clipboardElements) && clipboardElements.length > 0 && clipboardElements[0].type // need to implement a better check here...\n    ) {\n        return {\n          elements: clipboardElements\n        };\n      }\n  } catch (error) {\n    console.error(error);\n  }\n\n  return {};\n}\nexport function getClipboardContent(_x3) {\n  return _getClipboardContent.apply(this, arguments);\n}\n\nfunction _getClipboardContent() {\n  _getClipboardContent = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2(event) {\n    var _event$clipboardData, text;\n\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n\n            if (!event) {\n              _context2.next = 5;\n              break;\n            }\n\n            _context2.t0 = (_event$clipboardData = event.clipboardData) === null || _event$clipboardData === void 0 ? void 0 : _event$clipboardData.getData(\"text/plain\").trim();\n            _context2.next = 11;\n            break;\n\n          case 5:\n            _context2.t1 = probablySupportsClipboardReadText;\n\n            if (!_context2.t1) {\n              _context2.next = 10;\n              break;\n            }\n\n            _context2.next = 9;\n            return navigator.clipboard.readText();\n\n          case 9:\n            _context2.t1 = _context2.sent;\n\n          case 10:\n            _context2.t0 = _context2.t1;\n\n          case 11:\n            text = _context2.t0;\n\n            if (!(text && !PREFER_APP_CLIPBOARD)) {\n              _context2.next = 14;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", {\n              text: text\n            });\n\n          case 14:\n            _context2.next = 19;\n            break;\n\n          case 16:\n            _context2.prev = 16;\n            _context2.t2 = _context2[\"catch\"](0);\n            console.error(_context2.t2);\n\n          case 19:\n            return _context2.abrupt(\"return\", getAppClipboard());\n\n          case 20:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[0, 16]]);\n  }));\n  return _getClipboardContent.apply(this, arguments);\n}\n\nexport function copyCanvasToClipboardAsPng(_x4) {\n  return _copyCanvasToClipboardAsPng.apply(this, arguments);\n}\n\nfunction _copyCanvasToClipboardAsPng() {\n  _copyCanvasToClipboardAsPng = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee4(canvas) {\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            return _context4.abrupt(\"return\", new Promise(function (resolve, reject) {\n              try {\n                canvas.toBlob(\n                /*#__PURE__*/\n                function () {\n                  var _ref = _asyncToGenerator(\n                  /*#__PURE__*/\n                  _regeneratorRuntime.mark(function _callee3(blob) {\n                    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n                      while (1) {\n                        switch (_context3.prev = _context3.next) {\n                          case 0:\n                            _context3.prev = 0;\n                            _context3.next = 3;\n                            return navigator.clipboard.write([new window.ClipboardItem({\n                              \"image/png\": blob\n                            })]);\n\n                          case 3:\n                            resolve();\n                            _context3.next = 9;\n                            break;\n\n                          case 6:\n                            _context3.prev = 6;\n                            _context3.t0 = _context3[\"catch\"](0);\n                            reject(_context3.t0);\n\n                          case 9:\n                          case \"end\":\n                            return _context3.stop();\n                        }\n                      }\n                    }, _callee3, null, [[0, 6]]);\n                  }));\n\n                  return function (_x6) {\n                    return _ref.apply(this, arguments);\n                  };\n                }());\n              } catch (error) {\n                reject(error);\n              }\n            }));\n\n          case 1:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n  return _copyCanvasToClipboardAsPng.apply(this, arguments);\n}\n\nexport function copyTextToSystemClipboard(_x5) {\n  return _copyTextToSystemClipboard.apply(this, arguments);\n} // adapted from https://github.com/zenorocha/clipboard.js/blob/ce79f170aa655c408b6aab33c9472e8e4fa52e19/src/clipboard-action.js#L48\n\nfunction _copyTextToSystemClipboard() {\n  _copyTextToSystemClipboard = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee5(text) {\n    var copied;\n    return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            copied = false;\n\n            if (!probablySupportsClipboardWriteText) {\n              _context5.next = 11;\n              break;\n            }\n\n            _context5.prev = 2;\n            _context5.next = 5;\n            return navigator.clipboard.writeText(text || \"\");\n\n          case 5:\n            copied = true;\n            _context5.next = 11;\n            break;\n\n          case 8:\n            _context5.prev = 8;\n            _context5.t0 = _context5[\"catch\"](2);\n            console.error(_context5.t0);\n\n          case 11:\n            if (!(!copied && !copyTextViaExecCommand(text || \" \"))) {\n              _context5.next = 13;\n              break;\n            }\n\n            throw new Error(\"couldn't copy\");\n\n          case 13:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5, null, [[2, 8]]);\n  }));\n  return _copyTextToSystemClipboard.apply(this, arguments);\n}\n\nfunction copyTextViaExecCommand(text) {\n  var isRTL = document.documentElement.getAttribute(\"dir\") === \"rtl\";\n  var textarea = document.createElement(\"textarea\");\n  textarea.style.border = \"0\";\n  textarea.style.padding = \"0\";\n  textarea.style.margin = \"0\";\n  textarea.style.position = \"absolute\";\n  textarea.style[isRTL ? \"right\" : \"left\"] = \"-9999px\";\n  var yPosition = window.pageYOffset || document.documentElement.scrollTop;\n  textarea.style.top = \"\".concat(yPosition, \"px\"); // Prevent zooming on iOS\n\n  textarea.style.fontSize = \"12pt\";\n  textarea.setAttribute(\"readonly\", \"\");\n  textarea.value = text;\n  document.body.appendChild(textarea);\n  var success = false;\n\n  try {\n    textarea.select();\n    textarea.setSelectionRange(0, textarea.value.length);\n    success = document.execCommand(\"copy\");\n  } catch (error) {\n    console.error(error);\n  }\n\n  textarea.remove();\n  return success;\n}","map":{"version":3,"sources":["/home/pro/Solutions/drawboard-light/src/clipboard.ts"],"names":["getSelectedElements","CLIPBOARD","PREFER_APP_CLIPBOARD","probablySupportsClipboardReadText","navigator","clipboard","probablySupportsClipboardWriteText","probablySupportsClipboardBlob","window","HTMLCanvasElement","prototype","copyToAppClipboard","elements","appState","JSON","stringify","copyTextToSystemClipboard","getAppClipboard","clipboardElements","parse","Array","isArray","length","type","error","console","getClipboardContent","event","clipboardData","getData","trim","readText","text","copyCanvasToClipboardAsPng","canvas","Promise","resolve","reject","toBlob","blob","write","ClipboardItem","copied","writeText","copyTextViaExecCommand","Error","isRTL","document","documentElement","getAttribute","textarea","createElement","style","border","padding","margin","position","yPosition","pageYOffset","scrollTop","top","fontSize","setAttribute","value","body","appendChild","success","select","setSelectionRange","execCommand","remove"],"mappings":"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","sourcesContent":["import { ExcalidrawElement } from \"./element/types\";\nimport { getSelectedElements } from \"./scene\";\nimport { AppState } from \"./types\";\n\nlet CLIPBOARD = \"\";\nlet PREFER_APP_CLIPBOARD = false;\n\nexport const probablySupportsClipboardReadText =\n  \"clipboard\" in navigator && \"readText\" in navigator.clipboard;\n\nexport const probablySupportsClipboardWriteText =\n  \"clipboard\" in navigator && \"writeText\" in navigator.clipboard;\n\nexport const probablySupportsClipboardBlob =\n  \"clipboard\" in navigator &&\n  \"write\" in navigator.clipboard &&\n  \"ClipboardItem\" in window &&\n  \"toBlob\" in HTMLCanvasElement.prototype;\n\nexport async function copyToAppClipboard(\n  elements: readonly ExcalidrawElement[],\n  appState: AppState,\n) {\n  CLIPBOARD = JSON.stringify(getSelectedElements(elements, appState));\n  try {\n    // when copying to in-app clipboard, clear system clipboard so that if\n    //  system clip contains text on paste we know it was copied *after* user\n    //  copied elements, and thus we should prefer the text content.\n    await copyTextToSystemClipboard(null);\n    PREFER_APP_CLIPBOARD = false;\n  } catch {\n    // if clearing system clipboard didn't work, we should prefer in-app\n    //  clipboard even if there's text in system clipboard on paste, because\n    //  we can't be sure of the order of copy operations\n    PREFER_APP_CLIPBOARD = true;\n  }\n}\n\nexport function getAppClipboard(): {\n  elements?: readonly ExcalidrawElement[];\n} {\n  try {\n    const clipboardElements = JSON.parse(CLIPBOARD);\n\n    if (\n      Array.isArray(clipboardElements) &&\n      clipboardElements.length > 0 &&\n      clipboardElements[0].type // need to implement a better check here...\n    ) {\n      return { elements: clipboardElements };\n    }\n  } catch (error) {\n    console.error(error);\n  }\n\n  return {};\n}\n\nexport async function getClipboardContent(\n  event: ClipboardEvent | null,\n): Promise<{\n  text?: string;\n  elements?: readonly ExcalidrawElement[];\n}> {\n  try {\n    const text = event\n      ? event.clipboardData?.getData(\"text/plain\").trim()\n      : probablySupportsClipboardReadText &&\n        (await navigator.clipboard.readText());\n\n    if (text && !PREFER_APP_CLIPBOARD) {\n      return { text };\n    }\n  } catch (error) {\n    console.error(error);\n  }\n\n  return getAppClipboard();\n}\n\nexport async function copyCanvasToClipboardAsPng(canvas: HTMLCanvasElement) {\n  return new Promise((resolve, reject) => {\n    try {\n      canvas.toBlob(async function(blob: any) {\n        try {\n          await navigator.clipboard.write([\n            new window.ClipboardItem({ \"image/png\": blob }),\n          ]);\n          resolve();\n        } catch (error) {\n          reject(error);\n        }\n      });\n    } catch (error) {\n      reject(error);\n    }\n  });\n}\n\nexport async function copyTextToSystemClipboard(text: string | null) {\n  let copied = false;\n  if (probablySupportsClipboardWriteText) {\n    try {\n      // NOTE: doesn't work on FF on non-HTTPS domains, or when document\n      //  not focused\n      await navigator.clipboard.writeText(text || \"\");\n      copied = true;\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  // Note that execCommand doesn't allow copying empty strings, so if we're\n  //  clearing clipboard using this API, we must copy at least an empty char\n  if (!copied && !copyTextViaExecCommand(text || \" \")) {\n    throw new Error(\"couldn't copy\");\n  }\n}\n\n// adapted from https://github.com/zenorocha/clipboard.js/blob/ce79f170aa655c408b6aab33c9472e8e4fa52e19/src/clipboard-action.js#L48\nfunction copyTextViaExecCommand(text: string) {\n  const isRTL = document.documentElement.getAttribute(\"dir\") === \"rtl\";\n\n  const textarea = document.createElement(\"textarea\");\n\n  textarea.style.border = \"0\";\n  textarea.style.padding = \"0\";\n  textarea.style.margin = \"0\";\n  textarea.style.position = \"absolute\";\n  textarea.style[isRTL ? \"right\" : \"left\"] = \"-9999px\";\n  const yPosition = window.pageYOffset || document.documentElement.scrollTop;\n  textarea.style.top = `${yPosition}px`;\n  // Prevent zooming on iOS\n  textarea.style.fontSize = \"12pt\";\n\n  textarea.setAttribute(\"readonly\", \"\");\n  textarea.value = text;\n\n  document.body.appendChild(textarea);\n\n  let success = false;\n\n  try {\n    textarea.select();\n    textarea.setSelectionRange(0, textarea.value.length);\n\n    success = document.execCommand(\"copy\");\n  } catch (error) {\n    console.error(error);\n  }\n\n  textarea.remove();\n\n  return success;\n}\n"]},"metadata":{},"sourceType":"module"}