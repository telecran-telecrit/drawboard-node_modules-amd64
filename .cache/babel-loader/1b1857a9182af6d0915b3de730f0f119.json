{"ast":null,"code":"var _jsxFileName = \"/home/pro/Solutions/drawboard-light/src/components/HintViewer.tsx\";\nimport React from \"react\";\nimport { t } from \"../i18n\";\nimport { getSelectedElements } from \"../scene\";\nimport \"./HintViewer.scss\";\nimport { isLinearElement } from \"../element/typeChecks\";\n\nconst getHints = ({\n  appState,\n  elements\n}) => {\n  const {\n    elementType,\n    isResizing,\n    isRotating,\n    lastPointerDownWith\n  } = appState;\n  const multiMode = appState.multiElement !== null;\n\n  if (elementType === \"arrow\" || elementType === \"line\") {\n    if (!multiMode) {\n      return t(\"hints.linearElement\");\n    }\n\n    return t(\"hints.linearElementMulti\");\n  }\n\n  const selectedElements = getSelectedElements(elements, appState);\n\n  if (isResizing && lastPointerDownWith === \"mouse\" && selectedElements.length === 1) {\n    const targetElement = selectedElements[0];\n\n    if (isLinearElement(targetElement) && targetElement.points.length > 2) {\n      return null;\n    }\n\n    return t(\"hints.resize\");\n  }\n\n  if (isRotating && lastPointerDownWith === \"mouse\") {\n    return t(\"hints.rotate\");\n  }\n\n  return null;\n};\n\nexport const HintViewer = ({\n  appState,\n  elements\n}) => {\n  const hint = getHints({\n    appState,\n    elements\n  });\n\n  if (!hint) {\n    return null;\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"HintViewer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }\n  }, hint));\n};","map":{"version":3,"sources":["/home/pro/Solutions/drawboard-light/src/components/HintViewer.tsx"],"names":["React","t","getSelectedElements","isLinearElement","getHints","appState","elements","elementType","isResizing","isRotating","lastPointerDownWith","multiMode","multiElement","selectedElements","length","targetElement","points","HintViewer","hint"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,CAAT,QAAkB,SAAlB;AAEA,SAASC,mBAAT,QAAoC,UAApC;AAEA,OAAO,mBAAP;AAEA,SAASC,eAAT,QAAgC,uBAAhC;;AAOA,MAAMC,QAAQ,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAYC,EAAAA;AAAZ,CAAD,KAAkC;AACjD,QAAM;AAAEC,IAAAA,WAAF;AAAeC,IAAAA,UAAf;AAA2BC,IAAAA,UAA3B;AAAuCC,IAAAA;AAAvC,MAA+DL,QAArE;AACA,QAAMM,SAAS,GAAGN,QAAQ,CAACO,YAAT,KAA0B,IAA5C;;AACA,MAAIL,WAAW,KAAK,OAAhB,IAA2BA,WAAW,KAAK,MAA/C,EAAuD;AACrD,QAAI,CAACI,SAAL,EAAgB;AACd,aAAOV,CAAC,CAAC,qBAAD,CAAR;AACD;;AACD,WAAOA,CAAC,CAAC,0BAAD,CAAR;AACD;;AAED,QAAMY,gBAAgB,GAAGX,mBAAmB,CAACI,QAAD,EAAWD,QAAX,CAA5C;;AACA,MACEG,UAAU,IACVE,mBAAmB,KAAK,OADxB,IAEAG,gBAAgB,CAACC,MAAjB,KAA4B,CAH9B,EAIE;AACA,UAAMC,aAAa,GAAGF,gBAAgB,CAAC,CAAD,CAAtC;;AACA,QAAIV,eAAe,CAACY,aAAD,CAAf,IAAkCA,aAAa,CAACC,MAAd,CAAqBF,MAArB,GAA8B,CAApE,EAAuE;AACrE,aAAO,IAAP;AACD;;AACD,WAAOb,CAAC,CAAC,cAAD,CAAR;AACD;;AAED,MAAIQ,UAAU,IAAIC,mBAAmB,KAAK,OAA1C,EAAmD;AACjD,WAAOT,CAAC,CAAC,cAAD,CAAR;AACD;;AAED,SAAO,IAAP;AACD,CA5BD;;AA8BA,OAAO,MAAMgB,UAAU,GAAG,CAAC;AAAEZ,EAAAA,QAAF;AAAYC,EAAAA;AAAZ,CAAD,KAAkC;AAC1D,QAAMY,IAAI,GAAGd,QAAQ,CAAC;AACpBC,IAAAA,QADoB;AAEpBC,IAAAA;AAFoB,GAAD,CAArB;;AAIA,MAAI,CAACY,IAAL,EAAW;AACT,WAAO,IAAP;AACD;;AAED,sBACE;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAOA,IAAP,CADF,CADF;AAKD,CAdM","sourcesContent":["import React from \"react\";\nimport { t } from \"../i18n\";\nimport { NonDeletedExcalidrawElement } from \"../element/types\";\nimport { getSelectedElements } from \"../scene\";\n\nimport \"./HintViewer.scss\";\nimport { AppState } from \"../types\";\nimport { isLinearElement } from \"../element/typeChecks\";\n\ninterface Hint {\n  appState: AppState;\n  elements: readonly NonDeletedExcalidrawElement[];\n}\n\nconst getHints = ({ appState, elements }: Hint) => {\n  const { elementType, isResizing, isRotating, lastPointerDownWith } = appState;\n  const multiMode = appState.multiElement !== null;\n  if (elementType === \"arrow\" || elementType === \"line\") {\n    if (!multiMode) {\n      return t(\"hints.linearElement\");\n    }\n    return t(\"hints.linearElementMulti\");\n  }\n\n  const selectedElements = getSelectedElements(elements, appState);\n  if (\n    isResizing &&\n    lastPointerDownWith === \"mouse\" &&\n    selectedElements.length === 1\n  ) {\n    const targetElement = selectedElements[0];\n    if (isLinearElement(targetElement) && targetElement.points.length > 2) {\n      return null;\n    }\n    return t(\"hints.resize\");\n  }\n\n  if (isRotating && lastPointerDownWith === \"mouse\") {\n    return t(\"hints.rotate\");\n  }\n\n  return null;\n};\n\nexport const HintViewer = ({ appState, elements }: Hint) => {\n  const hint = getHints({\n    appState,\n    elements,\n  });\n  if (!hint) {\n    return null;\n  }\n\n  return (\n    <div className=\"HintViewer\">\n      <span>{hint}</span>\n    </div>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}