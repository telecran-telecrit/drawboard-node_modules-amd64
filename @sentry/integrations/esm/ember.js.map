{"version":3,"file":"ember.js","sourceRoot":"","sources":["../src/ember.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,eAAe,EAAE,YAAY,EAAE,MAAM,EAAE,MAAM,eAAe,CAAC;AAEtE,YAAY;AACZ;IAeE;;OAEG;IACH,eAAmB,OAA6B;QAA7B,wBAAA,EAAA,YAA6B;QAjBhD;;WAEG;QACI,SAAI,GAAW,KAAK,CAAC,EAAE,CAAC;QAe7B,0CAA0C;QAC1C,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC,KAAK,IAAI,eAAe,EAAO,CAAC,KAAK,CAAC;IAC9D,CAAC;IAED;;OAEG;IACI,yBAAS,GAAhB,UAAiB,CAAqC,EAAE,aAAwB;QAC9E,+BAA+B;QADjC,iBAsCC;QAnCC,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;YAChB,MAAM,CAAC,KAAK,CAAC,+CAA+C,CAAC,CAAC;YAC9D,OAAO;SACR;QAED,IAAM,UAAU,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC;QAEvC,IAAI,CAAC,MAAM,CAAC,OAAO,GAAG,UAAC,KAAY;YACjC,IAAI,aAAa,EAAE,CAAC,cAAc,CAAC,KAAK,CAAC,EAAE;gBACzC,aAAa,EAAE,CAAC,gBAAgB,CAAC,KAAK,EAAE,EAAE,iBAAiB,EAAE,KAAK,EAAE,CAAC,CAAC;aACvE;YAED,IAAI,OAAO,UAAU,KAAK,UAAU,EAAE;gBACpC,UAAU,CAAC,IAAI,CAAC,KAAI,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;aACrC;iBAAM,IAAI,KAAI,CAAC,MAAM,CAAC,OAAO,EAAE;gBAC9B,MAAM,KAAK,CAAC;aACb;QACH,CAAC,CAAC;QAEF,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CACjB,OAAO,EACP,UAAC,MAAW;YACV,IAAI,aAAa,EAAE,CAAC,cAAc,CAAC,KAAK,CAAC,EAAE;gBACzC,aAAa,EAAE,CAAC,SAAS,CAAC,UAAA,KAAK;oBAC7B,IAAI,YAAY,CAAC,MAAM,EAAE,KAAK,CAAC,EAAE;wBAC/B,KAAK,CAAC,QAAQ,CAAC,SAAS,EAAE,kCAAkC,CAAC,CAAC;wBAC9D,aAAa,EAAE,CAAC,gBAAgB,CAAC,MAAM,EAAE,EAAE,iBAAiB,EAAE,MAAM,EAAE,CAAC,CAAC;qBACzE;yBAAM;wBACL,KAAK,CAAC,QAAQ,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;wBACjC,aAAa,EAAE,CAAC,cAAc,CAAC,kCAAkC,CAAC,CAAC;qBACpE;gBACH,CAAC,CAAC,CAAC;aACJ;QACH,CAAC,CACF,CAAC;IACJ,CAAC;IA3DD;;OAEG;IACW,QAAE,GAAW,OAAO,CAAC;IAyDrC,YAAC;CAAA,AAjED,IAiEC;SAjEY,KAAK","sourcesContent":["import { EventProcessor, Hub, Integration } from '@sentry/types';\nimport { getGlobalObject, isInstanceOf, logger } from '@sentry/utils';\n\n/** JSDoc */\nexport class Ember implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public name: string = Ember.id;\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'Ember';\n\n  /**\n   * @inheritDoc\n   */\n  private readonly _Ember: any; // tslint:disable-line:variable-name\n\n  /**\n   * @inheritDoc\n   */\n  public constructor(options: { Ember?: any } = {}) {\n    // tslint:disable-next-line: no-unsafe-any\n    this._Ember = options.Ember || getGlobalObject<any>().Ember;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(_: (callback: EventProcessor) => void, getCurrentHub: () => Hub): void {\n    // tslint:disable:no-unsafe-any\n\n    if (!this._Ember) {\n      logger.error('EmberIntegration is missing an Ember instance');\n      return;\n    }\n\n    const oldOnError = this._Ember.onerror;\n\n    this._Ember.onerror = (error: Error): void => {\n      if (getCurrentHub().getIntegration(Ember)) {\n        getCurrentHub().captureException(error, { originalException: error });\n      }\n\n      if (typeof oldOnError === 'function') {\n        oldOnError.call(this._Ember, error);\n      } else if (this._Ember.testing) {\n        throw error;\n      }\n    };\n\n    this._Ember.RSVP.on(\n      'error',\n      (reason: any): void => {\n        if (getCurrentHub().getIntegration(Ember)) {\n          getCurrentHub().withScope(scope => {\n            if (isInstanceOf(reason, Error)) {\n              scope.setExtra('context', 'Unhandled Promise error detected');\n              getCurrentHub().captureException(reason, { originalException: reason });\n            } else {\n              scope.setExtra('reason', reason);\n              getCurrentHub().captureMessage('Unhandled Promise error detected');\n            }\n          });\n        }\n      },\n    );\n  }\n}\n"]}